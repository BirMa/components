{"version":3,"sources":["/C:/workspace/prosoft-components-demo/node_modules/@angular/material/tooltip/typings/index.d.ts.TooltipComponent.html","/C:/workspace/prosoft-components-demo/node_modules/ngx-mat-select-search/fesm5/ngx-mat-select-search.js","/../components/select/src/select.module.ts","/../components/select/src/select.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sGAAA,kRAA+M,YAA1E;;wBAAkC;MAAC;;wBAAsC;MAA9M,ksBAA+M,GAA7J,sLAA2D,KAAkG,2EAAW,mDAArN,6BAAmB,EAAC,mBAAwB,eAAjD,YAA+M,EAA1M,SAAmB,EAAC,SAAwB,mDAAC,6NAA2D,WAAC,mBAAsB,cAApI,YAA+M,EAA7J,SAA2D,EAAC,SAAsB,GAA2E,oDAAW;;;;;;;;;;;;;;;;;;;ACA1N;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AAC4K;AACrK;AAC+B;AACJ;AAClB;AACqC;AAC1C;AACL;AACnB;AACyB;AACG;AACI;AACR;AACE;AACqB;AAC/B;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,wDAAU;AAC9C,QAAQ,+DAAS;AACjB;AACA,SAAS;AACT;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,wBAAwB,GAAG,wBAAwB,GAAG,wBAAwB;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,kBAAkB;AACrD,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,0DAAY;AACzC,sCAAsC;AACtC,uCAAuC;AACvC;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6DAAK,KAAK,iEAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,4DAAI;AACtB,kBAAkB,iEAAS;AAC3B;AACA;AACA,wDAAwD,iEAAS;AACjE,4CAA4C,yDAAyD,EAAE;AACvG;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iEAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,kBAAkB,iEAAS;AAC3B;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,iEAAS;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,kBAAkB,4DAAI,KAAK,iEAAS;AACpC;AACA,sBAAsB,iEAAS;AAC/B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uDAAC,qBAAqB,uDAAC;AACrD,8BAA8B,0DAAI,qBAAqB,0DAAI;AAC3D,+BAA+B,2DAAK;AACpC,wEAAwE,0DAAI,sBAAsB,yDAAG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8DAAQ,sBAAsB,gEAAU;AACtE;AACA,2EAA2E,6CAA6C,EAAE;AAC1H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iEAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iEAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wFAAwF,qBAAqB,EAAE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4FAA6B;AAC1D;AACA;AACA;AACA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","file":"default~select-demo-select-demo-module-ngfactory~start-page-start-page-module-ngfactory-es5.js","sourcesContent":["<div class=\"mat-tooltip\" [ngClass]=\"tooltipClass\" [class.mat-tooltip-handset]=\"(_isHandset | async)?.matches\" [@state]=\"_visibility\" (@state.start)=\"_animationStart()\" (@state.done)=\"_animationDone($event)\">{{message}}</div>","import { __decorate, __param } from 'tslib';\nimport { Directive, EventEmitter, Inject, ChangeDetectorRef, Optional, Input, Output, ViewChild, ElementRef, ContentChild, HostBinding, Component, forwardRef, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport { SELECT_PANEL_MAX_HEIGHT, MatSelect } from '@angular/material/select';\nimport { MatFormField } from '@angular/material/form-field';\nimport { A, Z, ZERO, NINE, SPACE, HOME, END, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Subject } from 'rxjs';\nimport { delay, takeUntil, take } from 'rxjs/operators';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * Directive for providing a custom clear-icon.\r\n * e.g.\r\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\r\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\r\n * </ngx-mat-select-search>\r\n */\r\nvar MatSelectSearchClearDirective = /** @class */ (function () {\r\n    function MatSelectSearchClearDirective() {\r\n    }\r\n    MatSelectSearchClearDirective = __decorate([\r\n        Directive({\r\n            selector: '[ngxMatSelectSearchClear]'\r\n        })\r\n    ], MatSelectSearchClearDirective);\r\n    return MatSelectSearchClearDirective;\r\n}());\n\n/**\r\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/* tslint:disable:member-ordering component-selector */\r\n/**\r\n * Component providing an input field for searching MatSelect options.\r\n *\r\n * Example usage:\r\n *\r\n * interface Bank {\r\n *  id: string;\r\n *  name: string;\r\n * }\r\n *\r\n * @Component({\r\n *   selector: 'my-app-data-selection',\r\n *   template: `\r\n *     <mat-form-field>\r\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\r\n *         <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\r\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\r\n *           {{bank.name}}\r\n *         </mat-option>\r\n *       </mat-select>\r\n *     </mat-form-field>\r\n *   `\r\n * })\r\n * export class DataSelectionComponent implements OnInit, OnDestroy {\r\n *\r\n *   // control for the selected bank\r\n *   public bankCtrl: FormControl = new FormControl();\r\n *   // control for the MatSelect filter keyword\r\n *   public bankFilterCtrl: FormControl = new FormControl();\r\n *\r\n *   // list of banks\r\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\r\n *   // list of banks filtered by search keyword\r\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n *\r\n *   // Subject that emits when the component has been destroyed.\r\n *   private _onDestroy = new Subject<void>();\r\n *\r\n *\r\n *   ngOnInit() {\r\n *     // load the initial bank list\r\n *     this.filteredBanks.next(this.banks.slice());\r\n *     // listen for search field value changes\r\n *     this.bankFilterCtrl.valueChanges\r\n *       .pipe(takeUntil(this._onDestroy))\r\n *       .subscribe(() => {\r\n *         this.filterBanks();\r\n *       });\r\n *   }\r\n *\r\n *   ngOnDestroy() {\r\n *     this._onDestroy.next();\r\n *     this._onDestroy.complete();\r\n *   }\r\n *\r\n *   private filterBanks() {\r\n *     if (!this.banks) {\r\n *       return;\r\n *     }\r\n *\r\n *     // get the search keyword\r\n *     let search = this.bankFilterCtrl.value;\r\n *     if (!search) {\r\n *       this.filteredBanks.next(this.banks.slice());\r\n *       return;\r\n *     } else {\r\n *       search = search.toLowerCase();\r\n *     }\r\n *\r\n *     // filter the banks\r\n *     this.filteredBanks.next(\r\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\r\n *     );\r\n *   }\r\n * }\r\n */\r\nvar MatSelectSearchComponent = /** @class */ (function () {\r\n    function MatSelectSearchComponent(matSelect, changeDetectorRef, _viewportRuler, matOption, liveAnnouncer, matFormField) {\r\n        if (matOption === void 0) { matOption = null; }\r\n        if (matFormField === void 0) { matFormField = null; }\r\n        this.matSelect = matSelect;\r\n        this.changeDetectorRef = changeDetectorRef;\r\n        this._viewportRuler = _viewportRuler;\r\n        this.matOption = matOption;\r\n        this.liveAnnouncer = liveAnnouncer;\r\n        this.matFormField = matFormField;\r\n        /** Label of the search placeholder */\r\n        this.placeholderLabel = 'Suche';\r\n        /** Type of the search input field */\r\n        this.type = 'text';\r\n        /** Label to be shown when no entries are found. Set to null if no message should be shown. */\r\n        this.noEntriesFoundLabel = 'Keine Optionen gefunden';\r\n        /**\r\n         *  Text that is appended to the currently active item label announced by screen readers, informing the user of the current index, value and total options.\r\n         *  eg: Bank R (Germany) 1 of 6\r\n        */\r\n        this.indexAndLengthScreenReaderText = ' of ';\r\n        /**\r\n          * Whether or not the search field should be cleared after the dropdown menu is closed.\r\n          * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\r\n          */\r\n        this.clearSearchInput = true;\r\n        /** Whether to show the search-in-progress indicator */\r\n        this.searching = false;\r\n        /** Disables initial focusing of the input field */\r\n        this.disableInitialFocus = false;\r\n        /**\r\n         * Prevents home / end key being propagated to mat-select,\r\n         * allowing to move the cursor within the search input instead of navigating the options\r\n         */\r\n        this.preventHomeEndKeyPropagation = false;\r\n        /** Disables scrolling to active options when option list changes. Useful for server-side search */\r\n        this.disableScrollToActiveOnOptionsChanged = false;\r\n        /** Adds 508 screen reader support for search box */\r\n        this.ariaLabel = 'dropdown search';\r\n        /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\r\n        this.showToggleAllCheckbox = false;\r\n        /** select all checkbox checked state */\r\n        this.toggleAllCheckboxChecked = false;\r\n        /** select all checkbox indeterminate state */\r\n        this.toggleAllCheckboxIndeterminate = false;\r\n        /** Output emitter to send to parent component with the toggle all boolean */\r\n        this.toggleAll = new EventEmitter();\r\n        this.onChange = function (_) { };\r\n        this.onTouched = function (_) { };\r\n        /** Whether the backdrop class has been set */\r\n        this.overlayClassSet = false;\r\n        /** Event that emits when the current value changes */\r\n        this.change = new EventEmitter();\r\n        /** Subject that emits when the component has been destroyed. */\r\n        this._onDestroy = new Subject();\r\n    }\r\n    MatSelectSearchComponent_1 = MatSelectSearchComponent;\r\n    Object.defineProperty(MatSelectSearchComponent.prototype, \"isInsideMatOption\", {\r\n        get: function () {\r\n            return !!this.matOption;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatSelectSearchComponent.prototype, \"value\", {\r\n        /** Current search value */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MatSelectSearchComponent.prototype.ngOnInit = function () {\r\n        var _this = this;\r\n        // set custom panel class\r\n        var panelClass = 'mat-select-search-panel';\r\n        if (this.matSelect.panelClass) {\r\n            if (Array.isArray(this.matSelect.panelClass)) {\r\n                this.matSelect.panelClass.push(panelClass);\r\n            }\r\n            else if (typeof this.matSelect.panelClass === 'string') {\r\n                this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\r\n            }\r\n            else if (typeof this.matSelect.panelClass === 'object') {\r\n                this.matSelect.panelClass[panelClass] = true;\r\n            }\r\n        }\r\n        else {\r\n            this.matSelect.panelClass = panelClass;\r\n        }\r\n        // set custom mat-option class if the component was placed inside a mat-option\r\n        if (this.matOption) {\r\n            this.matOption.disabled = true;\r\n            this.matOption._getHostElement().classList.add('contains-mat-select-search');\r\n        }\r\n        // when the select dropdown panel is opened or closed\r\n        this.matSelect.openedChange\r\n            .pipe(delay(1), takeUntil(this._onDestroy))\r\n            .subscribe(function (opened) {\r\n            if (opened) {\r\n                _this.updateInputWidth();\r\n                // focus the search field when opening\r\n                if (!_this.disableInitialFocus) {\r\n                    _this._focus();\r\n                }\r\n            }\r\n            else {\r\n                // clear it when closing\r\n                if (_this.clearSearchInput) {\r\n                    _this._reset();\r\n                }\r\n            }\r\n        });\r\n        // set the first item active after the options changed\r\n        this.matSelect.openedChange\r\n            .pipe(take(1))\r\n            .pipe(takeUntil(this._onDestroy))\r\n            .subscribe(function () {\r\n            if (_this.matSelect._keyManager) {\r\n                _this.matSelect._keyManager.change.pipe(takeUntil(_this._onDestroy))\r\n                    .subscribe(function () { return _this.adjustScrollTopToFitActiveOptionIntoView(); });\r\n            }\r\n            else {\r\n                console.log('_keyManager was not initialized.');\r\n            }\r\n            _this._options = _this.matSelect.options;\r\n            _this._options.changes\r\n                .pipe(takeUntil(_this._onDestroy))\r\n                .subscribe(function () {\r\n                var keyManager = _this.matSelect._keyManager;\r\n                if (keyManager && _this.matSelect.panelOpen) {\r\n                    // avoid \"expression has been changed\" error\r\n                    setTimeout(function () {\r\n                        // set first item active and input width\r\n                        keyManager.setFirstItemActive();\r\n                        // wait for panel width changes\r\n                        setTimeout(function () {\r\n                            _this.updateInputWidth();\r\n                        });\r\n                        // set no entries found class on mat option\r\n                        if (_this.matOption) {\r\n                            if (_this._noEntriesFound()) {\r\n                                _this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\r\n                            }\r\n                            else {\r\n                                _this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\r\n                            }\r\n                        }\r\n                        if (!_this.disableScrollToActiveOnOptionsChanged) {\r\n                            _this.adjustScrollTopToFitActiveOptionIntoView();\r\n                        }\r\n                    }, 1);\r\n                }\r\n            });\r\n        });\r\n        // detect changes when the input changes\r\n        this.change\r\n            .pipe(takeUntil(this._onDestroy))\r\n            .subscribe(function () {\r\n            _this.changeDetectorRef.detectChanges();\r\n        });\r\n        // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\r\n        this._viewportRuler.change()\r\n            .pipe(takeUntil(this._onDestroy))\r\n            .subscribe(function () {\r\n            if (_this.matSelect.panelOpen) {\r\n                _this.updateInputWidth();\r\n            }\r\n        });\r\n        this.initMultipleHandling();\r\n    };\r\n    MatSelectSearchComponent.prototype._emitSelectAllBooleanToParent = function (state) {\r\n        this.toggleAll.emit(state);\r\n    };\r\n    MatSelectSearchComponent.prototype.ngOnDestroy = function () {\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n    };\r\n    MatSelectSearchComponent.prototype.ngAfterViewInit = function () {\r\n        var _this = this;\r\n        setTimeout(function () {\r\n            _this.setOverlayClass();\r\n        });\r\n        // update view when available options change\r\n        this.matSelect.openedChange\r\n            .pipe(take(1), takeUntil(this._onDestroy)).subscribe(function () {\r\n            _this.matSelect.options.changes\r\n                .pipe(takeUntil(_this._onDestroy))\r\n                .subscribe(function () {\r\n                _this.changeDetectorRef.markForCheck();\r\n            });\r\n        });\r\n    };\r\n    MatSelectSearchComponent.prototype._isToggleAllCheckboxVisible = function () {\r\n        return this.matSelect.multiple && this.showToggleAllCheckbox;\r\n    };\r\n    /**\r\n     * Handles the key down event with MatSelect.\r\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\r\n     * @param event\r\n     */\r\n    MatSelectSearchComponent.prototype._handleKeydown = function (event) {\r\n        // Prevent propagation for all alphanumeric characters in order to avoid selection issues\r\n        if ((event.key && event.key.length === 1) ||\r\n            (event.keyCode >= A && event.keyCode <= Z) ||\r\n            (event.keyCode >= ZERO && event.keyCode <= NINE) ||\r\n            (event.keyCode === SPACE)\r\n            || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))) {\r\n            event.stopPropagation();\r\n        }\r\n    };\r\n    /**\r\n     * Handles the key up event with MatSelect.\r\n     * Allows e.g. the announcing of the currently activeDescendant by screen readers.\r\n     */\r\n    MatSelectSearchComponent.prototype._handleKeyup = function (event) {\r\n        if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\r\n            var ariaActiveDescendantId_1 = this.matSelect._getAriaActiveDescendant();\r\n            var index = this._options.toArray().findIndex(function (item) { return item.id === ariaActiveDescendantId_1; });\r\n            if (index !== -1) {\r\n                var activeDescendant = this._options.toArray()[index];\r\n                this.liveAnnouncer.announce(activeDescendant.viewValue + ' '\r\n                    + this.getAriaIndex(index)\r\n                    + this.indexAndLengthScreenReaderText\r\n                    + this.getAriaLength());\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Calculate the index of the current option, taking the offset to length into account.\r\n     * examples:\r\n     *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\r\n     *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\r\n     */\r\n    MatSelectSearchComponent.prototype.getAriaIndex = function (optionIndex) {\r\n        if (this.getOptionsLengthOffset() === 0) {\r\n            return optionIndex + 1;\r\n        }\r\n        return optionIndex;\r\n    };\r\n    /**\r\n     * Calculate the length of the options, taking the offset to length into account.\r\n     * examples:\r\n     *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\r\n     *    Case 2 [1, 2, 3] will have length of options.length.\r\n     */\r\n    MatSelectSearchComponent.prototype.getAriaLength = function () {\r\n        return this._options.toArray().length - this.getOptionsLengthOffset();\r\n    };\r\n    MatSelectSearchComponent.prototype.writeValue = function (value) {\r\n        var valueChanged = value !== this._value;\r\n        if (valueChanged) {\r\n            this._value = value;\r\n            this.change.emit(value);\r\n        }\r\n    };\r\n    MatSelectSearchComponent.prototype.onInputChange = function (value) {\r\n        var valueChanged = value !== this._value;\r\n        if (valueChanged) {\r\n            this.initMultiSelectedValues();\r\n            this._value = value;\r\n            this.onChange(value);\r\n            this.change.emit(value);\r\n        }\r\n    };\r\n    MatSelectSearchComponent.prototype.onBlur = function (value) {\r\n        this.writeValue(value);\r\n        this.onTouched();\r\n    };\r\n    MatSelectSearchComponent.prototype.registerOnChange = function (fn) {\r\n        this.onChange = fn;\r\n    };\r\n    MatSelectSearchComponent.prototype.registerOnTouched = function (fn) {\r\n        this.onTouched = fn;\r\n    };\r\n    /**\r\n     * Focuses the search input field\r\n     */\r\n    MatSelectSearchComponent.prototype._focus = function () {\r\n        if (!this.searchSelectInput || !this.matSelect.panel) {\r\n            return;\r\n        }\r\n        // save and restore scrollTop of panel, since it will be reset by focus()\r\n        // note: this is hacky\r\n        var panel = this.matSelect.panel.nativeElement;\r\n        var scrollTop = panel.scrollTop;\r\n        // focus\r\n        this.searchSelectInput.nativeElement.focus();\r\n        panel.scrollTop = scrollTop;\r\n    };\r\n    /**\r\n     * Resets the current search value\r\n     * @param focus whether to focus after resetting\r\n     */\r\n    MatSelectSearchComponent.prototype._reset = function (focus) {\r\n        if (!this.searchSelectInput) {\r\n            return;\r\n        }\r\n        this.searchSelectInput.nativeElement.value = '';\r\n        this.onInputChange('');\r\n        if (this.matOption && !focus) {\r\n            // remove no entries found class on mat option\r\n            this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\r\n        }\r\n        if (focus) {\r\n            this._focus();\r\n        }\r\n    };\r\n    /**\r\n     * Sets the overlay class  to correct offsetY\r\n     * so that the selected option is at the position of the select box when opening\r\n     */\r\n    MatSelectSearchComponent.prototype.setOverlayClass = function () {\r\n        var _this = this;\r\n        if (this.overlayClassSet) {\r\n            return;\r\n        }\r\n        var overlayClasses = ['cdk-overlay-pane-select-search'];\r\n        if (!this.matOption) {\r\n            // add offset to panel if component is not placed inside mat-option\r\n            overlayClasses.push('cdk-overlay-pane-select-search-with-offset');\r\n        }\r\n        this.matSelect.overlayDir.attach\r\n            .pipe(takeUntil(this._onDestroy))\r\n            .subscribe(function () {\r\n            // note: this is hacky, but currently there is no better way to do this\r\n            var element = _this.searchSelectInput.nativeElement;\r\n            var overlayElement;\r\n            while (element = element.parentElement) {\r\n                if (element.classList.contains('cdk-overlay-pane')) {\r\n                    overlayElement = element;\r\n                    break;\r\n                }\r\n            }\r\n            if (overlayElement) {\r\n                overlayClasses.forEach(function (overlayClass) {\r\n                    overlayElement.classList.add(overlayClass);\r\n                });\r\n            }\r\n        });\r\n        this.overlayClassSet = true;\r\n    };\r\n    /**\r\n     * Initializes handling <mat-select [multiple]=\"true\">\r\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\r\n     */\r\n    MatSelectSearchComponent.prototype.initMultipleHandling = function () {\r\n        var _this = this;\r\n        // if <mat-select [multiple]=\"true\">\r\n        // store previously selected values and restore them when they are deselected\r\n        // because the option is not available while we are currently filtering\r\n        this.matSelect.valueChange\r\n            .pipe(takeUntil(this._onDestroy))\r\n            .subscribe(function (values) {\r\n            if (_this.matSelect.multiple) {\r\n                var restoreSelectedValues_1 = false;\r\n                if (_this._value && _this._value.length\r\n                    && _this.previousSelectedValues && Array.isArray(_this.previousSelectedValues)) {\r\n                    if (!values || !Array.isArray(values)) {\r\n                        values = [];\r\n                    }\r\n                    var optionValues_1 = _this.matSelect.options.map(function (option) { return option.value; });\r\n                    _this.previousSelectedValues.forEach(function (previousValue) {\r\n                        if (values.indexOf(previousValue) === -1 && optionValues_1.indexOf(previousValue) === -1) {\r\n                            // if a value that was selected before is deselected and not found in the options, it was deselected\r\n                            // due to the filtering, so we restore it.\r\n                            values.push(previousValue);\r\n                            restoreSelectedValues_1 = true;\r\n                        }\r\n                    });\r\n                }\r\n                if (restoreSelectedValues_1) {\r\n                    _this.matSelect._onChange(values);\r\n                }\r\n                _this.previousSelectedValues = values;\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Scrolls the currently active option into the view if it is not yet visible.\r\n     */\r\n    MatSelectSearchComponent.prototype.adjustScrollTopToFitActiveOptionIntoView = function () {\r\n        if (this.matSelect.panel && this.matSelect.options.length > 0) {\r\n            var matOptionHeight = this.getMatOptionHeight();\r\n            var activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\r\n            var labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\r\n            // If the component is in a MatOption, the activeItemIndex will be offset by one.\r\n            var indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\r\n            var currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\r\n            var searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\r\n            var amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\r\n            var indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\r\n            if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\r\n                this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\r\n            }\r\n            else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\r\n                this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\r\n     *  And support all Operation Systems\r\n     */\r\n    MatSelectSearchComponent.prototype.updateInputWidth = function () {\r\n        if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\r\n            return;\r\n        }\r\n        var element = this.innerSelectSearch.nativeElement;\r\n        var panelElement;\r\n        while (element = element.parentElement) {\r\n            if (element.classList.contains('mat-select-panel')) {\r\n                panelElement = element;\r\n                break;\r\n            }\r\n        }\r\n        if (panelElement) {\r\n            this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\r\n        }\r\n    };\r\n    MatSelectSearchComponent.prototype.getMatOptionHeight = function () {\r\n        if (this.matSelect.options.length > 0) {\r\n            return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\r\n        }\r\n        return 0;\r\n    };\r\n    /**\r\n     *  Initialize this.previousSelectedValues once the first filtering occurs.\r\n     */\r\n    MatSelectSearchComponent.prototype.initMultiSelectedValues = function () {\r\n        if (this.matSelect.multiple && !this._value) {\r\n            this.previousSelectedValues = this.matSelect.options\r\n                .filter(function (option) { return option.selected; })\r\n                .map(function (option) { return option.value; });\r\n        }\r\n    };\r\n    /**\r\n     * Returns whether the \"no entries found\" message should be displayed\r\n     */\r\n    MatSelectSearchComponent.prototype._noEntriesFound = function () {\r\n        if (!this._options) {\r\n            return;\r\n        }\r\n        return this.noEntriesFoundLabel && this.value && this._options.length === this.getOptionsLengthOffset();\r\n    };\r\n    /**\r\n     * Determine the offset to length that can be caused by the optional matOption used as a search input.\r\n     */\r\n    MatSelectSearchComponent.prototype.getOptionsLengthOffset = function () {\r\n        if (this.matOption) {\r\n            return 1;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    };\r\n    var MatSelectSearchComponent_1;\r\n    MatSelectSearchComponent.ctorParameters = function () { return [\r\n        { type: MatSelect, decorators: [{ type: Inject, args: [MatSelect,] }] },\r\n        { type: ChangeDetectorRef },\r\n        { type: ViewportRuler },\r\n        { type: MatOption, decorators: [{ type: Optional }, { type: Inject, args: [MatOption,] }] },\r\n        { type: LiveAnnouncer },\r\n        { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MatFormField,] }] }\r\n    ]; };\r\n    __decorate([\r\n        Input()\r\n    ], MatSelectSearchComponent.prototype, \"placeholderLabel\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], MatSelectSearchComponent.prototype, \"type\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], MatSelectSearchComponent.prototype, \"noEntriesFoundLabel\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], MatSelectSearchComponent.prototype, \"indexAndLengthScreenReaderText\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], MatSelectSearchComponent.prototype, \"clearSearchInput\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], MatSelectSearchComponent.prototype, \"searching\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], MatSelectSearchComponent.prototype, \"disableInitialFocus\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], MatSelectSearchComponent.prototype, \"preventHomeEndKeyPropagation\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], MatSelectSearchComponent.prototype, \"disableScrollToActiveOnOptionsChanged\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], MatSelectSearchComponent.prototype, \"ariaLabel\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], MatSelectSearchComponent.prototype, \"showToggleAllCheckbox\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], MatSelectSearchComponent.prototype, \"toggleAllCheckboxChecked\", void 0);\r\n    __decorate([\r\n        Input()\r\n    ], MatSelectSearchComponent.prototype, \"toggleAllCheckboxIndeterminate\", void 0);\r\n    __decorate([\r\n        Output()\r\n    ], MatSelectSearchComponent.prototype, \"toggleAll\", void 0);\r\n    __decorate([\r\n        ViewChild('searchSelectInput', { read: ElementRef, static: true })\r\n    ], MatSelectSearchComponent.prototype, \"searchSelectInput\", void 0);\r\n    __decorate([\r\n        ViewChild('innerSelectSearch', { read: ElementRef, static: true })\r\n    ], MatSelectSearchComponent.prototype, \"innerSelectSearch\", void 0);\r\n    __decorate([\r\n        ContentChild(MatSelectSearchClearDirective, { static: false })\r\n    ], MatSelectSearchComponent.prototype, \"clearIcon\", void 0);\r\n    __decorate([\r\n        HostBinding('class.mat-select-search-inside-mat-option')\r\n    ], MatSelectSearchComponent.prototype, \"isInsideMatOption\", null);\r\n    MatSelectSearchComponent = MatSelectSearchComponent_1 = __decorate([\r\n        Component({\r\n            selector: 'ngx-mat-select-search',\r\n            template: \"<!-- Placeholder to adjust vertical offset of the mat-option elements -->\\r\\n<input matInput class=\\\"mat-select-search-input mat-select-search-hidden\\\"/>\\r\\n\\r\\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\\r\\n<div\\r\\n      #innerSelectSearch\\r\\n      class=\\\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\\\"\\r\\n      [ngClass]=\\\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\\\">\\r\\n\\r\\n  <mat-checkbox *ngIf=\\\"_isToggleAllCheckboxVisible()\\\"\\r\\n                [color]=\\\"matFormField?.color\\\"\\r\\n                class=\\\"mat-select-search-toggle-all-checkbox\\\"\\r\\n                [checked]=\\\"toggleAllCheckboxChecked\\\"\\r\\n                [indeterminate]=\\\"toggleAllCheckboxIndeterminate\\\"\\r\\n                (change)=\\\"_emitSelectAllBooleanToParent($event.checked)\\\"\\r\\n  ></mat-checkbox>\\r\\n\\r\\n  <input matInput\\r\\n         class=\\\"mat-select-search-input\\\"\\r\\n         autocomplete=\\\"off\\\"\\r\\n         [type]=\\\"type\\\"\\r\\n         [value]=\\\"value\\\"\\r\\n         #searchSelectInput\\r\\n         (keydown)=\\\"_handleKeydown($event)\\\"\\r\\n         (keyup)=\\\"_handleKeyup($event)\\\"\\r\\n         (input)=\\\"onInputChange($event.target.value)\\\"\\r\\n         (blur)=\\\"onBlur($event.target.value)\\\"\\r\\n         [placeholder]=\\\"placeholderLabel\\\"\\r\\n         [attr.aria-label]=\\\"ariaLabel\\\"\\r\\n  />\\r\\n  <mat-spinner *ngIf=\\\"searching\\\"\\r\\n          class=\\\"mat-select-search-spinner\\\"\\r\\n          diameter=\\\"16\\\"></mat-spinner>\\r\\n\\r\\n  <button mat-button\\r\\n          *ngIf=\\\"value && !searching\\\"\\r\\n          mat-icon-button\\r\\n          aria-label=\\\"Clear\\\"\\r\\n          (click)=\\\"_reset(true)\\\"\\r\\n          class=\\\"mat-select-search-clear\\\">\\r\\n    <ng-content *ngIf=\\\"clearIcon; else defaultIcon\\\" select=\\\"[ngxMatSelectSearchClear]\\\"></ng-content>\\r\\n    <ng-template #defaultIcon>\\r\\n      <mat-icon>close</mat-icon>\\r\\n    </ng-template>\\r\\n  </button>\\r\\n\\r\\n  <ng-content select=\\\".mat-select-search-custom-header-content\\\"></ng-content>\\r\\n\\r\\n</div>\\r\\n\\r\\n<div *ngIf=\\\"_noEntriesFound()\\\"\\r\\n     class=\\\"mat-select-search-no-entries-found\\\">\\r\\n  {{noEntriesFoundLabel}}\\r\\n</div>\\r\\n<!--\\r\\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\\r\\n\\r\\nUse of this source code is governed by an MIT-style license that can be\\r\\nfound in the LICENSE file at https://angular.io/license\\r\\n-->\\r\\n\",\r\n            providers: [\r\n                {\r\n                    provide: NG_VALUE_ACCESSOR,\r\n                    useExisting: forwardRef(function () { return MatSelectSearchComponent_1; }),\r\n                    multi: true\r\n                }\r\n            ],\r\n            changeDetection: ChangeDetectionStrategy.OnPush,\r\n            styles: [\".mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;box-shadow:none;border-radius:4px 4px 0 0;-webkit-transform:translate3d(0,0,0)}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}.mat-select-search-inner.mat-select-search-inner-multiple.mat-select-search-inner-toggle-all{display:flex;align-items:center}.mat-select-search-inner .mat-input-element{flex-basis:auto}.mat-select-search-inner .mat-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .mat-select-search-panel{transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 36px 16px 16px;box-sizing:border-box}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}.mat-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host.mat-select-search-inside-mat-option .mat-select-search-input{padding-top:0;padding-bottom:0;height:3em;line-height:3em}:host.mat-select-search-inside-mat-option .mat-select-search-clear{top:3px}::ng-deep .cdk-overlay-pane-select-search.cdk-overlay-pane-select-search-with-offset{margin-top:-50px}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search{position:static;padding:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-icon{margin-right:0}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search .mat-option-pseudo-checkbox{display:none}::ng-deep .mat-option[aria-disabled=true].contains-mat-select-search.mat-select-search-no-entries-found{height:6em}.mat-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}\"]\r\n        }),\r\n        __param(0, Inject(MatSelect)),\r\n        __param(3, Optional()), __param(3, Inject(MatOption)),\r\n        __param(5, Optional()), __param(5, Inject(MatFormField))\r\n    ], MatSelectSearchComponent);\r\n    return MatSelectSearchComponent;\r\n}());\n\n/**\r\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nvar MatSelectSearchVersion = '2.1.1';\r\nvar NgxMatSelectSearchModule = /** @class */ (function () {\r\n    function NgxMatSelectSearchModule() {\r\n    }\r\n    NgxMatSelectSearchModule = __decorate([\r\n        NgModule({\r\n            imports: [\r\n                CommonModule,\r\n                MatButtonModule,\r\n                MatCheckboxModule,\r\n                MatIconModule,\r\n                MatInputModule,\r\n                MatProgressSpinnerModule\r\n            ],\r\n            declarations: [\r\n                MatSelectSearchComponent,\r\n                MatSelectSearchClearDirective\r\n            ],\r\n            exports: [\r\n                MatSelectSearchComponent,\r\n                MatSelectSearchClearDirective\r\n            ]\r\n        })\r\n    ], NgxMatSelectSearchModule);\r\n    return NgxMatSelectSearchModule;\r\n}());\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MatSelectSearchComponent, MatSelectSearchVersion, NgxMatSelectSearchModule, MatSelectSearchClearDirective as ɵa };\n//# sourceMappingURL=ngx-mat-select-search.js.map\n","import { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { NgxMatSelectSearchModule } from 'ngx-mat-select-search';\r\nimport { PsSelectDataComponent } from './select-data.component';\r\nimport { PsSelectOptionTemplateDirective } from './select-option-template.directive';\r\nimport { PsSelectTriggerTemplateDirective } from './select-trigger-template.directive';\r\nimport { PsSelectComponent } from './select.component';\r\nimport { PsSelectService } from './select.service';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, MatSelectModule, MatTooltipModule, NgxMatSelectSearchModule],\r\n  declarations: [PsSelectComponent, PsSelectDataComponent, PsSelectOptionTemplateDirective, PsSelectTriggerTemplateDirective],\r\n  exports: [MatSelectModule, PsSelectComponent, PsSelectDataComponent, PsSelectOptionTemplateDirective, PsSelectTriggerTemplateDirective],\r\n  entryComponents: [],\r\n})\r\nexport class PsSelectModule {\r\n  public static forRoot(selectServiceType: any): ModuleWithProviders {\r\n    return {\r\n      ngModule: PsSelectModule,\r\n      providers: [{ provide: PsSelectService, useClass: selectServiceType }],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { PsSelectDataSource } from './select-data-source';\r\n\r\n@Injectable()\r\nexport abstract class PsSelectService {\r\n  public abstract createDataSource<T>(dataSource: any, _: AbstractControl | null): PsSelectDataSource<T>;\r\n}\r\n"],"sourceRoot":""}