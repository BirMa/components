{"version":3,"sources":["/../components/form-base/index.ts","/../components/form-base/public_api.ts","/../components/form-base/src/form-base.module.ts","/../components/form-base/src/form.service.ts","/../components/form-base/src/helpers.ts","/../components/form-field/src/dummy-mat-form-field-control.ts","/../components/form-field/src/form-field.component.ts.PsFormFieldComponent.html","/../components/form-field/src/form-field.component.ts","/../components/form-field/src/form-field.module.ts","/../components/utils/index.ts","/../components/utils/public_api.ts","/../components/utils/src/object.ts"],"names":[],"mappings":"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","file":"default~form-field-demo-form-field-demo-module-ngfactory~slider-demo-slider-demo-module-ngfactory-es2015.js","sourcesContent":["// export what ./public_api exports so we can import with the lib name like this:\r\n// import { ModuleA } from 'libname'\r\nexport * from './public_api';\r\n","export { PsFormBaseModule } from './src/form-base.module';\nexport { BasePsFormService, PsFormService } from './src/form.service';\nexport { hasRequiredField } from './src/helpers';\nexport { IPsFormError, IPsFormErrorData } from './src/models';\n","import { ModuleWithProviders, NgModule, Type } from '@angular/core';\r\nimport { PsFormService } from './form.service';\r\n\r\n@NgModule({})\r\nexport class PsFormBaseModule {\r\n  public static forRoot(formsServiceType: Type<PsFormService>): ModuleWithProviders {\r\n    return {\r\n      ngModule: PsFormBaseModule,\r\n      providers: [{ provide: PsFormService, useClass: formsServiceType }],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AbstractControl, FormArray, FormControl, FormGroup } from '@angular/forms';\r\nimport { objectToKeyValueArray } from '@prosoft/components/utils';\r\nimport { merge, Observable, of } from 'rxjs';\r\nimport { debounceTime, map, startWith, switchMap } from 'rxjs/operators';\r\nimport { getControlType } from './helpers';\r\nimport { IPsFormError, IPsFormErrorData } from './models';\r\n\r\n@Injectable()\r\nexport abstract class PsFormService {\r\n  public abstract tryDetectRequired: boolean;\r\n  public abstract getLabel(formControl: FormControl): Observable<string> | null;\r\n\r\n  /**\r\n   * Returns the type of the control. Most of the time the type is the same as the selector.\r\n   *\r\n   * @param control The control class (MatSlider, MatSelect, ...)\r\n   */\r\n  public abstract getControlType(control: any): string | null;\r\n  public abstract getControlErrors(control: FormControl): Observable<IPsFormError[]>;\r\n  public abstract getFormErrors(form: FormGroup, includeControls: boolean): Observable<IPsFormError[]>;\r\n}\r\n\r\nexport abstract class BasePsFormService extends PsFormService {\r\n  public options = {\r\n    debounceTime: 100,\r\n    includeControlsDefault: false,\r\n  };\r\n  public tryDetectRequired = true;\r\n\r\n  public getControlType = getControlType;\r\n\r\n  public getControlErrors(control: FormControl): Observable<IPsFormError[]> {\r\n    return this.getErrors(control, true, 'control');\r\n  }\r\n\r\n  public getFormErrors(form: FormGroup, includeControls: boolean | null): Observable<IPsFormError[]> {\r\n    if (includeControls == null) {\r\n      includeControls = this.options.includeControlsDefault;\r\n    }\r\n    return this.getErrors(form, includeControls, 'form');\r\n  }\r\n\r\n  /**\r\n   * Provided to be overwritten to filter the errors.\r\n   */\r\n  public filterErrors(errorData: IPsFormErrorData[], includeControls: boolean, source: 'form' | 'control'): Observable<IPsFormErrorData[]> {\r\n    return of(errorData);\r\n  }\r\n  protected abstract mapDataToError(errorData: IPsFormErrorData[]): Observable<IPsFormError[]>;\r\n\r\n  private getErrors(control: AbstractControl, includeControls: boolean, source: 'form' | 'control'): Observable<IPsFormError[]> {\r\n    const update$ = this.createUpdateTrigger(control);\r\n\r\n    return update$.pipe(\r\n      map(() => this.getErrorInfo(control, includeControls)),\r\n      switchMap(errorData => this.filterErrors(errorData, includeControls, source)),\r\n      switchMap(errorData => this.mapDataToError(errorData))\r\n    );\r\n  }\r\n\r\n  private createUpdateTrigger(control: AbstractControl): Observable<any> {\r\n    return merge(control.valueChanges, control.statusChanges).pipe(\r\n      startWith(null as any),\r\n      debounceTime(this.options.debounceTime)\r\n    );\r\n  }\r\n\r\n  private getErrorInfo(control: AbstractControl, includeControls: boolean = false): IPsFormErrorData[] {\r\n    return this.getControlErrorInfoInternal(control, '', includeControls);\r\n  }\r\n\r\n  private getControlErrorInfoInternal(control: AbstractControl, controlPath: string, includeControls: boolean): IPsFormErrorData[] {\r\n    const errors: IPsFormErrorData[] = [];\r\n\r\n    if (control instanceof FormGroup || control instanceof FormArray) {\r\n      for (const childName in control.controls) {\r\n        if (!control.controls.hasOwnProperty(childName)) {\r\n          continue;\r\n        }\r\n        const childControl = (<{ [key: string]: AbstractControl }>control.controls)[childName];\r\n        if (!(childControl instanceof FormControl) || includeControls) {\r\n          errors.push(\r\n            ...this.getControlErrorInfoInternal(childControl, controlPath ? controlPath + '.' + childName : childName, includeControls)\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (control.errors) {\r\n      errors.push(...objectToKeyValueArray(control.errors).map(error => this.createFormErrorData(error, control, controlPath)));\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  private createFormErrorData(error: { key: string; value: any }, control: AbstractControl, controlPath: string): IPsFormErrorData {\r\n    return {\r\n      controlPath: controlPath,\r\n      errorKey: error.key,\r\n      errorValue: error.value,\r\n      isControl: control instanceof FormControl,\r\n    };\r\n  }\r\n}\r\n","import { AbstractControl, FormArray, FormGroup } from '@angular/forms';\r\n\r\nexport function hasRequiredField(abstractControl: AbstractControl): boolean {\r\n  if (abstractControl.validator) {\r\n    const validator = abstractControl.validator({} as AbstractControl);\r\n    if (validator && validator.required) {\r\n      return true;\r\n    }\r\n  }\r\n  if (abstractControl instanceof FormGroup || abstractControl instanceof FormArray) {\r\n    const controls: any = abstractControl.controls; // any because of https://github.com/microsoft/TypeScript/issues/32552\r\n    for (const controlName in controls) {\r\n      if (controls[controlName]) {\r\n        if (hasRequiredField(controls[controlName])) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Returns the type of the control. Most of the time the type is the same as the selector.\r\n *\r\n * @param control The control class (MatSlider, MatSelect, ...)\r\n */\r\nexport function getControlType(control: any): string | null {\r\n  const controlId: string = control.id /* MatFormFieldControl, z.B. checkbox */ || control.name; /* mat-radio-group */\r\n  if (controlId) {\r\n    const parts = controlId.split('-');\r\n    if (parts[parts.length - 1].match(/[0-9]/)) {\r\n      parts.pop();\r\n    }\r\n    return parts.join('-');\r\n  }\r\n\r\n  if (control.step !== undefined && control.thumbLabel !== undefined) {\r\n    return 'mat-slider';\r\n  }\r\n\r\n  return null;\r\n}\r\n","import { OnDestroy } from '@angular/core';\r\nimport { AbstractControl, NgControl } from '@angular/forms';\r\nimport { MatFormFieldControl } from '@angular/material/form-field';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { startWith } from 'rxjs/operators';\r\n\r\nexport class DummyMatFormFieldControl extends MatFormFieldControl<string> implements OnDestroy {\r\n  public get required() {\r\n    return this._required;\r\n  }\r\n\r\n  public set required(req) {\r\n    this._required = !!req;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  public get disabled() {\r\n    return this._disabled;\r\n  }\r\n\r\n  public set disabled(dis) {\r\n    this._disabled = !!dis;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  public get value(): string | null {\r\n    return this._value;\r\n  }\r\n\r\n  public set value(value: string | null) {\r\n    this._value = value;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  public get empty() {\r\n    return !this.value;\r\n  }\r\n\r\n  public get shouldLabelFloat() {\r\n    return this.focused || !this.empty;\r\n  }\r\n\r\n  public stateChanges = new Subject<void>();\r\n  public placeholder: string;\r\n  public focused = false;\r\n  public errorState = false;\r\n  public controlType = 'ps-dummy';\r\n\r\n  public autofilled?: boolean;\r\n\r\n  private _value: string | null = null;\r\n  private _required = false;\r\n  private _disabled = false;\r\n  private _valueSubscription: Subscription;\r\n  private _statusSubscription: Subscription;\r\n\r\n  constructor(public ngControl: NgControl, formControl: AbstractControl) {\r\n    super();\r\n\r\n    if (formControl) {\r\n      this._valueSubscription = formControl.valueChanges.pipe(startWith(formControl.value)).subscribe(value => {\r\n        this.value = value;\r\n        this.errorState = formControl.invalid;\r\n      });\r\n      this._statusSubscription = formControl.statusChanges.pipe(startWith(formControl.status)).subscribe(() => {\r\n        this.errorState = formControl.invalid;\r\n      });\r\n    }\r\n  }\r\n\r\n  public onContainerClick(_: MouseEvent): void {}\r\n  public setDescribedByIds(_: string[]): void {}\r\n\r\n  public onChange = (_: any) => {};\r\n  public onTouched = (_: any) => {};\r\n\r\n  public ngOnDestroy() {\r\n    this.stateChanges.complete();\r\n    if (this._statusSubscription) {\r\n      this._statusSubscription.unsubscribe();\r\n    }\r\n    if (this._valueSubscription) {\r\n      this._valueSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  public writeValue(_: any) {}\r\n\r\n  public registerOnChange(_: () => void) {}\r\n\r\n  public registerOnTouched(_: any): void {}\r\n\r\n  public setDisabledState(_: boolean): void {}\r\n}\r\n","\n    <mat-form-field\n      style=\"width: 100%;\"\n      [class.mat-form-field--emulated]=\"emulated\"\n      [class.mat-form-field--no-underline]=\"noUnderline\"\n      [floatLabel]=\"floatLabel\"\n      [hintLabel]=\"visibleHint\"\n      [appearance]=\"appearance\"\n    >\n      <mat-label *ngIf=\"_labelChild\">\n        <ng-content select=\"mat-label\"></ng-content>\n      </mat-label>\n      <mat-label *ngIf=\"!_labelChild && calculatedLabel\">\n        <mat-label>{{ calculatedLabel }}</mat-label>\n      </mat-label>\n      <ng-container matPrefix *ngIf=\"_prefixChildren.length\">\n        <ng-content select=\"[matPrefix]\"></ng-content>\n      </ng-container>\n      <ng-content></ng-content>\n      <ng-container matSuffix *ngIf=\"_suffixChildren.length\">\n        <ng-content select=\"[matSuffix]\"></ng-content>\n      </ng-container>\n      <button type=\"button\" mat-icon-button matSuffix (click)=\"toggleHint($event)\" *ngIf=\"showHintToggle\">\n        <mat-icon>info_outline</mat-icon>\n      </button>\n\n      <mat-error *ngFor=\"let error of errors$ | async\">{{ error.errorText }}</mat-error>\n    </mat-form-field>\n  ","import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  HostBinding,\r\n  Input,\r\n  OnDestroy,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  InjectionToken,\r\n  Inject,\r\n  Optional,\r\n  SimpleChanges,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport { FormControl, NgControl } from '@angular/forms';\r\nimport { FloatLabelType } from '@angular/material/core';\r\nimport { MatFormField, MatFormFieldAppearance, MatFormFieldControl, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\r\nimport { hasRequiredField, IPsFormError, PsFormService } from '@prosoft/components/form-base';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { DummyMatFormFieldControl } from './dummy-mat-form-field-control';\r\n\r\nexport declare type PsFormFieldSubscriptType = 'bubble' | 'resize' | 'single-line';\r\n\r\nexport interface PsFormFieldConfig {\r\n  subscriptType?: PsFormFieldSubscriptType;\r\n  hintToggle?: boolean;\r\n}\r\n\r\nexport const PS_FORM_FIELD_CONFIG = new InjectionToken<PsFormFieldConfig>('PS_FORM_FIELD_CONFIG');\r\n\r\n@Component({\r\n  selector: 'ps-form-field',\r\n  template: `\r\n    <mat-form-field\r\n      style=\"width: 100%;\"\r\n      [class.mat-form-field--emulated]=\"emulated\"\r\n      [class.mat-form-field--no-underline]=\"noUnderline\"\r\n      [floatLabel]=\"floatLabel\"\r\n      [hintLabel]=\"visibleHint\"\r\n      [appearance]=\"appearance\"\r\n    >\r\n      <mat-label *ngIf=\"_labelChild\">\r\n        <ng-content select=\"mat-label\"></ng-content>\r\n      </mat-label>\r\n      <mat-label *ngIf=\"!_labelChild && calculatedLabel\">\r\n        <mat-label>{{ calculatedLabel }}</mat-label>\r\n      </mat-label>\r\n      <ng-container matPrefix *ngIf=\"_prefixChildren.length\">\r\n        <ng-content select=\"[matPrefix]\"></ng-content>\r\n      </ng-container>\r\n      <ng-content></ng-content>\r\n      <ng-container matSuffix *ngIf=\"_suffixChildren.length\">\r\n        <ng-content select=\"[matSuffix]\"></ng-content>\r\n      </ng-container>\r\n      <button type=\"button\" mat-icon-button matSuffix (click)=\"toggleHint($event)\" *ngIf=\"showHintToggle\">\r\n        <mat-icon>info_outline</mat-icon>\r\n      </button>\r\n\r\n      <mat-error *ngFor=\"let error of errors$ | async\">{{ error.errorText }}</mat-error>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      .mat-form-field--no-underline .mat-form-field-underline,\r\n      .mat-form-field--no-underline .mat-form-field-ripple {\r\n        background-color: transparent !important;\r\n      }\r\n\r\n      .ps-form-field-type-mat-slider mat-slider {\r\n        margin: -8px 0;\r\n        width: 100%;\r\n      }\r\n\r\n      ps-form-field .mat-form-field-invalid .mat-checkbox-frame,\r\n      ps-form-field .mat-form-field-invalid .mat-radio-outer-circle,\r\n      ps-form-field .mat-form-field-invalid .mat-slider-thumb {\r\n        border-color: var(--ps-error) !important;\r\n      }\r\n\r\n      .ps-form-field-type-mat-radio-group .mat-form-field-infix {\r\n        padding: 0.35em 0;\r\n      }\r\n      .ps-form-field-type-mat-checkbox .mat-form-field-infix {\r\n        padding: 0.25em 0;\r\n      }\r\n\r\n      .ps-form-field-type-mat-slider .mat-form-field-infix {\r\n        padding: 0;\r\n      }\r\n\r\n      /* Falls für emulated die Schrift rot sein soll:\r\n      .mat-form-field--emulated.mat-form-field-invalid .mat-form-field-wrapper {\r\n        color: var(--ps-error) !important;\r\n      }\r\n      */\r\n\r\n      /* Mehrzeilige errors/hints erlauben */\r\n      .ps-form-field--subscript-resize .mat-form-field-underline,\r\n      .ps-form-field--subscript-resize .mat-form-field-subscript-wrapper {\r\n        position: static;\r\n      }\r\n      .ps-form-field--subscript-resize .mat-form-field-wrapper {\r\n        padding-bottom: 0;\r\n      }\r\n\r\n      /* hint/error bubble container */\r\n      .ps-form-field--bubble .mat-form-field-subscript-wrapper {\r\n        padding-top: 1.25em !important;\r\n        overflow: visible;\r\n        z-index: 1;\r\n        margin-top: 0.25em;\r\n      }\r\n\r\n      /* hint/error bubble */\r\n      .ps-form-field--bubble .mat-form-field-subscript-wrapper > div {\r\n        display: block;\r\n        position: absolute;\r\n        top: 0;\r\n        max-width: 100%;\r\n        box-sizing: border-box;\r\n        bottom: 0;\r\n        overflow: hidden;\r\n        text-overflow: ellipsis;\r\n        white-space: nowrap;\r\n\r\n        background: #fff;\r\n        border: 1px solid rgba(0, 0, 0, 0.2);\r\n        border-radius: 5px;\r\n        padding: 0 8px;\r\n        box-shadow: 1px 1px 3px #ccc;\r\n      }\r\n\r\n      /* hint bubble position */\r\n      .ps-form-field--bubble .mat-form-field-subscript-wrapper > .mat-form-field-hint-wrapper {\r\n        left: auto;\r\n        right: 0;\r\n      }\r\n      /* error bubble position */\r\n      .ps-form-field--bubble .mat-form-field-subscript-wrapper > div:not(.mat-form-field-hint-wrapper) {\r\n        left: 0;\r\n        right: auto;\r\n      }\r\n\r\n      /* hint/error bubble anchor */\r\n      .ps-form-field--bubble .mat-form-field-subscript-wrapper:before {\r\n        content: '';\r\n        position: absolute;\r\n        top: -3px;\r\n        width: 6px;\r\n        height: 6px;\r\n        border-right: none;\r\n        border-bottom: none;\r\n        border-bottom-right-radius: 999px;\r\n        transform: rotate(45deg) skew(-10deg, -10deg);\r\n        z-index: 100;\r\n        border-width: 1px 0 0 1px;\r\n        border-style: solid;\r\n      }\r\n\r\n      /* hint bubble anchor position */\r\n      .ps-form-field--bubble .mat-form-field-subscript-wrapper:before {\r\n        left: auto;\r\n        right: 10px;\r\n      }\r\n      /* error bubble anchor position */\r\n      .ps-form-field--error-bubble .mat-form-field-subscript-wrapper:before {\r\n        left: 10px;\r\n        right: auto;\r\n      }\r\n\r\n      /* hint bubble colors */\r\n      .ps-form-field--bubble .mat-form-field-subscript-wrapper > div,\r\n      .ps-form-field--bubble .mat-form-field-subscript-wrapper:before {\r\n        border-color: rgba(0, 0, 0, 0.2);\r\n        background-color: #fff;\r\n      }\r\n\r\n      /* error bubble colors */\r\n      .ps-form-field--error-bubble .mat-form-field-subscript-wrapper > div,\r\n      .ps-form-field--error-bubble .mat-form-field-subscript-wrapper:before {\r\n        border-color: #f99;\r\n        background-color: #fcc;\r\n      }\r\n\r\n      .ps-form-field--bubble .mat-error {\r\n        display: inline;\r\n        color: black;\r\n      }\r\n\r\n      .ps-form-field--bubble .mat-hint {\r\n        display: inline;\r\n        color: rgba(0, 0, 0, 0.54);\r\n      }\r\n\r\n      .ps-form-field--bubble:hover .mat-form-field-subscript-wrapper > div,\r\n      .ps-form-field--bubble .mat-focused .mat-form-field-subscript-wrapper > div {\r\n        bottom: initial !important;\r\n        white-space: initial;\r\n      }\r\n\r\n      .ps-form-field--bubble:hover .mat-form-field-subscript-wrapper,\r\n      .ps-form-field--bubble .mat-focused .mat-form-field-subscript-wrapper {\r\n        z-index: 10;\r\n      }\r\n\r\n      .ps-form-field--bubble:hover .mat-error,\r\n      .ps-form-field--bubble .mat-focused .mat-error,\r\n      .ps-form-field--bubble:hover .mat-hint,\r\n      .ps-form-field--bubble .mat-focused .mat-hint {\r\n        display: block;\r\n      }\r\n    `,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PsFormFieldComponent implements OnChanges, AfterContentInit, OnDestroy {\r\n  @Input() public createLabel = true;\r\n  @Input() public floatLabel: FloatLabelType = 'auto';\r\n  @Input() public hint: string = null;\r\n  @Input() public appearance: MatFormFieldAppearance = 'legacy';\r\n  @Input() public subscriptType: PsFormFieldSubscriptType = this.defaults ? this.defaults.subscriptType : 'resize';\r\n  @Input() public hintToggle: boolean | null = null;\r\n\r\n  @ViewChild(MatFormField, { static: true }) public _matFormField: MatFormField;\r\n\r\n  /** We can get the FromControl from this */\r\n  @ContentChild(NgControl, { static: false }) public _ngControl: NgControl | null;\r\n\r\n  /** The MatFormFieldControl or null, if it is no MatFormFieldControl */\r\n  @ContentChild(MatFormFieldControl, { static: false }) public _control: MatFormFieldControl<any> | null;\r\n\r\n  /** The MatLabel, if it is set or null */\r\n  @ContentChild(MatLabel, { static: false }) public set labelChild(value: MatLabel) {\r\n    this._labelChild = value;\r\n    this.updateLabel();\r\n    if (this._matFormField) {\r\n      (<any>this._matFormField)._changeDetectorRef.markForCheck();\r\n    }\r\n  }\r\n  public _labelChild: MatLabel;\r\n\r\n  @ContentChildren(MatPrefix) public _prefixChildren: QueryList<MatPrefix>;\r\n  @ContentChildren(MatSuffix) public _suffixChildren: QueryList<MatSuffix>;\r\n\r\n  @HostBinding('class.ps-form-field--bubble') public get showBubble() {\r\n    return this.subscriptType === 'bubble' && (!!this.visibleHint || this.hasError);\r\n  }\r\n  @HostBinding('class.ps-form-field--error-bubble') public get showErrorBubble() {\r\n    return this.subscriptType === 'bubble' && this.hasError;\r\n  }\r\n  @HostBinding('class.ps-form-field--subscript-resize') public get autoResizeHintError() {\r\n    return this.subscriptType === 'resize';\r\n  }\r\n\r\n  // mat-form-field childs, that we dont support:\r\n  // @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder; // Deprecated, placeholder attribute of the form field control should be used instead!\r\n  // @ContentChildren(MatError) public _errorChildren: QueryList<MatError>; // Will be created automatically\r\n  // @ContentChildren(MatHint) public _hintChildren: QueryList<MatHint>; // No idea how to make this work...\r\n\r\n  public get hintToggleOptionActive(): boolean {\r\n    return typeof this.hintToggle === 'boolean' ? this.hintToggle : this.defaults.hintToggle;\r\n  }\r\n\r\n  public get showHintToggle(): boolean {\r\n    return !!this.hint && this.hintToggleOptionActive;\r\n  }\r\n\r\n  public get visibleHint(): string | null {\r\n    return this.showHint || !this.hintToggleOptionActive ? this.hint : null;\r\n  }\r\n\r\n  /** The error messages to show */\r\n  public errors$: Observable<IPsFormError[]> = of([]);\r\n\r\n  /** indicates if the control is no real MatFormFieldControl */\r\n  public emulated = false;\r\n\r\n  /** ide the underline for the control */\r\n  public noUnderline = false;\r\n  public showHint = false;\r\n  public calculatedLabel: string = null;\r\n\r\n  private formControl: FormControl;\r\n\r\n  /** Either the MatFormFieldControl or a DummyMatFormFieldControl */\r\n  private matFormFieldControl: MatFormFieldControl<any>;\r\n\r\n  /** The real control instance (MatSlider, MatSelect, MatCheckbox, ...) */\r\n  private realFormControl: any;\r\n\r\n  /** The control type. Most of the time this is the same as the selector */\r\n  private controlType: string;\r\n\r\n  private hasError = false;\r\n\r\n  private labelTextSubscription: Subscription;\r\n\r\n  constructor(\r\n    private _elementRef: ElementRef,\r\n    private formsService: PsFormService,\r\n    @Optional() @Inject(PS_FORM_FIELD_CONFIG) private defaults?: PsFormFieldConfig\r\n  ) {\r\n    if (!this.defaults) {\r\n      this.defaults = {\r\n        hintToggle: false,\r\n        subscriptType: 'resize',\r\n      };\r\n    }\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.hintToggle) {\r\n      this.showHint = !this.hintToggleOptionActive;\r\n    }\r\n  }\r\n\r\n  public ngAfterContentInit(): void {\r\n    this.formControl = this._ngControl && (this._ngControl.control as FormControl);\r\n    this.matFormFieldControl = this._control || new DummyMatFormFieldControl(this._ngControl, this.formControl);\r\n    this._matFormField._control = this.matFormFieldControl;\r\n    this.emulated = this.matFormFieldControl instanceof DummyMatFormFieldControl;\r\n    this.realFormControl = getRealFormControl(this._ngControl, this.matFormFieldControl);\r\n\r\n    this.controlType = this.formsService.getControlType(this.realFormControl) || 'unknown';\r\n    this._elementRef.nativeElement.classList.add(`ps-form-field-type-${this.controlType}`);\r\n\r\n    this.noUnderline = this.emulated || !!this.realFormControl.noUnderline;\r\n    if (this.floatLabel === 'auto' && (this.emulated || this.realFormControl.shouldLabelFloat === undefined)) {\r\n      this.floatLabel = 'always';\r\n    }\r\n\r\n    if (this.formControl) {\r\n      if (this.formsService.tryDetectRequired) {\r\n        (<any>this.matFormFieldControl).required = hasRequiredField(this.formControl);\r\n      }\r\n\r\n      this.errors$ = this.formsService.getControlErrors(this.formControl).pipe(\r\n        tap(errors => {\r\n          this.hasError = !!errors.length;\r\n        })\r\n      );\r\n\r\n      this.updateLabel();\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.matFormFieldControl instanceof DummyMatFormFieldControl) {\r\n      this.matFormFieldControl.ngOnDestroy();\r\n    }\r\n\r\n    if (this.labelTextSubscription) {\r\n      this.labelTextSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  public toggleHint(event: MouseEvent) {\r\n    this.showHint = !this.showHint;\r\n    event.stopPropagation();\r\n  }\r\n\r\n  private updateLabel() {\r\n    this.calculatedLabel = null;\r\n    if (!this.createLabel || this._labelChild || !this.formControl) {\r\n      return;\r\n    }\r\n\r\n    const labelText$ = this.formsService.getLabel(this.formControl);\r\n    if (!labelText$) {\r\n      return;\r\n    }\r\n\r\n    if (this.labelTextSubscription) {\r\n      this.labelTextSubscription.unsubscribe();\r\n    }\r\n    this.labelTextSubscription = labelText$.subscribe(label => {\r\n      if (this.controlType.startsWith('mat-checkbox')) {\r\n        const labelNode = this._elementRef.nativeElement.querySelectorAll('.mat-checkbox-label')[0];\r\n        if (!labelNode.innerText.trim()) {\r\n          if (labelNode.childNodes.length === 1) {\r\n            labelNode.appendChild(document.createTextNode(label));\r\n          } else {\r\n            labelNode.childNodes[1].nodeValue = label;\r\n          }\r\n        }\r\n      } else {\r\n        this.calculatedLabel = label;\r\n      }\r\n\r\n      // when only our own component is marked for check, then the label will not be shown\r\n      // when labelText$ didn't run synchronously\r\n      (<any>this._matFormField)._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n}\r\n\r\nfunction getRealFormControl(ngControl: NgControl, matFormFieldControl: MatFormFieldControl<any>): any {\r\n  if (!(matFormFieldControl instanceof DummyMatFormFieldControl) || !ngControl) {\r\n    return matFormFieldControl;\r\n  }\r\n  return ngControl.valueAccessor;\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { PsFormFieldComponent } from './form-field.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ReactiveFormsModule, MatFormFieldModule, MatIconModule, MatButtonModule],\r\n  declarations: [PsFormFieldComponent],\r\n  exports: [PsFormFieldComponent],\r\n})\r\nexport class PsFormFieldModule {}\r\n","// export what ./public_api exports so we can import with the lib name like this:\r\n// import { ModuleA } from 'libname'\r\nexport * from './public_api';\r\n","export { objectToKeyValueArray } from './src/object';\n","export function objectToKeyValueArray(errors: { [key: string]: any }): { key: string; value: any }[] {\r\n  const errorList = [];\r\n  for (const key in errors) {\r\n    if (!errors.hasOwnProperty(key)) {\r\n      continue;\r\n    }\r\n\r\n    errorList.push({\r\n      key: key,\r\n      value: errors[key],\r\n    });\r\n  }\r\n\r\n  return errorList;\r\n}\r\n"],"sourceRoot":""}