{"version":3,"sources":["/C:/workspace/prosoft-components-demo/node_modules/@angular/cdk/esm5/table.es5.js","/C:/workspace/prosoft-components-demo/node_modules/@angular/material/esm5/menu.es5.js","/C:/workspace/prosoft-components-demo/node_modules/@angular/material/esm5/sort.es5.js","/C:/workspace/prosoft-components-demo/node_modules/@angular/material/esm5/table.es5.js","/C:/workspace/prosoft-components-demo/node_modules/@angular/material/menu/typings/index.d.ts._MatMenu.html","/C:/workspace/prosoft-components-demo/node_modules/@angular/material/menu/typings/index.d.ts.MatMenuItem.html","/C:/workspace/prosoft-components-demo/node_modules/@angular/material/paginator/typings/index.d.ts.MatPaginator.html","/C:/workspace/prosoft-components-demo/node_modules/@angular/material/table/typings/index.d.ts.MatTable.html","/C:/workspace/prosoft-components-demo/node_modules/@angular/material/table/typings/index.d.ts.MatHeaderRow.html","/C:/workspace/prosoft-components-demo/node_modules/@angular/material/table/typings/index.d.ts.MatFooterRow.html","/C:/workspace/prosoft-components-demo/node_modules/@angular/material/table/typings/index.d.ts.MatRow.html","/C:/workspace/prosoft-components-demo/node_modules/@angular/material/table/typings/index.d.ts.MatTextColumn.html","/C:/workspace/prosoft-components-demo/node_modules/@angular/material/tooltip/typings/index.d.ts.TooltipComponent.html","/../components/core/index.ts","/../components/core/public_api.ts","/../components/core/src/exception-message-extractor.service.ts","/../components/flip-container/index.ts","/../components/flip-container/public_api.ts","/../components/savebar/src/savebar.module.ts","/../components/table/index.ts","/../components/table/public_api.ts","/../components/table/src/data/table-data-source.ts","/../components/table/src/directives/table.directives.ts","/../components/table/src/helper/state-manager.ts","/../components/table/src/helper/table.helper.ts","/../components/table/src/services/table-settings.service.ts","/../components/table/src/subcomponents/table-data.component.html","/../components/table/src/subcomponents/table-data.component.ts","/../components/table/src/subcomponents/table-header.component.ts.PsTableHeaderComponent.html","/../components/table/src/subcomponents/table-header.component.ts","/../components/table/src/subcomponents/table-pagination.component.ts.PsTablePaginationComponent.html","/../components/table/src/subcomponents/table-pagination.component.ts","/../components/table/src/subcomponents/table-row-detail.component.ts.TableRowDetailComponent.html","/../components/table/src/subcomponents/table-row-detail.component.ts","/../components/table/src/subcomponents/table-search.component.ts.PsTableSearchComponent.html","/../components/table/src/subcomponents/table-search.component.ts","/../components/table/src/subcomponents/table-settings.component.html","/../components/table/src/subcomponents/table-settings.component.ts","/../components/table/src/subcomponents/table-sort.component.ts.PsTableSortComponent.html","/../components/table/src/subcomponents/table-sort.component.ts","/../components/table/src/table.component.html","/../components/table/src/table.component.ts","/../components/table/src/table.module.ts","/./src/app/table-demo/table-demo.component.html","/./src/app/table-demo/table-demo.component.ts","/./src/app/table-demo/table-demo.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACkC;AAC4B;AACsP;AACjQ;AACK;AACF;AACL;AACQ;AACO;AACrB;;AAE3C;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,QAAQ,uDAAS;AACjB;AACA;AACA,4BAA4B,uBAAuB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,yBAAyB,qBAAqB,EAAE;AAChD;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,+BAA+B,mFAAqB;AACpD;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,2BAA2B,IAAI;AAClE;AACA;AACA,6CAA6C;AAC7C,SAAS,OAAO,yDAAW;AAC3B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,iCAAiC,IAAI;AACxE;AACA;AACA,mDAAmD;AACnD,SAAS,OAAO,yDAAW;AAC3B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,iCAAiC,IAAI;AACxE;AACA;AACA,mDAAmD;AACnD,SAAS,OAAO,yDAAW;AAC3B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,8BAA8B,mFAAqB;AACnD;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,iCAAiC,mEAAmE;AACpG,iBAAiB,IAAI;AACrB;AACA;AACA,gBAAgB,OAAO,mDAAK,2BAA2B;AACvD,qBAAqB,OAAO,mDAAK,wBAAwB;AACzD,gBAAgB,OAAO,0DAAY,sBAAsB,gBAAgB,IAAI;AAC7E,sBAAsB,OAAO,0DAAY,4BAA4B,gBAAgB,IAAI;AACzF,sBAAsB,OAAO,0DAAY,4BAA4B,gBAAgB,IAAI;AACzF;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB,IAAI;AACrB;AACA;AACA,gDAAgD;AAChD,SAAS,qBAAqB;AAC9B,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB,IAAI;AACrB;AACA;AACA,gDAAgD;AAChD,SAAS,qBAAqB;AAC9B,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB,IAAI;AACrB;AACA;AACA,0CAA0C;AAC1C,SAAS,qBAAqB;AAC9B,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,kDAAkD;AAClD,SAAS,OAAO,yDAAW,EAAE;AAC7B,SAAS,OAAO,6DAAe;AAC/B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,kDAAkD;AAClD,SAAS,OAAO,yDAAW,EAAE;AAC7B,SAAS,OAAO,6DAAe;AAC/B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,4CAA4C;AAC5C,SAAS,OAAO,yDAAW,EAAE;AAC7B,SAAS,OAAO,6DAAe;AAC/B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,8BAA8B,IAAI;AACrE;AACA;AACA,gDAAgD;AAChD,SAAS,OAAO,8DAAgB;AAChC,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD,2BAA2B,EAAE;AAC7B,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,cAAc,EAAE;AAC1C,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,cAAc,EAAE;AAC1C;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,uCAAuC,oBAAoB;AAC3D;AACA,2BAA2B,cAAc;AACzC,2BAA2B,EAAE;AAC7B,uCAAuC,EAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,8BAA8B,wBAAwB;AACtD;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,+BAA+B,yBAAyB;AACxD,+BAA+B,EAAE;AACjC,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,gCAAgC,EAAE;AAClC;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,eAAe,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,+DAA+D,gCAAgC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,wBAAwB,6BAA6B,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,2DAA2D,kBAAkB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,iEAAiE,iCAAiC;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,0BAA0B;AACjD,uBAAuB,EAAE;AACzB,mCAAmC,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,0BAA0B,IAAI;AACjE;AACA;AACA,gDAAgD;AAChD,SAAS,OAAO,8DAAgB,EAAE;AAClC,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,gCAAgC,IAAI;AACvE;AACA;AACA,kDAAkD;AAClD,SAAS,OAAO,8DAAgB,EAAE;AAClC,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU,gCAAgC,IAAI;AACvE;AACA;AACA,kDAAkD;AAClD,SAAS,OAAO,8DAAgB,EAAE;AAClC,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,CAAC,CAAC,6DAAe;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oDAAe,EAAE,kCAAkC;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,gBAAgB,+DAAS,4DAA4D,EAAE;AACvF,4BAA4B,EAAE;AAC9B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,0CAA0C,mFAAqB;AAC/D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,6EAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,0DAA0D,EAAE;AAC5D;AACA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA,2BAA2B,EAAE;AAC7B,uCAAuC,EAAE,mCAAmC,EAAE;AAC9E,+CAA+C,EAAE;AACjD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,sCAAsC,EAAE,mCAAmC,EAAE;AAC7E;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,uCAAuC,EAAE;AACzC;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,wBAAwB,mBAAmB,EAAE;AAC7C;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,wBAAwB,iCAAiC,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,uCAAuC,EAAE;AACzC;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,wBAAwB,mBAAmB,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,wBAAwB,iCAAiC,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,wBAAwB,iCAAiC,EAAE;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,2BAA2B,8BAA8B;AACzD,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B,wCAAwC,EAAE;AAC1C;AACA,gCAAgC,EAAE;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,8EAA8E,EAAE;AAChF;AACA,2BAA2B,EAAE;AAC7B,0CAA0C,EAAE;AAC5C;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,wBAAwB,kBAAkB,EAAE;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,6BAA6B,sCAAsC,EAAE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,YAAY,6EAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,YAAY,6EAAY;AACxB;AACA;AACA,4CAA4C,+CAAU;AACtD;AACA;AACA;AACA,yBAAyB,+CAAE;AAC3B;AACA;AACA;AACA;AACA,yDAAyD,gEAAS;AAClE,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,2BAA2B,yDAAyD,EAAE;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,2BAA2B,yDAAyD,EAAE;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC,SAAS;AACT,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,8BAA8B,yBAAyB,EAAE;AACzD,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,8BAA8B,4BAA4B,EAAE;AAC5D;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,oCAAoC;AAC3D,uBAAuB,EAAE;AACzB,uCAAuC,EAAE,iBAAiB,EAAE;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,4BAA4B,+CAA+C,EAAE;AAC7E;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,4BAA4B,8CAA8C,EAAE;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA,6DAA6D,gBAAgB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,+DAA+D,qBAAqB;AACpF,uBAAuB,EAAE;AACzB,sCAAsC,EAAE;AACxC,uBAAuB,EAAE;AACzB,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,aAAa,8CAA8C;AAC3D,aAAa,wCAAwC;AACrD,aAAa,8CAA8C;AAC3D;AACA,+CAA+C,wBAAwB;AACvE;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,wCAAwC,+CAAE;AAC1C,kBAAkB,gEAAS;AAC3B;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC;AACA;AACA;AACA;AACA,qBAAqB;AACrB,mCAAmC,+DAAiB;AACpD;AACA;AACA;AACA;AACA,qCAAqC,qEAAuB;AAC5D,iBAAiB,IAAI;AACrB;AACA;AACA,2CAA2C;AAC3C,SAAS,OAAO,6DAAe,EAAE;AACjC,SAAS,OAAO,+DAAiB,EAAE;AACnC,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,6BAA6B,OAAO,uDAAS,mBAAmB,GAAG;AAC5E,SAAS,OAAO,gEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAClE,SAAS,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC9E,SAAS,OAAO,8DAAQ;AACxB,MAAM;AACN;AACA,mBAAmB,OAAO,mDAAK,EAAE;AACjC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,iCAAiC,OAAO,mDAAK,EAAE;AAC/C,sBAAsB,OAAO,uDAAS,yBAAyB,eAAe,IAAI;AAClF,4BAA4B,OAAO,uDAAS,2BAA2B,eAAe,IAAI;AAC1F,4BAA4B,OAAO,uDAAS,2BAA2B,eAAe,IAAI;AAC1F,8BAA8B,OAAO,6DAAe,yBAAyB;AAC7E,2BAA2B,OAAO,6DAAe,sBAAsB;AACvE,iCAAiC,OAAO,6DAAe,4BAA4B;AACnF,iCAAiC,OAAO,6DAAe,4BAA4B;AACnF;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,UAAU;AACV;AACA,8BAA8B,4DAAc;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,uCAAuC,qBAAqB,EAAE,mBAAmB,EAAE;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,YAAY,+DAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC,yJAAyJ,YAAY,sGAAsG,0BAA0B;AACrS,mCAAmC,+DAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qEAAuB;AAC5D,iBAAiB,IAAI;AACrB;AACA;AACA,gDAAgD;AAChD,SAAS,+BAA+B,OAAO,sDAAQ,EAAE,GAAG;AAC5D,SAAS,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,gCAAgC;AAC1G,MAAM;AACN;AACA,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,sBAAsB,OAAO,mDAAK,EAAE;AACpC,wBAAwB,OAAO,mDAAK,EAAE;AACtC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,qBAAqB,OAAO,uDAAS,wBAAwB,eAAe,IAAI;AAChF,gBAAgB,OAAO,uDAAS,sBAAsB,eAAe,IAAI;AACzE,sBAAsB,OAAO,uDAAS,4BAA4B,eAAe,IAAI;AACrF;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB,8BAA8B,4DAAY;AAC1C;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEmb;AACnb;;;;;;;;;;;;;ACh8FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAC+F;AAC2P;AACpR;AACb;AACc;AACrC;AACiE;AACU;AAC/C;AAC2D;AACnC;AACnC;AAC0B;AACL;;AAExE;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAO;AAC1B,QAAQ,iEAAK,SAAS,iEAAK;AAC3B;AACA;AACA,SAAS;AACT,QAAQ,sEAAU,kBAAkB,iEAAK;AACzC,YAAY,iEAAK,6CAA6C,mEAAO,iBAAiB,iEAAK;AAC3F;AACA,aAAa;AACb,YAAY,mEAAO,qCAAqC,iEAAK,EAAE,wBAAwB;AACvF;AACA,QAAQ,sEAAU,cAAc,mEAAO,sBAAsB,iEAAK,EAAE,aAAa;AACjF;AACA;AACA;AACA;AACA;AACA,iBAAiB,mEAAO;AACxB;AACA;AACA,QAAQ,iEAAK,YAAY,iEAAK,EAAE,aAAa;AAC7C,QAAQ,sEAAU;AAClB,YAAY,iEAAK,EAAE,aAAa;AAChC,YAAY,mEAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA,+BAA+B,kEAAc;AAC7C;AACA;AACA;AACA,+BAA+B,mEAAe;AAC9C;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,iDAAiD;AACjD,SAAS,OAAO,yDAAW,EAAE;AAC7B,SAAS,OAAO,sEAAwB,EAAE;AAC1C,SAAS,OAAO,4DAAc,EAAE;AAChC,SAAS,OAAO,sDAAQ,EAAE;AAC1B,SAAS,OAAO,8DAAgB,EAAE;AAClC,SAAS,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI;AAC3E,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,yBAAyB,4DAAc;;AAEvC;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAAE;AACb,4BAA4B,iFAAkB,CAAC,4EAAa;AAC5D;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,8CAA8C;AAC9C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,gCAAgC,OAAO,oDAAM,SAAS,wDAAQ,IAAI,GAAG;AAC9E,SAAS,OAAO,8DAAY,EAAE;AAC9B,SAAS,gCAAgC,OAAO,oDAAM,2BAA2B,GAAG,OAAO,sDAAQ,EAAE;AACrG,MAAM;AACN;AACA,gBAAgB,OAAO,mDAAK,EAAE;AAC9B,0BAA0B,OAAO,0DAAY,gCAAgC;AAC7E,6BAA6B,OAAO,0DAAY,yBAAyB;AACzE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,UAAU;AACV;AACA,mCAAmC,4DAAc;AACjD;AACA;AACA,CAAC;AACD;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uDAAS;AACnD;AACA;AACA;AACA,gCAAgC,iDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,4CAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,wBAAwB,EAAE;AAC/C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,wBAAwB,EAAE;AAC/C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,6BAA6B,EAAE;AACpD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mCAAmC,mFAAqB;AACxD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,0BAA0B,EAAE;AACjD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,gCAAgC,mFAAqB;AACrD,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,wBAAwB,EAAE;AAC/C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,4BAA4B,2BAA2B,EAAE;AACzD;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,+BAA+B,iEAAe;AAC9C;AACA,oBAAoB;AACpB;AACA,qBAAqB,iCAAiC,EAAE;AACxD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,wDAAwD,iEAAS,+BAA+B,iEAAS;AACzG,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,0BAA0B,QAAQ,0CAAK;AACvC,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,sBAAsB,EAAE,IAAI,EAAE;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA,sBAAsB;AACtB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,iBAAiB,4DAAM;AACvB,qBAAqB,4EAAc;AACnC;AACA;AACA;AACA;AACA,iBAAiB,gEAAU;AAC3B;AACA;AACA;AACA;AACA,iBAAiB,iEAAW;AAC5B;AACA;AACA;AACA;AACA,iBAAiB,0DAAI;AACrB,iBAAiB,yDAAG;AACpB,qBAAqB,4EAAc;AACnC,gCAAgC,0DAAI;AACpC;AACA;AACA;AACA;AACA,gCAAgC,8DAAQ,gBAAgB,gEAAU;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA,sBAAsB,4DAAI;AAC1B;AACA,wBAAwB;AACxB;AACA,yBAAyB,sEAAsE,EAAE;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,sBAAsB,wCAAwC,EAAE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,8BAA8B,uBAAuB;AACrD,8BAA8B,uBAAuB;AACrD,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,kBAAkB,iEAAS;AAC3B;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,6BAA6B,mCAAmC,EAAE;AAClE;AACA,SAAS;AACT;AACA;AACA,+CAA+C;AAC/C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,gCAAgC,OAAO,oDAAM,qCAAqC;AAC3F,MAAM;AACN;AACA,qBAAqB,OAAO,6DAAe,uBAAuB,oBAAoB,IAAI;AAC1F,yBAAyB,OAAO,mDAAK,EAAE;AACvC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,uBAAuB,OAAO,uDAAS,SAAS,yDAAW,GAAG,gBAAgB,IAAI;AAClF,iBAAiB,OAAO,6DAAe,wBAAwB;AAC/D,uBAAuB,OAAO,0DAAY,0BAA0B,gBAAgB,IAAI;AACxF,0BAA0B,OAAO,mDAAK,EAAE;AACxC,uBAAuB,OAAO,mDAAK,EAAE;AACrC,sBAAsB,OAAO,mDAAK,oBAAoB;AACtD,qBAAqB,OAAO,mDAAK,EAAE;AACnC,kBAAkB,OAAO,oDAAM,EAAE;AACjC,iBAAiB,OAAO,oDAAM,EAAE;AAChC;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC;AACA,8CAA8C,gBAAgB,gBAAgB,cAAc,iCAAiC,8BAA8B,kBAAkB,UAAU,gBAAgB,6BAA6B,oBAAoB,kCAAkC,gBAAgB,mBAAmB,8BAA8B,gBAAgB,mBAAmB,eAAe,yBAAyB,sBAAsB,qBAAqB,iBAAiB,eAAe,UAAU,YAAY,wCAAwC,mBAAmB,gBAAgB,uBAAuB,cAAc,iBAAiB,YAAY,eAAe,gBAAgB,qBAAqB,eAAe,kBAAkB,iCAAiC,SAAS,yBAAyB,eAAe,yBAAyB,iBAAiB,yBAAyB,kBAAkB,sBAAsB,6BAA6B,mBAAmB,mCAAmC,iBAAiB,eAAe,kCAAkC,kGAAkG,oBAAoB,+BAA+B,mBAAmB,sCAAsC,QAAQ,SAAS,mBAAmB,2BAA2B,8DAA8D,WAAW,qBAAqB,kBAAkB,QAAQ,WAAW,2BAA2B,yCAAyC,mBAAmB,kBAAkB,gDAAgD,WAAW,UAAU,2CAA2C,qBAAqB,WAAW,gCAAgC,MAAM,OAAO,QAAQ,SAAS,kBAAkB,oBAAoB;AACxyD,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,gDAAgD;AACzE,yBAAyB;AACzB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,2CAA2C;AAC3C,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,oDAAM,EAAE;AACxB,SAAS,gCAAgC,OAAO,oDAAM,qCAAqC;AAC3F,MAAM;AACN;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,UAAU;AACV;AACA,mCAAmC,4DAAc;AACjD;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,8CAA8C,EAAE;AACjE;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,WAAW,6DAAO;AAClB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,kCAAkC,8FAA+B,EAAE,gBAAgB;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,iDAAY;AACvD,kCAAkC,iDAAY;AAC9C,sCAAsC,iDAAY;AAClD;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,kCAAkC,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,kBAAkB,EAAE;AACzC;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,mBAAmB,EAAE;AAC1C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,sCAAsC,EAAE;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,0BAA0B,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAAM;AAChC,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,kCAAkC,iCAAiC,EAAE,IAAI,4DAAI;AAC7E;AACA,gBAAgB,iEAAS;AACzB;AACA;AACA,gCAAgC;AAChC;AACA,iCAAiC,oBAAoB,EAAE,iCAAiC,EAAE;AAC1F;AACA;AACA,gCAAgC;AAChC;AACA,iCAAiC,2BAA2B,EAAE;AAC9D,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,mDAAmD,EAAE;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA,mBAAmB,mEAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,4BAA4B,EAAE;AAC9B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,+FAA+F;AAC5G,aAAa,+GAA+G;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mCAAmC,EAAE;AACrC,mBAAmB,EAAE;AACrB,sCAAsC,EAAE;AACxC,mBAAmB,EAAE;AACrB,uEAAuE,+CAAE;AACzE,mBAAmB,EAAE;AACrB,wEAAwE,8DAAM;AAC9E,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,2BAA2B,2CAA2C,EAAE,IAAI,8DAAM;AAClF,oBAAoB;AACpB;AACA,qBAAqB,wBAAwB,EAAE,MAAM,+CAAE;AACvD,eAAe,kDAAK;AACpB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,aAAa,yFAA+B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,oDAAoD,iEAAW;AAC/D,yBAAyB,gEAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,8DAAM;AACxB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,2BAA2B,+DAA+D,EAAE,IAAI,6DAAK,IAAI,kDAAa;AACtH;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4DAAI,KAAK,6DAAK,IAAI,kDAAa,GAAG,iEAAS;AACrE;AACA,4BAA4B;AAC5B;AACA,6BAA6B,yBAAyB,EAAE;AACxD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kEAAc;AAC7C;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,iDAAiD;AACjD,SAAS,OAAO,6DAAO,EAAE;AACzB,SAAS,OAAO,wDAAU,EAAE;AAC5B,SAAS,OAAO,8DAAgB,EAAE;AAClC,SAAS,gCAAgC,OAAO,oDAAM,qCAAqC,GAAG;AAC9F,SAAS,8BAA8B,OAAO,sDAAQ,EAAE,GAAG;AAC3D,SAAS,kCAAkC,OAAO,sDAAQ,EAAE,GAAG,OAAO,kDAAI,EAAE,GAAG;AAC/E,SAAS,OAAO,iEAAc,gBAAgB,OAAO,sDAAQ,EAAE,GAAG;AAClE,SAAS,OAAO,8DAAY;AAC5B,MAAM;AACN;AACA,wCAAwC,OAAO,mDAAK,mCAAmC;AACvF,gBAAgB,OAAO,mDAAK,gCAAgC;AAC5D,oBAAoB,OAAO,mDAAK,iCAAiC;AACjE,wBAAwB,OAAO,mDAAK,yCAAyC;AAC7E,sBAAsB,OAAO,oDAAM,EAAE;AACrC,sBAAsB,OAAO,oDAAM,EAAE;AACrC,sBAAsB,OAAO,oDAAM,EAAE;AACrC,uBAAuB,OAAO,oDAAM,EAAE;AACtC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB,8DAA8D,sEAAe;AAC7E;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA,wBAAwB,4DAAY;AACpC,wBAAwB,sEAAe;AACvC,wBAAwB,sEAAe;AACvC,wBAAwB,mEAAa;AACrC;AACA;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAE2X;AAC3X;;;;;;;;;;;;;ACn+DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACkC;AAC4B;AACoK;AACpH;AACxE;AAC2E;AAClE;;AAE/C;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAAE;AACb,wBAAwB,+EAAgB,CAAC,4EAAa;AACtD;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,4CAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,wBAAwB,EAAE;AAC/C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,gBAAgB,+DAAS;AACzB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,2BAA2B,EAAE;AAClD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,sBAAsB,sBAAsB,mFAAqB,IAAI,EAAE;AACvE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iDAAiD;AAC/E;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,kBAAkB,OAAO,mDAAK,4BAA4B;AAC1D,iBAAiB,OAAO,mDAAK,2BAA2B;AACxD,qBAAqB,OAAO,mDAAK,+BAA+B;AAChE,wBAAwB,OAAO,mDAAK,kCAAkC;AACtE,sBAAsB,OAAO,oDAAM,4BAA4B;AAC/D;AACA;AACA,CAAC;AACD;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA,WAAW,EAAE;AACb,gCAAgC,yEAAkB;AAClD,IAAI,sEAAe;AACnB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,eAAe,mEAAO;AACtB,QAAQ,iEAAK,oBAAoB,iEAAK,EAAE,+BAA+B;AACvE;AACA,QAAQ,iEAAK,sBAAsB,iEAAK,EAAE,gCAAgC;AAC1E,QAAQ,sEAAU,+BAA+B,mEAAO;AACxD;AACA;AACA;AACA;AACA,iBAAiB,mEAAO;AACxB,QAAQ,iEAAK,oBAAoB,iEAAK,EAAE,8BAA8B;AACtE,QAAQ,iEAAK,sBAAsB,iEAAK,EAAE,6BAA6B;AACvE,QAAQ,sEAAU,+BAA+B,mEAAO;AACxD;AACA;AACA;AACA;AACA,kBAAkB,mEAAO;AACzB,QAAQ,iEAAK,oBAAoB,iEAAK,EAAE,6BAA6B;AACrE,QAAQ,iEAAK,sBAAsB,iEAAK,EAAE,8BAA8B;AACxE,QAAQ,sEAAU,+BAA+B,mEAAO;AACxD;AACA;AACA;AACA;AACA,kBAAkB,mEAAO;AACzB,QAAQ,iEAAK,0CAA0C,iEAAK,EAAE,aAAa;AAC3E,QAAQ,iEAAK,oCAAoC,iEAAK,EAAE,eAAe;AACvE,QAAQ,iEAAK,8EAA8E,iEAAK,EAAE,aAAa;AAC/G;AACA,QAAQ,sEAAU,2DAA2D,mEAAO;AACpF,QAAQ,sEAAU,YAAY,mEAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mEAAO;AAC1B;AACA,QAAQ,sEAAU,2CAA2C,mEAAO,4BAA4B,qEAAS;AACzG,YAAY,iEAAK,EAAE,gCAAgC;AACnD,YAAY,iEAAK,EAAE,6BAA6B;AAChD;AACA;AACA,QAAQ,sEAAU,2CAA2C,mEAAO,4BAA4B,qEAAS;AACzG,YAAY,iEAAK,EAAE,6BAA6B;AAChD,YAAY,iEAAK,EAAE,+BAA+B;AAClD;AACA;AACA,QAAQ,sEAAU,yCAAyC,mEAAO,4BAA4B,qEAAS;AACvG,YAAY,iEAAK,EAAE,+BAA+B;AAClD,YAAY,iEAAK,EAAE,6BAA6B;AAChD;AACA;AACA,QAAQ,sEAAU,yCAAyC,mEAAO,4BAA4B,qEAAS;AACvG,YAAY,iEAAK,EAAE,6BAA6B;AAChD,YAAY,iEAAK,EAAE,gCAAgC;AACnD;AACA,QAAQ,iEAAK,2EAA2E,iEAAK,EAAE,6BAA6B;AAC5H,QAAQ,iEAAK,uCAAuC,iEAAK,EAAE,gCAAgC;AAC3F,QAAQ,iEAAK,oCAAoC,iEAAK,EAAE,+BAA+B;AACvF;AACA;AACA;AACA;AACA,mBAAmB,mEAAO;AAC1B,QAAQ,sEAAU;AAClB,YAAY,iEAAK,OAAO,wEAAY,KAAK,iBAAiB;AAC1D;AACA;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4CAAO;AAClC;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS,OAAO,wDAAU,UAAU,qBAAqB,IAAI;AAC7D;AACA,2DAA2D,wEAAkB,EAAE,gDAAgD,gCAAgC,EAAE,gDAAgD;AACjN;AACA,CAAC;AACD;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,gBAAgB,sDAAQ,QAAQ,sDAAQ;AACxC;AACA;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,EAAE;AACb,8BAA8B,4EAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,kDAAK;AAC3C;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,sDAAsD;AAC1G;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,2BAA2B,EAAE;AAClD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,sBAAsB,sBAAsB,mFAAqB,IAAI,EAAE;AACvE;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,8DAA8D;AACzG;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,mDAAmD;AACtG;AACA;AACA,mDAAmD,mDAAmD;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,aAAa,qDAAqD;AAClE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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AAC,CAAC,gEAAa;AACf;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB,IAAI;AACrB;AACA;AACA,gDAAgD;AAChD,SAAS,OAAO,+DAAY,EAAE;AAC9B,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,CAAC,CAAC,gEAAa;AACf;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB,IAAI;AACrB;AACA;AACA,0CAA0C;AAC1C,SAAS,OAAO,+DAAY,EAAE;AAC9B,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,CAAC,CAAC,0DAAO;;AAET;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iCAAiC,UAAU,kEAAe,gCAAgC;AAC1F;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC,CAAC,kEAAe;AACjB;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iCAAiC,UAAU,kEAAe,gCAAgC;AAC1F;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC,CAAC,kEAAe;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,iCAAiC,UAAU,4DAAS,0BAA0B;AAC9E;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC,CAAC,4DAAS;AACX;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC,8BAA8B,mEAAgB;AAC9C;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD;AACA,iCAAiC,UAAU,+DAAY,6BAA6B;AACpF,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC,CAAC,+DAAY;AACd;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC,8BAA8B,mEAAgB;AAC9C;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD;AACA,iCAAiC,UAAU,+DAAY,6BAA6B;AACpF,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC,CAAC,+DAAY;AACd;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC,8BAA8B,mEAAgB;AAC9C;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qCAAqC,qEAAuB;AAC5D,mCAAmC,+DAAiB;AACpD;AACA,iCAAiC,UAAU,yDAAM,uBAAuB;AACxE,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC,CAAC,yDAAM;;AAER;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS,UAAU;AACnC,yJAAyJ,YAAY,sGAAsG,0BAA0B;AACrS,mCAAmC,+DAAiB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,qEAAuB;AAC5D,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC,CAAC,gEAAa;;AAEf;AACA;AACA,cAAc,uFAAuF;AACrG;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB;AACA,wBAAwB,iEAAc;AACtC,wBAAwB,4DAAY;AACpC,wBAAwB,sEAAe;AACvC;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,uDAAS;AACb;AACA,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA;AACA,gCAAgC,oDAAe;AAC/C;AACA;AACA;AACA,4BAA4B,oDAAe;AAC3C;AACA;AACA;AACA,yCAAyC,4CAAO;AAChD;AACA;AACA;AACA;AACA,2CAA2C,iDAAY;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB,qCAAqC,EAAE;AACvC,gBAAgB,4EAAc;AAC9B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,oEAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,EAAE;AACpD,aAAa;AACb;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,SAAS;AACT,0BAA0B,oDAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,yBAAyB,EAAE;AAChD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,uBAAuB,EAAE;AAClD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,2BAA2B,EAAE;AAClD;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,2BAA2B,2BAA2B,EAAE;AACxD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,mBAAmB,EAAE;AAC1C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,wBAAwB,EAAE;AAC/C;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,wBAAwB,EAAE,KAAK,kDAAK;AACpC,YAAY,+CAAE;AACd,mBAAmB,EAAE;AACrB;AACA,wBAAwB,EAAE,KAAK,kDAAK;AACpC,YAAY,+CAAE;AACd,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB,2BAA2B,0DAAa;AACxC,kBAAkB,0DAAG;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,0BAA0B,0DAAa;AACvC,kBAAkB,0DAAG;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,EAAE;AACrB,4BAA4B,0DAAa;AACzC,kBAAkB,0DAAG;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,yBAAyB,qCAAqC,EAAE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA,4BAA4B,iDAAiD,EAAE;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACj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","file":"table-demo-table-demo-module-ngfactory-es5.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ContentChild, Directive, ElementRef, Input, TemplateRef, ChangeDetectionStrategy, Component, IterableDiffers, ViewContainerRef, ViewEncapsulation, Attribute, ChangeDetectorRef, ContentChildren, EmbeddedViewRef, Inject, isDevMode, Optional, ViewChild, InjectionToken, NgModule } from '@angular/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { isDataSource } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport { Platform } from '@angular/cdk/platform';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * \\@docs-private\n * @template T\n * @param {?} base\n * @return {?}\n */\nfunction mixinHasStickyInput(base) {\n    return /** @class */ (function (_super) {\n        __extends(class_1, _super);\n        function class_1() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var _this = _super.apply(this, args) || this;\n            _this._sticky = false;\n            /**\n             * Whether the sticky input has changed since it was last checked.\n             */\n            _this._hasStickyChanged = false;\n            return _this;\n        }\n        Object.defineProperty(class_1.prototype, \"sticky\", {\n            /** Whether sticky positioning should be applied. */\n            get: /**\n             * Whether sticky positioning should be applied.\n             * @return {?}\n             */\n            function () { return this._sticky; },\n            set: /**\n             * @param {?} v\n             * @return {?}\n             */\n            function (v) {\n                /** @type {?} */\n                var prevValue = this._sticky;\n                this._sticky = coerceBooleanProperty(v);\n                this._hasStickyChanged = prevValue !== this._sticky;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** Whether the sticky value has changed since this was last called. */\n        /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        class_1.prototype.hasStickyChanged = /**\n         * Whether the sticky value has changed since this was last called.\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        };\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        class_1.prototype.resetStickyChanged = /**\n         * Resets the dirty check for cases where the sticky state has been used without checking.\n         * @return {?}\n         */\n        function () {\n            this._hasStickyChanged = false;\n        };\n        return class_1;\n    }(base));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nvar CdkCellDef = /** @class */ (function () {\n    function CdkCellDef(/** @docs-private */ template) {\n        this.template = template;\n    }\n    CdkCellDef.decorators = [\n        { type: Directive, args: [{ selector: '[cdkCellDef]' },] },\n    ];\n    /** @nocollapse */\n    CdkCellDef.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return CdkCellDef;\n}());\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nvar CdkHeaderCellDef = /** @class */ (function () {\n    function CdkHeaderCellDef(/** @docs-private */ template) {\n        this.template = template;\n    }\n    CdkHeaderCellDef.decorators = [\n        { type: Directive, args: [{ selector: '[cdkHeaderCellDef]' },] },\n    ];\n    /** @nocollapse */\n    CdkHeaderCellDef.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return CdkHeaderCellDef;\n}());\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nvar CdkFooterCellDef = /** @class */ (function () {\n    function CdkFooterCellDef(/** @docs-private */ template) {\n        this.template = template;\n    }\n    CdkFooterCellDef.decorators = [\n        { type: Directive, args: [{ selector: '[cdkFooterCellDef]' },] },\n    ];\n    /** @nocollapse */\n    CdkFooterCellDef.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return CdkFooterCellDef;\n}());\n// Boilerplate for applying mixins to CdkColumnDef.\n/**\n * \\@docs-private\n */\nvar \n// Boilerplate for applying mixins to CdkColumnDef.\n/**\n * \\@docs-private\n */\nCdkColumnDefBase = /** @class */ (function () {\n    function CdkColumnDefBase() {\n    }\n    return CdkColumnDefBase;\n}());\n/** @type {?} */\nvar _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nvar CdkColumnDef = /** @class */ (function (_super) {\n    __extends(CdkColumnDef, _super);\n    function CdkColumnDef() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._stickyEnd = false;\n        return _this;\n    }\n    Object.defineProperty(CdkColumnDef.prototype, \"name\", {\n        /** Unique name for this column. */\n        get: /**\n         * Unique name for this column.\n         * @return {?}\n         */\n        function () {\n            return this._name;\n        },\n        set: /**\n         * @param {?} name\n         * @return {?}\n         */\n        function (name) {\n            // If the directive is set without a name (updated programatically), then this setter will\n            // trigger with an empty string and should not overwrite the programatically set value.\n            if (!name) {\n                return;\n            }\n            this._name = name;\n            this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkColumnDef.prototype, \"stickyEnd\", {\n        /**\n         * Whether this column should be sticky positioned on the end of the row. Should make sure\n         * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n         * has been changed.\n         */\n        get: /**\n         * Whether this column should be sticky positioned on the end of the row. Should make sure\n         * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n         * has been changed.\n         * @return {?}\n         */\n        function () {\n            return this._stickyEnd;\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            /** @type {?} */\n            var prevValue = this._stickyEnd;\n            this._stickyEnd = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._stickyEnd;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CdkColumnDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkColumnDef]',\n                    inputs: ['sticky'],\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                },] },\n    ];\n    CdkColumnDef.propDecorators = {\n        name: [{ type: Input, args: ['cdkColumnDef',] }],\n        stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\n        cell: [{ type: ContentChild, args: [CdkCellDef, { static: false },] }],\n        headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef, { static: false },] }],\n        footerCell: [{ type: ContentChild, args: [CdkFooterCellDef, { static: false },] }]\n    };\n    return CdkColumnDef;\n}(_CdkColumnDefBase));\n/**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nvar  /**\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\n */\nBaseCdkCell = /** @class */ (function () {\n    function BaseCdkCell(columnDef, elementRef) {\n        /** @type {?} */\n        var columnClassName = \"cdk-column-\" + columnDef.cssClassFriendlyName;\n        elementRef.nativeElement.classList.add(columnClassName);\n    }\n    return BaseCdkCell;\n}());\n/**\n * Header cell template container that adds the right classes and role.\n */\nvar CdkHeaderCell = /** @class */ (function (_super) {\n    __extends(CdkHeaderCell, _super);\n    function CdkHeaderCell(columnDef, elementRef) {\n        return _super.call(this, columnDef, elementRef) || this;\n    }\n    CdkHeaderCell.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    CdkHeaderCell.ctorParameters = function () { return [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ]; };\n    return CdkHeaderCell;\n}(BaseCdkCell));\n/**\n * Footer cell template container that adds the right classes and role.\n */\nvar CdkFooterCell = /** @class */ (function (_super) {\n    __extends(CdkFooterCell, _super);\n    function CdkFooterCell(columnDef, elementRef) {\n        return _super.call(this, columnDef, elementRef) || this;\n    }\n    CdkFooterCell.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                        'role': 'gridcell',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    CdkFooterCell.ctorParameters = function () { return [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ]; };\n    return CdkFooterCell;\n}(BaseCdkCell));\n/**\n * Cell template container that adds the right classes and role.\n */\nvar CdkCell = /** @class */ (function (_super) {\n    __extends(CdkCell, _super);\n    function CdkCell(columnDef, elementRef) {\n        return _super.call(this, columnDef, elementRef) || this;\n    }\n    CdkCell.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                        'role': 'gridcell',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    CdkCell.ctorParameters = function () { return [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ]; };\n    return CdkCell;\n}(BaseCdkCell));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @type {?}\n */\nvar CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nvar  /**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n * @abstract\n */\nBaseRowDef = /** @class */ (function () {\n    function BaseRowDef(template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    BaseRowDef.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            /** @type {?} */\n            var columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    };\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    BaseRowDef.prototype.getColumnsDiff = /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     * @return {?}\n     */\n    function () {\n        return this._columnsDiffer.diff(this.columns);\n    };\n    /** Gets this row def's relevant cell template from the provided column def. */\n    /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    BaseRowDef.prototype.extractCellTemplate = /**\n     * Gets this row def's relevant cell template from the provided column def.\n     * @param {?} column\n     * @return {?}\n     */\n    function (column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    };\n    return BaseRowDef;\n}());\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/**\n * \\@docs-private\n */\nvar \n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/**\n * \\@docs-private\n */\nCdkHeaderRowDefBase = /** @class */ (function (_super) {\n    __extends(CdkHeaderRowDefBase, _super);\n    function CdkHeaderRowDefBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return CdkHeaderRowDefBase;\n}(BaseRowDef));\n/** @type {?} */\nvar _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nvar CdkHeaderRowDef = /** @class */ (function (_super) {\n    __extends(CdkHeaderRowDef, _super);\n    function CdkHeaderRowDef(template, _differs) {\n        return _super.call(this, template, _differs) || this;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    CdkHeaderRowDef.prototype.ngOnChanges = \n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        _super.prototype.ngOnChanges.call(this, changes);\n    };\n    CdkHeaderRowDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n                },] },\n    ];\n    /** @nocollapse */\n    CdkHeaderRowDef.ctorParameters = function () { return [\n        { type: TemplateRef },\n        { type: IterableDiffers }\n    ]; };\n    return CdkHeaderRowDef;\n}(_CdkHeaderRowDefBase));\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/**\n * \\@docs-private\n */\nvar \n// Boilerplate for applying mixins to CdkFooterRowDef.\n/**\n * \\@docs-private\n */\nCdkFooterRowDefBase = /** @class */ (function (_super) {\n    __extends(CdkFooterRowDefBase, _super);\n    function CdkFooterRowDefBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return CdkFooterRowDefBase;\n}(BaseRowDef));\n/** @type {?} */\nvar _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nvar CdkFooterRowDef = /** @class */ (function (_super) {\n    __extends(CdkFooterRowDef, _super);\n    function CdkFooterRowDef(template, _differs) {\n        return _super.call(this, template, _differs) || this;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    CdkFooterRowDef.prototype.ngOnChanges = \n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        _super.prototype.ngOnChanges.call(this, changes);\n    };\n    CdkFooterRowDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n                },] },\n    ];\n    /** @nocollapse */\n    CdkFooterRowDef.ctorParameters = function () { return [\n        { type: TemplateRef },\n        { type: IterableDiffers }\n    ]; };\n    return CdkFooterRowDef;\n}(_CdkFooterRowDefBase));\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nvar CdkRowDef = /** @class */ (function (_super) {\n    __extends(CdkRowDef, _super);\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    function CdkRowDef(template, _differs) {\n        return _super.call(this, template, _differs) || this;\n    }\n    CdkRowDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n                },] },\n    ];\n    /** @nocollapse */\n    CdkRowDef.ctorParameters = function () { return [\n        { type: TemplateRef },\n        { type: IterableDiffers }\n    ]; };\n    return CdkRowDef;\n}(BaseRowDef));\n/**\n * Outlet for rendering cells inside of a row or header row.\n * \\@docs-private\n */\nvar CdkCellOutlet = /** @class */ (function () {\n    function CdkCellOutlet(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    /**\n     * @return {?}\n     */\n    CdkCellOutlet.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    };\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    CdkCellOutlet.mostRecentCellOutlet = null;\n    CdkCellOutlet.decorators = [\n        { type: Directive, args: [{ selector: '[cdkCellOutlet]' },] },\n    ];\n    /** @nocollapse */\n    CdkCellOutlet.ctorParameters = function () { return [\n        { type: ViewContainerRef }\n    ]; };\n    return CdkCellOutlet;\n}());\n/**\n * Header template container that contains the cell outlet. Adds the right class and role.\n */\nvar CdkHeaderRow = /** @class */ (function () {\n    function CdkHeaderRow() {\n    }\n    CdkHeaderRow.decorators = [\n        { type: Component, args: [{selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    return CdkHeaderRow;\n}());\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nvar CdkFooterRow = /** @class */ (function () {\n    function CdkFooterRow() {\n    }\n    CdkFooterRow.decorators = [\n        { type: Component, args: [{selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    return CdkFooterRow;\n}());\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nvar CdkRow = /** @class */ (function () {\n    function CdkRow() {\n    }\n    CdkRow.decorators = [\n        { type: Component, args: [{selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                },] },\n    ];\n    return CdkRow;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * \\@docs-private\n * @type {?}\n */\nvar STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nvar  /**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * \\@docs-private\n */\nStickyStyler = /** @class */ (function () {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     */\n    function StickyStyler(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser) {\n        if (_isBrowser === void 0) { _isBrowser = true; }\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._isBrowser = _isBrowser;\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    StickyStyler.prototype.clearStickyPositioning = /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\n     * @return {?}\n     */\n    function (rows, stickyDirections) {\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\n            var row = rows_1[_i];\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            this._removeStickyStyle(row, stickyDirections);\n            for (var i = 0; i < row.children.length; i++) {\n                /** @type {?} */\n                var cell = (/** @type {?} */ (row.children[i]));\n                this._removeStickyStyle(cell, stickyDirections);\n            }\n        }\n    };\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     */\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    StickyStyler.prototype.updateStickyColumns = /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @return {?}\n     */\n    function (rows, stickyStartStates, stickyEndStates) {\n        /** @type {?} */\n        var hasStickyColumns = stickyStartStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        function (state) { return state; })) || stickyEndStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        function (state) { return state; }));\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\n            return;\n        }\n        /** @type {?} */\n        var firstRow = rows[0];\n        /** @type {?} */\n        var numCells = firstRow.children.length;\n        /** @type {?} */\n        var cellWidths = this._getCellWidths(firstRow);\n        /** @type {?} */\n        var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        /** @type {?} */\n        var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        /** @type {?} */\n        var isRtl = this.direction === 'rtl';\n        for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\n            var row = rows_2[_i];\n            for (var i = 0; i < numCells; i++) {\n                /** @type {?} */\n                var cell = (/** @type {?} */ (row.children[i]));\n                if (stickyStartStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\n                }\n                if (stickyEndStates[i]) {\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\n                }\n            }\n        }\n    };\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    StickyStyler.prototype.stickRows = /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param {?} position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     * @return {?}\n     */\n    function (rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on.\n        /** @type {?} */\n        var rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\n        /** @type {?} */\n        var stickyHeight = 0;\n        for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n            if (!stickyStates[rowIndex]) {\n                continue;\n            }\n            /** @type {?} */\n            var row = rows[rowIndex];\n            if (this._isNativeHtmlTable) {\n                for (var j = 0; j < row.children.length; j++) {\n                    /** @type {?} */\n                    var cell = (/** @type {?} */ (row.children[j]));\n                    this._addStickyStyle(cell, position, stickyHeight);\n                }\n            }\n            else {\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\n                this._addStickyStyle(row, position, stickyHeight);\n            }\n            if (rowIndex === rows.length - 1) {\n                // prevent unnecessary reflow from getBoundingClientRect()\n                return;\n            }\n            stickyHeight += row.getBoundingClientRect().height;\n        }\n    };\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    StickyStyler.prototype.updateStickyFooterContainer = /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     * @param {?} tableElement\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    function (tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        /** @type {?} */\n        var tfoot = (/** @type {?} */ (tableElement.querySelector('tfoot')));\n        if (stickyStates.some((/**\n         * @param {?} state\n         * @return {?}\n         */\n        function (state) { return !state; }))) {\n            this._removeStickyStyle(tfoot, ['bottom']);\n        }\n        else {\n            this._addStickyStyle(tfoot, 'bottom', 0);\n        }\n    };\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    StickyStyler.prototype._removeStickyStyle = /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     * @param {?} element\n     * @param {?} stickyDirections\n     * @return {?}\n     */\n    function (element, stickyDirections) {\n        for (var _i = 0, stickyDirections_1 = stickyDirections; _i < stickyDirections_1.length; _i++) {\n            var dir = stickyDirections_1[_i];\n            element.style[dir] = '';\n        }\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        /** @type {?} */\n        var hasDirection = STICKY_DIRECTIONS.some((/**\n         * @param {?} dir\n         * @return {?}\n         */\n        function (dir) { return !!element.style[dir]; }));\n        if (!hasDirection) {\n            element.style.position = '';\n            element.classList.remove(this._stickCellCss);\n        }\n    };\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    StickyStyler.prototype._addStickyStyle = /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     * @param {?} element\n     * @param {?} dir\n     * @param {?} dirValue\n     * @return {?}\n     */\n    function (element, dir, dirValue) {\n        element.classList.add(this._stickCellCss);\n        element.style[dir] = dirValue + \"px\";\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        element.style.zIndex = this._getCalculatedZIndex(element);\n    };\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    StickyStyler.prototype._getCalculatedZIndex = /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        /** @type {?} */\n        var zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        /** @type {?} */\n        var zIndex = 0;\n        for (var _i = 0, STICKY_DIRECTIONS_1 = STICKY_DIRECTIONS; _i < STICKY_DIRECTIONS_1.length; _i++) {\n            var dir = STICKY_DIRECTIONS_1[_i];\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? \"\" + zIndex : '';\n    };\n    /** Gets the widths for each cell in the provided row. */\n    /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    StickyStyler.prototype._getCellWidths = /**\n     * Gets the widths for each cell in the provided row.\n     * @param {?} row\n     * @return {?}\n     */\n    function (row) {\n        /** @type {?} */\n        var cellWidths = [];\n        /** @type {?} */\n        var firstRowCells = row.children;\n        for (var i = 0; i < firstRowCells.length; i++) {\n            /** @type {?} */\n            var cell = (/** @type {?} */ (firstRowCells[i]));\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        return cellWidths;\n    };\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    StickyStyler.prototype._getStickyStartColumnPositions = /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    function (widths, stickyStates) {\n        /** @type {?} */\n        var positions = [];\n        /** @type {?} */\n        var nextPosition = 0;\n        for (var i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    };\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    StickyStyler.prototype._getStickyEndColumnPositions = /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     * @param {?} widths\n     * @param {?} stickyStates\n     * @return {?}\n     */\n    function (widths, stickyStates) {\n        /** @type {?} */\n        var positions = [];\n        /** @type {?} */\n        var nextPosition = 0;\n        for (var i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    };\n    return StickyStyler;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an error to be thrown when attempting to find an unexisting column.\n * \\@docs-private\n * @param {?} id Id whose lookup failed.\n * @return {?}\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(\"Could not find column with id \\\"\" + id + \"\\\".\");\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * \\@docs-private\n * @param {?} name\n * @return {?}\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(\"Duplicate column definition name provided: \\\"\" + name + \"\\\".\");\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * \\@docs-private\n * @param {?} data\n * @return {?}\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(\"Could not find a matching row definition for the\" +\n        (\"provided row data: \" + JSON.stringify(data)));\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(\"Provided data source did not match an array, Observable, or DataSource\");\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(\"Text column could not find a parent table for registration.\");\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * \\@docs-private\n * @return {?}\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(\"Table text column must have a name.\");\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * \\@docs-private\n */\nvar DataRowOutlet = /** @class */ (function () {\n    function DataRowOutlet(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n    DataRowOutlet.decorators = [\n        { type: Directive, args: [{ selector: '[rowOutlet]' },] },\n    ];\n    /** @nocollapse */\n    DataRowOutlet.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: ElementRef }\n    ]; };\n    return DataRowOutlet;\n}());\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * \\@docs-private\n */\nvar HeaderRowOutlet = /** @class */ (function () {\n    function HeaderRowOutlet(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n    HeaderRowOutlet.decorators = [\n        { type: Directive, args: [{ selector: '[headerRowOutlet]' },] },\n    ];\n    /** @nocollapse */\n    HeaderRowOutlet.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: ElementRef }\n    ]; };\n    return HeaderRowOutlet;\n}());\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * \\@docs-private\n */\nvar FooterRowOutlet = /** @class */ (function () {\n    function FooterRowOutlet(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n    FooterRowOutlet.decorators = [\n        { type: Directive, args: [{ selector: '[footerRowOutlet]' },] },\n    ];\n    /** @nocollapse */\n    FooterRowOutlet.ctorParameters = function () { return [\n        { type: ViewContainerRef },\n        { type: ElementRef }\n    ]; };\n    return FooterRowOutlet;\n}());\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * \\@docs-private\n * @type {?}\n */\nvar CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n\"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\";\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * \\@docs-private\n * @abstract\n * @template T\n */\nvar /**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * \\@docs-private\n * @abstract\n * @template T\n */\nRowViewRef = /** @class */ (function (_super) {\n    __extends(RowViewRef, _super);\n    function RowViewRef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return RowViewRef;\n}(EmbeddedViewRef));\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n * @template T\n */\nvar CdkTable = /** @class */ (function () {\n    function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *it's* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *it's* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *it's* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *it's* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        this._multiTemplateDataRows = false;\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * \\@docs-private\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    Object.defineProperty(CdkTable.prototype, \"trackBy\", {\n        /**\n         * Tracking function that will be used to check the differences in data changes. Used similarly\n         * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n         * relative to the function to know if a row should be added/removed/moved.\n         * Accepts a function that takes two parameters, `index` and `item`.\n         */\n        get: /**\n         * Tracking function that will be used to check the differences in data changes. Used similarly\n         * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n         * relative to the function to know if a row should be added/removed/moved.\n         * Accepts a function that takes two parameters, `index` and `item`.\n         * @return {?}\n         */\n        function () {\n            return this._trackByFn;\n        },\n        set: /**\n         * @param {?} fn\n         * @return {?}\n         */\n        function (fn) {\n            if (isDevMode() && fn != null && typeof fn !== 'function' && (/** @type {?} */ (console)) &&\n                (/** @type {?} */ (console.warn))) {\n                console.warn(\"trackBy must be a function, but received \" + JSON.stringify(fn) + \".\");\n            }\n            this._trackByFn = fn;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTable.prototype, \"dataSource\", {\n        /**\n         * The table's source of data, which can be provided in three ways (in order of complexity):\n         *   - Simple data array (each object represents one table row)\n         *   - Stream that emits a data array each time the array changes\n         *   - `DataSource` object that implements the connect/disconnect interface.\n         *\n         * If a data array is provided, the table must be notified when the array's objects are\n         * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n         * render the diff since the last table render. If the data array reference is changed, the table\n         * will automatically trigger an update to the rows.\n         *\n         * When providing an Observable stream, the table will trigger an update automatically when the\n         * stream emits a new array of data.\n         *\n         * Finally, when providing a `DataSource` object, the table will use the Observable stream\n         * provided by the connect function and trigger updates when that stream emits new data array\n         * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n         * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n         * subscriptions registered during the connect process).\n         */\n        get: /**\n         * The table's source of data, which can be provided in three ways (in order of complexity):\n         *   - Simple data array (each object represents one table row)\n         *   - Stream that emits a data array each time the array changes\n         *   - `DataSource` object that implements the connect/disconnect interface.\n         *\n         * If a data array is provided, the table must be notified when the array's objects are\n         * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n         * render the diff since the last table render. If the data array reference is changed, the table\n         * will automatically trigger an update to the rows.\n         *\n         * When providing an Observable stream, the table will trigger an update automatically when the\n         * stream emits a new array of data.\n         *\n         * Finally, when providing a `DataSource` object, the table will use the Observable stream\n         * provided by the connect function and trigger updates when that stream emits new data array\n         * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n         * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n         * subscriptions registered during the connect process).\n         * @return {?}\n         */\n        function () {\n            return this._dataSource;\n        },\n        set: /**\n         * @param {?} dataSource\n         * @return {?}\n         */\n        function (dataSource) {\n            if (this._dataSource !== dataSource) {\n                this._switchDataSource(dataSource);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTable.prototype, \"multiTemplateDataRows\", {\n        /**\n         * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n         * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n         * dataobject will render the first row that evaluates its when predicate to true, in the order\n         * defined in the table, or otherwise the default row which does not have a when predicate.\n         */\n        get: /**\n         * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n         * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n         * dataobject will render the first row that evaluates its when predicate to true, in the order\n         * defined in the table, or otherwise the default row which does not have a when predicate.\n         * @return {?}\n         */\n        function () {\n            return this._multiTemplateDataRows;\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this._multiTemplateDataRows = coerceBooleanProperty(v);\n            // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n            // this setter will be invoked before the row outlet has been defined hence the null check.\n            if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n                this._forceRenderDataRows();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkTable.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((/**\n         * @param {?} _i\n         * @param {?} dataRow\n         * @return {?}\n         */\n        function (_i, dataRow) {\n            return _this.trackBy ? _this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        }));\n    };\n    /**\n     * @return {?}\n     */\n    CdkTable.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n    function () {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        this._renderUpdatedColumns();\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        this._checkStickyStates();\n    };\n    /**\n     * @return {?}\n     */\n    CdkTable.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._rowOutlet.viewContainer.clear();\n        this._headerRowOutlet.viewContainer.clear();\n        this._footerRowOutlet.viewContainer.clear();\n        this._cachedRenderRowsMap.clear();\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    };\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    CdkTable.prototype.renderRows = /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._renderRows = this._getAllRenderRows();\n        /** @type {?} */\n        var changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            return;\n        }\n        /** @type {?} */\n        var viewContainer = this._rowOutlet.viewContainer;\n        changes.forEachOperation((/**\n         * @param {?} record\n         * @param {?} prevIndex\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        function (record, prevIndex, currentIndex) {\n            if (record.previousIndex == null) {\n                _this._insertRow(record.item, (/** @type {?} */ (currentIndex)));\n            }\n            else if (currentIndex == null) {\n                viewContainer.remove((/** @type {?} */ (prevIndex)));\n            }\n            else {\n                /** @type {?} */\n                var view = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (prevIndex)))));\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\n            }\n        }));\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((/**\n         * @param {?} record\n         * @return {?}\n         */\n        function (record) {\n            /** @type {?} */\n            var rowView = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (record.currentIndex)))));\n            rowView.context.$implicit = record.item.data;\n        }));\n        this.updateStickyColumnStyles();\n    };\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * @docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    CdkTable.prototype.setHeaderRowDef = /**\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    function (headerRowDef) {\n        this._customHeaderRowDefs = new Set([headerRowDef]);\n        this._headerRowDefChanged = true;\n    };\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * @docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    CdkTable.prototype.setFooterRowDef = /**\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\n     * table's content is checked.\n     * \\@docs-private\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\n     * \\@breaking-change 8.0.0\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    function (footerRowDef) {\n        this._customFooterRowDefs = new Set([footerRowDef]);\n        this._footerRowDefChanged = true;\n    };\n    /** Adds a column definition that was not included as part of the content children. */\n    /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    CdkTable.prototype.addColumnDef = /**\n     * Adds a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    function (columnDef) {\n        this._customColumnDefs.add(columnDef);\n    };\n    /** Removes a column definition that was not included as part of the content children. */\n    /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    CdkTable.prototype.removeColumnDef = /**\n     * Removes a column definition that was not included as part of the content children.\n     * @param {?} columnDef\n     * @return {?}\n     */\n    function (columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    };\n    /** Adds a row definition that was not included as part of the content children. */\n    /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    CdkTable.prototype.addRowDef = /**\n     * Adds a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    function (rowDef) {\n        this._customRowDefs.add(rowDef);\n    };\n    /** Removes a row definition that was not included as part of the content children. */\n    /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    CdkTable.prototype.removeRowDef = /**\n     * Removes a row definition that was not included as part of the content children.\n     * @param {?} rowDef\n     * @return {?}\n     */\n    function (rowDef) {\n        this._customRowDefs.delete(rowDef);\n    };\n    /** Adds a header row definition that was not included as part of the content children. */\n    /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    CdkTable.prototype.addHeaderRowDef = /**\n     * Adds a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    function (headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    };\n    /** Removes a header row definition that was not included as part of the content children. */\n    /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    CdkTable.prototype.removeHeaderRowDef = /**\n     * Removes a header row definition that was not included as part of the content children.\n     * @param {?} headerRowDef\n     * @return {?}\n     */\n    function (headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    };\n    /** Adds a footer row definition that was not included as part of the content children. */\n    /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    CdkTable.prototype.addFooterRowDef = /**\n     * Adds a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    function (footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    };\n    /** Removes a footer row definition that was not included as part of the content children. */\n    /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    CdkTable.prototype.removeFooterRowDef = /**\n     * Removes a footer row definition that was not included as part of the content children.\n     * @param {?} footerRowDef\n     * @return {?}\n     */\n    function (footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    };\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    CdkTable.prototype.updateStickyHeaderRowStyles = /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        var tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        var thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        var stickyStates = this._headerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        function (def) { return def.sticky; }));\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        function (def) { return def.resetStickyChanged(); }));\n    };\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    CdkTable.prototype.updateStickyFooterRowStyles = /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var footerRows = this._getRenderedRows(this._footerRowOutlet);\n        /** @type {?} */\n        var tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        /** @type {?} */\n        var tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        /** @type {?} */\n        var stickyStates = this._footerRowDefs.map((/**\n         * @param {?} def\n         * @return {?}\n         */\n        function (def) { return def.sticky; }));\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        function (def) { return def.resetStickyChanged(); }));\n    };\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    CdkTable.prototype.updateStickyColumnStyles = /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var headerRows = this._getRenderedRows(this._headerRowOutlet);\n        /** @type {?} */\n        var dataRows = this._getRenderedRows(this._rowOutlet);\n        /** @type {?} */\n        var footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Clear the left and right positioning from all columns in the table across all rows since\n        // sticky columns span across all table sections (header, data, footer)\n        this._stickyStyler.clearStickyPositioning(headerRows.concat(dataRows, footerRows), ['left', 'right']);\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((/**\n         * @param {?} headerRow\n         * @param {?} i\n         * @return {?}\n         */\n        function (headerRow, i) {\n            _this._addStickyColumnStyles([headerRow], _this._headerRowDefs[i]);\n        }));\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        function (rowDef) {\n            // Collect all the rows rendered with this row definition.\n            /** @type {?} */\n            var rows = [];\n            for (var i = 0; i < dataRows.length; i++) {\n                if (_this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            _this._addStickyColumnStyles(rows, rowDef);\n        }));\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((/**\n         * @param {?} footerRow\n         * @param {?} i\n         * @return {?}\n         */\n        function (footerRow, i) {\n            _this._addStickyColumnStyles([footerRow], _this._footerRowDefs[i]);\n        }));\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach((/**\n         * @param {?} def\n         * @return {?}\n         */\n        function (def) { return def.resetStickyChanged(); }));\n    };\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._getAllRenderRows = /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        /** @type {?} */\n        var prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (var i = 0; i < this._data.length; i++) {\n            /** @type {?} */\n            var data = this._data[i];\n            /** @type {?} */\n            var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (var j = 0; j < renderRowsForData.length; j++) {\n                /** @type {?} */\n                var renderRow = renderRowsForData[j];\n                /** @type {?} */\n                var cache = (/** @type {?} */ (this._cachedRenderRowsMap.get(renderRow.data)));\n                if (cache.has(renderRow.rowDef)) {\n                    (/** @type {?} */ (cache.get(renderRow.rowDef))).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    };\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @private\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    CdkTable.prototype._getRenderRowsForData = /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     * @private\n     * @param {?} data\n     * @param {?} dataIndex\n     * @param {?=} cache\n     * @return {?}\n     */\n    function (data, dataIndex, cache) {\n        /** @type {?} */\n        var rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map((/**\n         * @param {?} rowDef\n         * @return {?}\n         */\n        function (rowDef) {\n            /** @type {?} */\n            var cachedRenderRows = (cache && cache.has(rowDef)) ? (/** @type {?} */ (cache.get(rowDef))) : [];\n            if (cachedRenderRows.length) {\n                /** @type {?} */\n                var dataRow = (/** @type {?} */ (cachedRenderRows.shift()));\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data: data, rowDef: rowDef, dataIndex: dataIndex };\n            }\n        }));\n    };\n    /** Update the map containing the content's column definitions. */\n    /**\n     * Update the map containing the content's column definitions.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._cacheColumnDefs = /**\n     * Update the map containing the content's column definitions.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._columnDefsByName.clear();\n        /** @type {?} */\n        var columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\n        columnDefs.forEach((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        function (columnDef) {\n            if (_this._columnDefsByName.has(columnDef.name)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            _this._columnDefsByName.set(columnDef.name, columnDef);\n        }));\n    };\n    /** Update the list of all available row definitions that can be used. */\n    /**\n     * Update the list of all available row definitions that can be used.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._cacheRowDefs = /**\n     * Update the list of all available row definitions that can be used.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._headerRowDefs =\n            mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\n        this._footerRowDefs =\n            mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\n        this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        /** @type {?} */\n        var defaultRowDefs = this._rowDefs.filter((/**\n         * @param {?} def\n         * @return {?}\n         */\n        function (def) { return !def.when; }));\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    };\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._renderUpdatedColumns = /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var columnsDiffReducer = (/**\n         * @param {?} acc\n         * @param {?} def\n         * @return {?}\n         */\n        function (acc, def) { return acc || !!def.getColumnsDiff(); });\n        // Force re-render data rows if the list of column definitions have changed.\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed..\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderHeaderRows();\n        }\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\n            this._forceRenderFooterRows();\n        }\n    };\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    CdkTable.prototype._switchDataSource = /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     * @private\n     * @param {?} dataSource\n     * @return {?}\n     */\n    function (dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    };\n    /** Set up a subscription for the data provided by the data source. */\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._observeRenderChanges = /**\n     * Set up a subscription for the data provided by the data source.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        /** @type {?} */\n        var dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (this.dataSource instanceof Observable) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        function (data) {\n            _this._data = data || [];\n            _this.renderRows();\n        }));\n    };\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._forceRenderHeaderRows = /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        function (def, i) { return _this._renderRow(_this._headerRowOutlet, def, i); }));\n        this.updateStickyHeaderRowStyles();\n        this.updateStickyColumnStyles();\n    };\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._forceRenderFooterRows = /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((/**\n         * @param {?} def\n         * @param {?} i\n         * @return {?}\n         */\n        function (def, i) { return _this._renderRow(_this._footerRowOutlet, def, i); }));\n        this.updateStickyFooterRowStyles();\n        this.updateStickyColumnStyles();\n    };\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @private\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    CdkTable.prototype._addStickyColumnStyles = /**\n     * Adds the sticky column styles for the rows according to the columns' stick states.\n     * @private\n     * @param {?} rows\n     * @param {?} rowDef\n     * @return {?}\n     */\n    function (rows, rowDef) {\n        var _this = this;\n        /** @type {?} */\n        var columnDefs = Array.from(rowDef.columns || []).map((/**\n         * @param {?} columnName\n         * @return {?}\n         */\n        function (columnName) {\n            /** @type {?} */\n            var columnDef = _this._columnDefsByName.get(columnName);\n            if (!columnDef) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return (/** @type {?} */ (columnDef));\n        }));\n        /** @type {?} */\n        var stickyStartStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        function (columnDef) { return columnDef.sticky; }));\n        /** @type {?} */\n        var stickyEndStates = columnDefs.map((/**\n         * @param {?} columnDef\n         * @return {?}\n         */\n        function (columnDef) { return columnDef.stickyEnd; }));\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\n    };\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    CdkTable.prototype._getRenderedRows = /**\n     * Gets the list of rows that have been rendered in the row outlet.\n     * @param {?} rowOutlet\n     * @return {?}\n     */\n    function (rowOutlet) {\n        /** @type {?} */\n        var renderedRows = [];\n        for (var i = 0; i < rowOutlet.viewContainer.length; i++) {\n            /** @type {?} */\n            var viewRef = ((/** @type {?} */ ((/** @type {?} */ (rowOutlet.viewContainer.get(i))))));\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    };\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    CdkTable.prototype._getRowDefs = /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     * @param {?} data\n     * @param {?} dataIndex\n     * @return {?}\n     */\n    function (data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        /** @type {?} */\n        var rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter((/**\n             * @param {?} def\n             * @return {?}\n             */\n            function (def) { return !def.when || def.when(dataIndex, data); }));\n        }\n        else {\n            /** @type {?} */\n            var rowDef = this._rowDefs.find((/**\n             * @param {?} def\n             * @return {?}\n             */\n            function (def) { return def.when && def.when(dataIndex, data); })) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    };\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     */\n    /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @private\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    CdkTable.prototype._insertRow = /**\n     * Create the embedded view for the data row template and place it in the correct index location\n     * within the data row view container.\n     * @private\n     * @param {?} renderRow\n     * @param {?} renderIndex\n     * @return {?}\n     */\n    function (renderRow, renderIndex) {\n        /** @type {?} */\n        var rowDef = renderRow.rowDef;\n        /** @type {?} */\n        var context = { $implicit: renderRow.data };\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\n    };\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @private\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    CdkTable.prototype._renderRow = /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     * @private\n     * @param {?} outlet\n     * @param {?} rowDef\n     * @param {?} index\n     * @param {?=} context\n     * @return {?}\n     */\n    function (outlet, rowDef, index, context) {\n        if (context === void 0) { context = {}; }\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        for (var _a = 0, _b = this._getCellTemplates(rowDef); _a < _b.length; _a++) {\n            var cellTemplate = _b[_a];\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._updateRowIndexContext = /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var viewContainer = this._rowOutlet.viewContainer;\n        for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            /** @type {?} */\n            var viewRef = (/** @type {?} */ (viewContainer.get(renderIndex)));\n            /** @type {?} */\n            var context = (/** @type {?} */ (viewRef.context));\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    };\n    /** Gets the column definitions for the provided row def. */\n    /**\n     * Gets the column definitions for the provided row def.\n     * @private\n     * @param {?} rowDef\n     * @return {?}\n     */\n    CdkTable.prototype._getCellTemplates = /**\n     * Gets the column definitions for the provided row def.\n     * @private\n     * @param {?} rowDef\n     * @return {?}\n     */\n    function (rowDef) {\n        var _this = this;\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, (/**\n         * @param {?} columnId\n         * @return {?}\n         */\n        function (columnId) {\n            /** @type {?} */\n            var column = _this._columnDefsByName.get(columnId);\n            if (!column) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        }));\n    };\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n    /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._applyNativeTableSections = /**\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var documentFragment = this._document.createDocumentFragment();\n        /** @type {?} */\n        var sections = [\n            { tag: 'thead', outlet: this._headerRowOutlet },\n            { tag: 'tbody', outlet: this._rowOutlet },\n            { tag: 'tfoot', outlet: this._footerRowOutlet },\n        ];\n        for (var _a = 0, sections_1 = sections; _a < sections_1.length; _a++) {\n            var section = sections_1[_a];\n            /** @type {?} */\n            var element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            element.appendChild(section.outlet.elementRef.nativeElement);\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    };\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._forceRenderDataRows = /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n        this.updateStickyColumnStyles();\n    };\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._checkStickyStates = /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var stickyCheckReducer = (/**\n         * @param {?} acc\n         * @param {?} d\n         * @return {?}\n         */\n        function (acc, d) {\n            return acc || d.hasStickyChanged();\n        });\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this.updateStickyColumnStyles();\n        }\n    };\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @private\n     * @return {?}\n     */\n    CdkTable.prototype._setupStickyStyler = /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe((/**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            _this._stickyStyler.direction = value;\n            _this.updateStickyColumnStyles();\n        }));\n    };\n    CdkTable.decorators = [\n        { type: Component, args: [{selector: 'cdk-table, table[cdk-table]',\n                    exportAs: 'cdkTable',\n                    template: CDK_TABLE_TEMPLATE,\n                    host: {\n                        'class': 'cdk-table',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\n                    // The view for `MatTable` consists entirely of templates declared in other views. As they are\n                    // declared elsewhere, they are checked when their declaration points are checked.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                },] },\n    ];\n    /** @nocollapse */\n    CdkTable.ctorParameters = function () { return [\n        { type: IterableDiffers },\n        { type: ChangeDetectorRef },\n        { type: ElementRef },\n        { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Platform }\n    ]; };\n    CdkTable.propDecorators = {\n        trackBy: [{ type: Input }],\n        dataSource: [{ type: Input }],\n        multiTemplateDataRows: [{ type: Input }],\n        _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\n        _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\n        _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\n        _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef,] }],\n        _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef,] }],\n        _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef,] }],\n        _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef,] }]\n    };\n    return CdkTable;\n}());\n/**\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\n * @template T\n * @param {?} queryList\n * @param {?} set\n * @return {?}\n */\nfunction mergeQueryListAndSet(queryList, set) {\n    return queryList.toArray().concat(Array.from(set));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify the text column options.\n * @type {?}\n */\nvar TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nvar CdkTextColumn = /** @class */ (function () {\n    function CdkTextColumn(_table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /**\n         * Alignment of the cell values.\n         */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    Object.defineProperty(CdkTextColumn.prototype, \"name\", {\n        /** Column name that should be used to reference this column. */\n        get: /**\n         * Column name that should be used to reference this column.\n         * @return {?}\n         */\n        function () {\n            return this._name;\n        },\n        set: /**\n         * @param {?} name\n         * @return {?}\n         */\n        function (name) {\n            this._name = name;\n            // With Ivy, inputs can be initialized before static query results are\n            // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n            this._syncColumnDefName();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkTextColumn.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((/**\n                 * @param {?} data\n                 * @param {?} name\n                 * @return {?}\n                 */\n                function (data, name) { return ((/** @type {?} */ (data)))[name]; }));\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CdkTextColumn.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    };\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     * @return {?}\n     */\n    CdkTextColumn.prototype._createDefaultHeaderText = /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var name = this.name;\n        if (isDevMode() && !name) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    };\n    /** Synchronizes the column definition name with the text column name. */\n    /**\n     * Synchronizes the column definition name with the text column name.\n     * @private\n     * @return {?}\n     */\n    CdkTextColumn.prototype._syncColumnDefName = /**\n     * Synchronizes the column definition name with the text column name.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    };\n    CdkTextColumn.decorators = [\n        { type: Component, args: [{selector: 'cdk-text-column',\n                    template: \"\\n    <ng-container cdkColumnDef>\\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\\\"justify\\\">\\n        {{headerText}}\\n      </th>\\n      <td cdk-cell *cdkCellDef=\\\"let data\\\" [style.text-align]=\\\"justify\\\">\\n        {{dataAccessor(data, name)}}\\n      </td>\\n    </ng-container>\\n  \",\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                },] },\n    ];\n    /** @nocollapse */\n    CdkTextColumn.ctorParameters = function () { return [\n        { type: CdkTable, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\n    ]; };\n    CdkTextColumn.propDecorators = {\n        name: [{ type: Input }],\n        headerText: [{ type: Input }],\n        dataAccessor: [{ type: Input }],\n        justify: [{ type: Input }],\n        columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\n        cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\n        headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\n    };\n    return CdkTextColumn;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n];\nvar CdkTableModule = /** @class */ (function () {\n    function CdkTableModule() {\n    }\n    CdkTableModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CommonModule],\n                    exports: EXPORTED_DECLARATIONS,\n                    declarations: EXPORTED_DECLARATIONS\n                },] },\n    ];\n    return CdkTableModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput, TEXT_COLUMN_OPTIONS, CdkTextColumn };\n//# sourceMappingURL=table.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { trigger, state, style, animate, transition, query, group } from '@angular/animations';\nimport { Directive, TemplateRef, ComponentFactoryResolver, ApplicationRef, Injector, ViewContainerRef, Inject, InjectionToken, ChangeDetectionStrategy, Component, ElementRef, ViewEncapsulation, Optional, Input, HostListener, ContentChild, ContentChildren, EventEmitter, NgZone, Output, QueryList, ViewChild, Self, NgModule } from '@angular/core';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Subject, merge, Subscription, asapScheduler, of } from 'rxjs';\nimport { __extends } from 'tslib';\nimport { FocusMonitor, FocusKeyManager, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { mixinDisabled, mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW, HOME, END, hasModifierKey } from '@angular/cdk/keycodes';\nimport { startWith, switchMap, take, delay, filter, takeUntil } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * \\@docs-private\n * @type {?}\n */\nvar matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mat-menu-content, .mat-mdc-menu-content', animate('100ms linear', style({\n                opacity: 1\n            }))),\n            animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'scale(1)' })),\n        ])),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nvar fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nvar transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nvar MatMenuContent = /** @class */ (function () {\n    function MatMenuContent(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        /**\n         * Emits when the menu content has been attached.\n         */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    /**\n     * Attaches the content with a particular context.\n     * \\@docs-private\n     * @param {?=} context\n     * @return {?}\n     */\n    MatMenuContent.prototype.attach = /**\n     * Attaches the content with a particular context.\n     * \\@docs-private\n     * @param {?=} context\n     * @return {?}\n     */\n    function (context) {\n        if (context === void 0) { context = {}; }\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        /** @type {?} */\n        var element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        (/** @type {?} */ (element.parentNode)).insertBefore(this._outlet.outletElement, element);\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    };\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    /**\n     * Detaches the content.\n     * \\@docs-private\n     * @return {?}\n     */\n    MatMenuContent.prototype.detach = /**\n     * Detaches the content.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatMenuContent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    };\n    MatMenuContent.decorators = [\n        { type: Directive, args: [{\n                    selector: 'ng-template[matMenuContent]'\n                },] },\n    ];\n    /** @nocollapse */\n    MatMenuContent.ctorParameters = function () { return [\n        { type: TemplateRef },\n        { type: ComponentFactoryResolver },\n        { type: ApplicationRef },\n        { type: Injector },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    return MatMenuContent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuMissingError() {\n    throw Error(\"matMenuTriggerFor: must pass in an mat-menu instance.\\n\\n    Example:\\n      <mat-menu #menu=\\\"matMenu\\\"></mat-menu>\\n      <button [matMenuTriggerFor]=\\\"menu\\\"></button>\");\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(\"xPosition value must be either 'before' or after'.\\n      Example: <mat-menu xPosition=\\\"before\\\" #menu=\\\"matMenu\\\"></mat-menu>\");\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * \\@docs-private\n * @return {?}\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(\"yPosition value must be either 'above' or below'.\\n      Example: <mat-menu yPosition=\\\"above\\\" #menu=\\\"matMenu\\\"></mat-menu>\");\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * \\@docs-private\n * @type {?}\n */\nvar MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/**\n * \\@docs-private\n */\nvar \n// Boilerplate for applying mixins to MatMenuItem.\n/**\n * \\@docs-private\n */\nMatMenuItemBase = /** @class */ (function () {\n    function MatMenuItemBase() {\n    }\n    return MatMenuItemBase;\n}());\n/** @type {?} */\nvar _MatMenuItemMixinBase = mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\nvar MatMenuItem = /** @class */ (function (_super) {\n    __extends(MatMenuItem, _super);\n    function MatMenuItem(_elementRef, document, _focusMonitor, _parentMenu) {\n        var _this = \n        // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n        _super.call(this) || this;\n        _this._elementRef = _elementRef;\n        _this._focusMonitor = _focusMonitor;\n        _this._parentMenu = _parentMenu;\n        /**\n         * ARIA role for the menu item.\n         */\n        _this.role = 'menuitem';\n        /**\n         * Stream that emits when the menu item is hovered.\n         */\n        _this._hovered = new Subject();\n        /**\n         * Whether the menu item is highlighted.\n         */\n        _this._highlighted = false;\n        /**\n         * Whether the menu item acts as a trigger for a sub-menu.\n         */\n        _this._triggersSubmenu = false;\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(_this._elementRef, false);\n        }\n        if (_parentMenu && _parentMenu.addItem) {\n            _parentMenu.addItem(_this);\n        }\n        _this._document = document;\n        return _this;\n    }\n    /** Focuses the menu item. */\n    /**\n     * Focuses the menu item.\n     * @param {?=} origin\n     * @return {?}\n     */\n    MatMenuItem.prototype.focus = /**\n     * Focuses the menu item.\n     * @param {?=} origin\n     * @return {?}\n     */\n    function (origin) {\n        if (origin === void 0) { origin = 'program'; }\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin);\n        }\n        else {\n            this._getHostElement().focus();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatMenuItem.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n    };\n    /** Used to set the `tabindex`. */\n    /**\n     * Used to set the `tabindex`.\n     * @return {?}\n     */\n    MatMenuItem.prototype._getTabIndex = /**\n     * Used to set the `tabindex`.\n     * @return {?}\n     */\n    function () {\n        return this.disabled ? '-1' : '0';\n    };\n    /** Returns the host DOM element. */\n    /**\n     * Returns the host DOM element.\n     * @return {?}\n     */\n    MatMenuItem.prototype._getHostElement = /**\n     * Returns the host DOM element.\n     * @return {?}\n     */\n    function () {\n        return this._elementRef.nativeElement;\n    };\n    /** Prevents the default element actions if it is disabled. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritte.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * Prevents the default element actions if it is disabled.\n     * @param {?} event\n     * @return {?}\n     */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritte.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    MatMenuItem.prototype._checkDisabled = /**\n     * Prevents the default element actions if it is disabled.\n     * @param {?} event\n     * @return {?}\n     */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritte.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    function (event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    };\n    /** Emits to the hover stream. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritte.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    /**\n     * Emits to the hover stream.\n     * @return {?}\n     */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritte.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    MatMenuItem.prototype._handleMouseEnter = /**\n     * Emits to the hover stream.\n     * @return {?}\n     */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritte.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    function () {\n        this._hovered.next(this);\n    };\n    /** Gets the label to be used when determining whether the option should be focused. */\n    /**\n     * Gets the label to be used when determining whether the option should be focused.\n     * @return {?}\n     */\n    MatMenuItem.prototype.getLabel = /**\n     * Gets the label to be used when determining whether the option should be focused.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var element = this._elementRef.nativeElement;\n        /** @type {?} */\n        var textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        /** @type {?} */\n        var output = '';\n        if (element.childNodes) {\n            /** @type {?} */\n            var length_1 = element.childNodes.length;\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (var i = 0; i < length_1; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n        return output.trim();\n    };\n    MatMenuItem.decorators = [\n        { type: Component, args: [{selector: '[mat-menu-item]',\n                    exportAs: 'matMenuItem',\n                    inputs: ['disabled', 'disableRipple'],\n                    host: {\n                        '[attr.role]': 'role',\n                        'class': 'mat-menu-item',\n                        '[class.mat-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.disabled]': 'disabled || null',\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    template: \"<ng-content></ng-content><div class=\\\"mat-menu-ripple\\\" matRipple [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleTrigger]=\\\"_getHostElement()\\\"></div>\",\n                },] },\n    ];\n    /** @nocollapse */\n    MatMenuItem.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: FocusMonitor },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_PANEL,] }, { type: Optional }] }\n    ]; };\n    MatMenuItem.propDecorators = {\n        role: [{ type: Input }],\n        _checkDisabled: [{ type: HostListener, args: ['click', ['$event'],] }],\n        _handleMouseEnter: [{ type: HostListener, args: ['mouseenter',] }]\n    };\n    return MatMenuItem;\n}(_MatMenuItemMixinBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token to be used to override the default options for `mat-menu`.\n * @type {?}\n */\nvar MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\n/**\n * Start elevation for the menu panel.\n * \\@docs-private\n * @type {?}\n */\nvar MAT_MENU_BASE_ELEVATION = 4;\n/**\n * Base class with all of the `MatMenu` functionality.\n */\n// tslint:disable-next-line:class-name\nvar _MatMenuBase = /** @class */ (function () {\n    function _MatMenuBase(_elementRef, _ngZone, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        this._xPosition = this._defaultOptions.xPosition;\n        this._yPosition = this._defaultOptions.yPosition;\n        /**\n         * Only the direct descendant menu items.\n         */\n        this._directDescendantItems = new QueryList();\n        /**\n         * Subscription to tab events on the menu panel\n         */\n        this._tabSubscription = Subscription.EMPTY;\n        /**\n         * Config object to be passed into the menu's ngClass\n         */\n        this._classList = {};\n        /**\n         * Current state of the panel animation.\n         */\n        this._panelAnimationState = 'void';\n        /**\n         * Emits whenever an animation on the menu completes.\n         */\n        this._animationDone = new Subject();\n        /**\n         * Class to be added to the backdrop element.\n         */\n        this.backdropClass = this._defaultOptions.backdropClass;\n        this._overlapTrigger = this._defaultOptions.overlapTrigger;\n        this._hasBackdrop = this._defaultOptions.hasBackdrop;\n        /**\n         * Event emitted when the menu is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * \\@breaking-change 8.0.0\n         */\n        this.close = this.closed;\n    }\n    Object.defineProperty(_MatMenuBase.prototype, \"xPosition\", {\n        /** Position of the menu in the X axis. */\n        get: /**\n         * Position of the menu in the X axis.\n         * @return {?}\n         */\n        function () { return this._xPosition; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value !== 'before' && value !== 'after') {\n                throwMatMenuInvalidPositionX();\n            }\n            this._xPosition = value;\n            this.setPositionClasses();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_MatMenuBase.prototype, \"yPosition\", {\n        /** Position of the menu in the Y axis. */\n        get: /**\n         * Position of the menu in the Y axis.\n         * @return {?}\n         */\n        function () { return this._yPosition; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value !== 'above' && value !== 'below') {\n                throwMatMenuInvalidPositionY();\n            }\n            this._yPosition = value;\n            this.setPositionClasses();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_MatMenuBase.prototype, \"overlapTrigger\", {\n        /** Whether the menu should overlap its trigger. */\n        get: /**\n         * Whether the menu should overlap its trigger.\n         * @return {?}\n         */\n        function () { return this._overlapTrigger; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._overlapTrigger = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_MatMenuBase.prototype, \"hasBackdrop\", {\n        /** Whether the menu has a backdrop. */\n        get: /**\n         * Whether the menu has a backdrop.\n         * @return {?}\n         */\n        function () { return this._hasBackdrop; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._hasBackdrop = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_MatMenuBase.prototype, \"panelClass\", {\n        /**\n         * This method takes classes set on the host mat-menu element and applies them on the\n         * menu template that displays in the overlay container.  Otherwise, it's difficult\n         * to style the containing menu from outside the component.\n         * @param classes list of class names\n         */\n        set: /**\n         * This method takes classes set on the host mat-menu element and applies them on the\n         * menu template that displays in the overlay container.  Otherwise, it's difficult\n         * to style the containing menu from outside the component.\n         * @param {?} classes list of class names\n         * @return {?}\n         */\n        function (classes) {\n            var _this = this;\n            /** @type {?} */\n            var previousPanelClass = this._previousPanelClass;\n            if (previousPanelClass && previousPanelClass.length) {\n                previousPanelClass.split(' ').forEach((/**\n                 * @param {?} className\n                 * @return {?}\n                 */\n                function (className) {\n                    _this._classList[className] = false;\n                }));\n            }\n            this._previousPanelClass = classes;\n            if (classes && classes.length) {\n                classes.split(' ').forEach((/**\n                 * @param {?} className\n                 * @return {?}\n                 */\n                function (className) {\n                    _this._classList[className] = true;\n                }));\n                this._elementRef.nativeElement.className = '';\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_MatMenuBase.prototype, \"classList\", {\n        /**\n         * This method takes classes set on the host mat-menu element and applies them on the\n         * menu template that displays in the overlay container.  Otherwise, it's difficult\n         * to style the containing menu from outside the component.\n         * @deprecated Use `panelClass` instead.\n         * @breaking-change 8.0.0\n         */\n        get: /**\n         * This method takes classes set on the host mat-menu element and applies them on the\n         * menu template that displays in the overlay container.  Otherwise, it's difficult\n         * to style the containing menu from outside the component.\n         * @deprecated Use `panelClass` instead.\n         * \\@breaking-change 8.0.0\n         * @return {?}\n         */\n        function () { return this.panelClass; },\n        set: /**\n         * @param {?} classes\n         * @return {?}\n         */\n        function (classes) { this.panelClass = classes; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    _MatMenuBase.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this.setPositionClasses();\n    };\n    /**\n     * @return {?}\n     */\n    _MatMenuBase.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe((/**\n         * @return {?}\n         */\n        function () { return _this.closed.emit('tab'); }));\n    };\n    /**\n     * @return {?}\n     */\n    _MatMenuBase.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._directDescendantItems.destroy();\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    };\n    /** Stream that emits whenever the hovered menu item changes. */\n    /**\n     * Stream that emits whenever the hovered menu item changes.\n     * @return {?}\n     */\n    _MatMenuBase.prototype._hovered = /**\n     * Stream that emits whenever the hovered menu item changes.\n     * @return {?}\n     */\n    function () {\n        return this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap((/**\n         * @param {?} items\n         * @return {?}\n         */\n        function (items) { return merge.apply(void 0, items.map((/**\n         * @param {?} item\n         * @return {?}\n         */\n        function (item) { return item._hovered; }))); })));\n    };\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    /*\n       * Registers a menu item with the menu.\n       * @docs-private\n       * @deprecated No longer being used. To be removed.\n       * @breaking-change 9.0.0\n       */\n    /**\n     * @param {?} _item\n     * @return {?}\n     */\n    _MatMenuBase.prototype.addItem = /*\n       * Registers a menu item with the menu.\n       * @docs-private\n       * @deprecated No longer being used. To be removed.\n       * @breaking-change 9.0.0\n       */\n    /**\n     * @param {?} _item\n     * @return {?}\n     */\n    function (_item) { };\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    /**\n     * Removes an item from the menu.\n     * \\@docs-private\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 9.0.0\n     * @param {?} _item\n     * @return {?}\n     */\n    _MatMenuBase.prototype.removeItem = /**\n     * Removes an item from the menu.\n     * \\@docs-private\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 9.0.0\n     * @param {?} _item\n     * @return {?}\n     */\n    function (_item) { };\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    /**\n     * Handle a keyboard event from the menu, delegating to the appropriate action.\n     * @param {?} event\n     * @return {?}\n     */\n    _MatMenuBase.prototype._handleKeydown = /**\n     * Handle a keyboard event from the menu, delegating to the appropriate action.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var keyCode = event.keyCode;\n        /** @type {?} */\n        var manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case HOME:\n            case END:\n                if (!hasModifierKey(event)) {\n                    keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                    event.preventDefault();\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n        }\n    };\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    /**\n     * Focus the first item in the menu.\n     * @param {?=} origin Action from which the focus originated. Used to set the correct styling.\n     * @return {?}\n     */\n    _MatMenuBase.prototype.focusFirstItem = /**\n     * Focus the first item in the menu.\n     * @param {?=} origin Action from which the focus originated. Used to set the correct styling.\n     * @return {?}\n     */\n    function (origin) {\n        var _this = this;\n        if (origin === void 0) { origin = 'program'; }\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe((/**\n             * @return {?}\n             */\n            function () { return _this._keyManager.setFocusOrigin(origin).setFirstItemActive(); }));\n        }\n        else {\n            this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n    };\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     * @return {?}\n     */\n    _MatMenuBase.prototype.resetActiveItem = /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     * @return {?}\n     */\n    function () {\n        this._keyManager.setActiveItem(-1);\n    };\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    /**\n     * Sets the menu panel elevation.\n     * @param {?} depth Number of parent menus that come before the menu.\n     * @return {?}\n     */\n    _MatMenuBase.prototype.setElevation = /**\n     * Sets the menu panel elevation.\n     * @param {?} depth Number of parent menus that come before the menu.\n     * @return {?}\n     */\n    function (depth) {\n        // The elevation starts at the base and increases by one for each level.\n        /** @type {?} */\n        var newElevation = \"mat-elevation-z\" + (MAT_MENU_BASE_ELEVATION + depth);\n        /** @type {?} */\n        var customElevation = Object.keys(this._classList).find((/**\n         * @param {?} c\n         * @return {?}\n         */\n        function (c) { return c.startsWith('mat-elevation-z'); }));\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    };\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * \\@docs-private\n     * @param {?=} posX Position of the menu along the x axis.\n     * @param {?=} posY Position of the menu along the y axis.\n     * @return {?}\n     */\n    _MatMenuBase.prototype.setPositionClasses = /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * \\@docs-private\n     * @param {?=} posX Position of the menu along the x axis.\n     * @param {?=} posY Position of the menu along the y axis.\n     * @return {?}\n     */\n    function (posX, posY) {\n        if (posX === void 0) { posX = this.xPosition; }\n        if (posY === void 0) { posY = this.yPosition; }\n        /** @type {?} */\n        var classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n    };\n    /** Starts the enter animation. */\n    /**\n     * Starts the enter animation.\n     * @return {?}\n     */\n    _MatMenuBase.prototype._startAnimation = /**\n     * Starts the enter animation.\n     * @return {?}\n     */\n    function () {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    };\n    /** Resets the panel animation to its initial state. */\n    /**\n     * Resets the panel animation to its initial state.\n     * @return {?}\n     */\n    _MatMenuBase.prototype._resetAnimation = /**\n     * Resets the panel animation to its initial state.\n     * @return {?}\n     */\n    function () {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    };\n    /** Callback that is invoked when the panel animation completes. */\n    /**\n     * Callback that is invoked when the panel animation completes.\n     * @param {?} event\n     * @return {?}\n     */\n    _MatMenuBase.prototype._onAnimationDone = /**\n     * Callback that is invoked when the panel animation completes.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _MatMenuBase.prototype._onAnimationStart = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    };\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     * @private\n     * @return {?}\n     */\n    _MatMenuBase.prototype._updateDirectDescendants = /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((/**\n         * @param {?} items\n         * @return {?}\n         */\n        function (items) {\n            _this._directDescendantItems.reset(items.filter((/**\n             * @param {?} item\n             * @return {?}\n             */\n            function (item) { return item._parentMenu === _this; })));\n            _this._directDescendantItems.notifyOnChanges();\n        }));\n    };\n    /** @nocollapse */\n    _MatMenuBase.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n    ]; };\n    _MatMenuBase.propDecorators = {\n        _allItems: [{ type: ContentChildren, args: [MatMenuItem, { descendants: true },] }],\n        backdropClass: [{ type: Input }],\n        xPosition: [{ type: Input }],\n        yPosition: [{ type: Input }],\n        templateRef: [{ type: ViewChild, args: [TemplateRef, { static: false },] }],\n        items: [{ type: ContentChildren, args: [MatMenuItem,] }],\n        lazyContent: [{ type: ContentChild, args: [MatMenuContent, { static: false },] }],\n        overlapTrigger: [{ type: Input }],\n        hasBackdrop: [{ type: Input }],\n        panelClass: [{ type: Input, args: ['class',] }],\n        classList: [{ type: Input }],\n        closed: [{ type: Output }],\n        close: [{ type: Output }]\n    };\n    return _MatMenuBase;\n}());\n/**\n * \\@docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs.\n */\nvar  /**\n * \\@docs-private We show the \"_MatMenu\" class as \"MatMenu\" in the docs.\n */\nMatMenu = /** @class */ (function (_super) {\n    __extends(MatMenu, _super);\n    function MatMenu() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatMenu;\n}(_MatMenuBase));\n// Note on the weird inheritance setup: we need three classes, because the MDC-based menu has to\n// extend `MatMenu`, however keeping a reference to it will cause the inlined template and styles\n// to be retained as well. The MDC menu also has to provide itself as a `MatMenu` in order for\n// queries and DI to work correctly, while still not referencing the actual menu class.\n// Class responsibility is split up as follows:\n// * _MatMenuBase - provides all the functionality without any of the Angular metadata.\n// * MatMenu - keeps the same name symbol name as the current menu and\n// is used as a provider for DI and query purposes.\n// * _MatMenu - the actual menu component implementation with the Angular metadata that should\n// be tree shaken away for MDC.\n/**\n * \\@docs-public MatMenu\n */\nvar _MatMenu = /** @class */ (function (_super) {\n    __extends(_MatMenu, _super);\n    function _MatMenu(elementRef, ngZone, defaultOptions) {\n        return _super.call(this, elementRef, ngZone, defaultOptions) || this;\n    }\n    _MatMenu.decorators = [\n        { type: Component, args: [{selector: 'mat-menu',\n                    template: \"<ng-template><div class=\\\"mat-menu-panel\\\" [ngClass]=\\\"_classList\\\" (keydown)=\\\"_handleKeydown($event)\\\" (click)=\\\"closed.emit('click')\\\" [@transformMenu]=\\\"_panelAnimationState\\\" (@transformMenu.start)=\\\"_onAnimationStart($event)\\\" (@transformMenu.done)=\\\"_onAnimationDone($event)\\\" tabindex=\\\"-1\\\" role=\\\"menu\\\"><div class=\\\"mat-menu-content\\\"><ng-content></ng-content></div></div></ng-template>\",\n                    styles: [\".mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}@media (-ms-high-contrast:active){.mat-menu-panel{outline:solid 1px}}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}@media (-ms-high-contrast:active){.mat-menu-item-highlighted,.mat-menu-item.cdk-keyboard-focused,.mat-menu-item.cdk-program-focused{outline:dotted 1px}}.mat-menu-item-submenu-trigger{padding-right:32px}.mat-menu-item-submenu-trigger::after{width:0;height:0;border-style:solid;border-width:5px 0 5px 5px;border-color:transparent transparent transparent currentColor;content:'';display:inline-block;position:absolute;top:50%;right:16px;transform:translateY(-50%)}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}[dir=rtl] .mat-menu-item-submenu-trigger::after{right:auto;left:16px;transform:rotateY(180deg) translateY(-50%)}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matMenu',\n                    animations: [\n                        matMenuAnimations.transformMenu,\n                        matMenuAnimations.fadeInItems\n                    ],\n                    providers: [\n                        { provide: MAT_MENU_PANEL, useExisting: MatMenu },\n                        { provide: MatMenu, useExisting: _MatMenu }\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    _MatMenu.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_DEFAULT_OPTIONS,] }] }\n    ]; };\n    return _MatMenu;\n}(MatMenu));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that determines the scroll handling while the menu is open.\n * @type {?}\n */\nvar MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    function () { return overlay.scrollStrategies.reposition(); });\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nvar MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Default top padding of the menu panel.\n * @type {?}\n */\nvar MENU_PANEL_TOP_PADDING = 8;\n/**\n * Options for binding a passive event listener.\n * @type {?}\n */\nvar passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\nvar MatMenuTrigger = /** @class */ (function () {\n    function MatMenuTrigger(_overlay, _element, _viewContainerRef, scrollStrategy, _parentMenu, _menuItemInstance, _dir, _focusMonitor) {\n        var _this = this;\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._parentMenu = _parentMenu;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (/**\n         * @return {?}\n         */\n        function () { return _this._openedBy = 'touch'; });\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = null;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /**\n         * Event emitted when the associated menu is opened.\n         */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * \\@breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /**\n         * Event emitted when the associated menu is closed.\n         */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * \\@breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        if (_menuItemInstance) {\n            _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n        }\n        this._scrollStrategy = scrollStrategy;\n    }\n    Object.defineProperty(MatMenuTrigger.prototype, \"_deprecatedMatMenuTriggerFor\", {\n        /**\n         * @deprecated\n         * @breaking-change 8.0.0\n         */\n        get: /**\n         * @deprecated\n         * \\@breaking-change 8.0.0\n         * @return {?}\n         */\n        function () { return this.menu; },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this.menu = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMenuTrigger.prototype, \"menu\", {\n        /** References the menu instance that the trigger is associated with. */\n        get: /**\n         * References the menu instance that the trigger is associated with.\n         * @return {?}\n         */\n        function () { return this._menu; },\n        set: /**\n         * @param {?} menu\n         * @return {?}\n         */\n        function (menu) {\n            var _this = this;\n            if (menu === this._menu) {\n                return;\n            }\n            this._menu = menu;\n            this._menuCloseSubscription.unsubscribe();\n            if (menu) {\n                this._menuCloseSubscription = menu.close.asObservable().subscribe((/**\n                 * @param {?} reason\n                 * @return {?}\n                 */\n                function (reason) {\n                    _this._destroyMenu();\n                    // If a click closed the menu, we should close the entire chain of nested menus.\n                    if ((reason === 'click' || reason === 'tab') && _this._parentMenu) {\n                        _this._parentMenu.closed.emit(reason);\n                    }\n                }));\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatMenuTrigger.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        this._checkMenu();\n        this._handleHover();\n    };\n    /**\n     * @return {?}\n     */\n    MatMenuTrigger.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    };\n    Object.defineProperty(MatMenuTrigger.prototype, \"menuOpen\", {\n        /** Whether the menu is open. */\n        get: /**\n         * Whether the menu is open.\n         * @return {?}\n         */\n        function () {\n            return this._menuOpen;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatMenuTrigger.prototype, \"dir\", {\n        /** The text direction of the containing app. */\n        get: /**\n         * The text direction of the containing app.\n         * @return {?}\n         */\n        function () {\n            return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    /**\n     * Whether the menu triggers a sub-menu or a top-level one.\n     * @return {?}\n     */\n    MatMenuTrigger.prototype.triggersSubmenu = /**\n     * Whether the menu triggers a sub-menu or a top-level one.\n     * @return {?}\n     */\n    function () {\n        return !!(this._menuItemInstance && this._parentMenu);\n    };\n    /** Toggles the menu between the open and closed states. */\n    /**\n     * Toggles the menu between the open and closed states.\n     * @return {?}\n     */\n    MatMenuTrigger.prototype.toggleMenu = /**\n     * Toggles the menu between the open and closed states.\n     * @return {?}\n     */\n    function () {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    };\n    /** Opens the menu. */\n    /**\n     * Opens the menu.\n     * @return {?}\n     */\n    MatMenuTrigger.prototype.openMenu = /**\n     * Opens the menu.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._menuOpen) {\n            return;\n        }\n        this._checkMenu();\n        /** @type {?} */\n        var overlayRef = this._createOverlay();\n        /** @type {?} */\n        var overlayConfig = overlayRef.getConfig();\n        this._setPosition((/** @type {?} */ (overlayConfig.positionStrategy)));\n        overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() :\n            this.menu.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n        if (this.menu.lazyContent) {\n            this.menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe((/**\n         * @return {?}\n         */\n        function () { return _this.closeMenu(); }));\n        this._initMenu();\n        if (this.menu instanceof MatMenu) {\n            this.menu._startAnimation();\n        }\n    };\n    /** Closes the menu. */\n    /**\n     * Closes the menu.\n     * @return {?}\n     */\n    MatMenuTrigger.prototype.closeMenu = /**\n     * Closes the menu.\n     * @return {?}\n     */\n    function () {\n        this.menu.close.emit();\n    };\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    /**\n     * Focuses the menu trigger.\n     * @param {?=} origin Source of the menu trigger's focus.\n     * @return {?}\n     */\n    MatMenuTrigger.prototype.focus = /**\n     * Focuses the menu trigger.\n     * @param {?=} origin Source of the menu trigger's focus.\n     * @return {?}\n     */\n    function (origin) {\n        if (origin === void 0) { origin = 'program'; }\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element, origin);\n        }\n        else {\n            this._element.nativeElement.focus();\n        }\n    };\n    /** Closes the menu and does the necessary cleanup. */\n    /**\n     * Closes the menu and does the necessary cleanup.\n     * @private\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._destroyMenu = /**\n     * Closes the menu and does the necessary cleanup.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        /** @type {?} */\n        var menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        if (menu instanceof MatMenu) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                function (event) { return event.toState === 'void'; })), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: (/**\n                     * @return {?}\n                     */\n                    function () { return (/** @type {?} */ (menu.lazyContent)).detach(); }),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: (/**\n                     * @return {?}\n                     */\n                    function () { return _this._resetMenu(); })\n                });\n            }\n            else {\n                this._resetMenu();\n            }\n        }\n        else {\n            this._resetMenu();\n            if (menu.lazyContent) {\n                menu.lazyContent.detach();\n            }\n        }\n    };\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     * @private\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._initMenu = /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n        this.menu.direction = this.dir;\n        this._setMenuElevation();\n        this._setIsMenuOpen(true);\n        this.menu.focusFirstItem(this._openedBy || 'program');\n    };\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    /**\n     * Updates the menu elevation based on the amount of parent menus that it has.\n     * @private\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._setMenuElevation = /**\n     * Updates the menu elevation based on the amount of parent menus that it has.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this.menu.setElevation) {\n            /** @type {?} */\n            var depth = 0;\n            /** @type {?} */\n            var parentMenu = this.menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            this.menu.setElevation(depth);\n        }\n    };\n    /**\n     * This method resets the menu when it's closed, most importantly restoring\n     * focus to the menu trigger if the menu was opened via the keyboard.\n     */\n    /**\n     * This method resets the menu when it's closed, most importantly restoring\n     * focus to the menu trigger if the menu was opened via the keyboard.\n     * @private\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._resetMenu = /**\n     * This method resets the menu when it's closed, most importantly restoring\n     * focus to the menu trigger if the menu was opened via the keyboard.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._setIsMenuOpen(false);\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (this.restoreFocus) {\n            if (!this._openedBy) {\n                // Note that the focus style will show up both for `program` and\n                // `keyboard` so we don't have to specify which one it is.\n                this.focus();\n            }\n            else if (!this.triggersSubmenu()) {\n                this.focus(this._openedBy);\n            }\n        }\n        this._openedBy = null;\n    };\n    // set state rather than toggle to support triggers sharing a menu\n    // set state rather than toggle to support triggers sharing a menu\n    /**\n     * @private\n     * @param {?} isOpen\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._setIsMenuOpen = \n    // set state rather than toggle to support triggers sharing a menu\n    /**\n     * @private\n     * @param {?} isOpen\n     * @return {?}\n     */\n    function (isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n        if (this.triggersSubmenu()) {\n            this._menuItemInstance._highlighted = isOpen;\n        }\n    };\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     */\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     * @private\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._checkMenu = /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (!this.menu) {\n            throwMatMenuMissingError();\n        }\n    };\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     * @private\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._createOverlay = /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (!this._overlayRef) {\n            /** @type {?} */\n            var config = this._getOverlayConfig();\n            this._subscribeToPositions((/** @type {?} */ (config.positionStrategy)));\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    };\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @private\n     * @return {?} OverlayConfig\n     */\n    MatMenuTrigger.prototype._getOverlayConfig = /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @private\n     * @return {?} OverlayConfig\n     */\n    function () {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    };\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._subscribeToPositions = /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n    function (position) {\n        var _this = this;\n        if (this.menu.setPositionClasses) {\n            position.positionChanges.subscribe((/**\n             * @param {?} change\n             * @return {?}\n             */\n            function (change) {\n                /** @type {?} */\n                var posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                /** @type {?} */\n                var posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                (/** @type {?} */ (_this.menu.setPositionClasses))(posX, posY);\n            }));\n        }\n    };\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @private\n     * @param {?} positionStrategy Strategy whose position to update.\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._setPosition = /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @private\n     * @param {?} positionStrategy Strategy whose position to update.\n     * @return {?}\n     */\n    function (positionStrategy) {\n        var _a = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'], originX = _a[0], originFallbackX = _a[1];\n        var _b = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'], overlayY = _b[0], overlayFallbackY = _b[1];\n        var _c = [overlayY, overlayFallbackY], originY = _c[0], originFallbackY = _c[1];\n        var _d = [originX, originFallbackX], overlayX = _d[0], overlayFallbackX = _d[1];\n        /** @type {?} */\n        var offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n        }\n        else if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX: originX, originY: originY, overlayX: overlayX, overlayY: overlayY, offsetY: offsetY },\n            { originX: originFallbackX, originY: originY, overlayX: overlayFallbackX, overlayY: overlayY, offsetY: offsetY },\n            {\n                originX: originX,\n                originY: originFallbackY,\n                overlayX: overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    };\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    /**\n     * Returns a stream that emits whenever an action that should close the menu occurs.\n     * @private\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._menuClosingActions = /**\n     * Returns a stream that emits whenever an action that should close the menu occurs.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var backdrop = (/** @type {?} */ (this._overlayRef)).backdropClick();\n        /** @type {?} */\n        var detachments = (/** @type {?} */ (this._overlayRef)).detachments();\n        /** @type {?} */\n        var parentClose = this._parentMenu ? this._parentMenu.closed : of();\n        /** @type {?} */\n        var hover = this._parentMenu ? this._parentMenu._hovered().pipe(filter((/**\n         * @param {?} active\n         * @return {?}\n         */\n        function (active) { return active !== _this._menuItemInstance; })), filter((/**\n         * @return {?}\n         */\n        function () { return _this._menuOpen; }))) : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    };\n    /** Handles mouse presses on the trigger. */\n    /**\n     * Handles mouse presses on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._handleMousedown = /**\n     * Handles mouse presses on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : null;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    };\n    /** Handles key presses on the trigger. */\n    /**\n     * Handles key presses on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._handleKeydown = /**\n     * Handles key presses on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var keyCode = event.keyCode;\n        if (this.triggersSubmenu() && ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.openMenu();\n        }\n    };\n    /** Handles click events on the trigger. */\n    /**\n     * Handles click events on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._handleClick = /**\n     * Handles click events on the trigger.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    };\n    /** Handles the cases where the user hovers over the trigger. */\n    /**\n     * Handles the cases where the user hovers over the trigger.\n     * @private\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._handleHover = /**\n     * Handles the cases where the user hovers over the trigger.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu()) {\n            return;\n        }\n        this._hoverSubscription = this._parentMenu._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter((/**\n         * @param {?} active\n         * @return {?}\n         */\n        function (active) { return active === _this._menuItemInstance && !active.disabled; })), delay(0, asapScheduler))\n            .subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (_this.menu instanceof MatMenu && _this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                _this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(_this._parentMenu._hovered()))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                function () { return _this.openMenu(); }));\n            }\n            else {\n                _this.openMenu();\n            }\n        }));\n    };\n    /** Gets the portal that should be attached to the overlay. */\n    /**\n     * Gets the portal that should be attached to the overlay.\n     * @private\n     * @return {?}\n     */\n    MatMenuTrigger.prototype._getPortal = /**\n     * Gets the portal that should be attached to the overlay.\n     * @private\n     * @return {?}\n     */\n    function () {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    };\n    MatMenuTrigger.decorators = [\n        { type: Directive, args: [{\n                    selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\",\n                    host: {\n                        'aria-haspopup': 'true',\n                        '[attr.aria-expanded]': 'menuOpen || null',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(click)': '_handleClick($event)',\n                    },\n                    exportAs: 'matMenuTrigger'\n                },] },\n    ];\n    /** @nocollapse */\n    MatMenuTrigger.ctorParameters = function () { return [\n        { type: Overlay },\n        { type: ElementRef },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_MENU_SCROLL_STRATEGY,] }] },\n        { type: MatMenu, decorators: [{ type: Optional }] },\n        { type: MatMenuItem, decorators: [{ type: Optional }, { type: Self }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: FocusMonitor }\n    ]; };\n    MatMenuTrigger.propDecorators = {\n        _deprecatedMatMenuTriggerFor: [{ type: Input, args: ['mat-menu-trigger-for',] }],\n        menu: [{ type: Input, args: ['matMenuTriggerFor',] }],\n        menuData: [{ type: Input, args: ['matMenuTriggerData',] }],\n        restoreFocus: [{ type: Input, args: ['matMenuTriggerRestoreFocus',] }],\n        menuOpened: [{ type: Output }],\n        onMenuOpen: [{ type: Output }],\n        menuClosed: [{ type: Output }],\n        onMenuClose: [{ type: Output }]\n    };\n    return MatMenuTrigger;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Used by both the current `MatMenuModule` and the MDC `MatMenuModule`\n * to declare the menu-related directives.\n */\nvar _MatMenuDirectivesModule = /** @class */ (function () {\n    function _MatMenuDirectivesModule() {\n    }\n    _MatMenuDirectivesModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [MatMenuTrigger, MatMenuContent, MatCommonModule],\n                    declarations: [MatMenuTrigger, MatMenuContent],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n                },] },\n    ];\n    return _MatMenuDirectivesModule;\n}());\nvar MatMenuModule = /** @class */ (function () {\n    function MatMenuModule() {\n    }\n    MatMenuModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        CommonModule,\n                        MatCommonModule,\n                        MatRippleModule,\n                        OverlayModule,\n                        _MatMenuDirectivesModule,\n                    ],\n                    exports: [_MatMenu, MatMenuItem, _MatMenuDirectivesModule],\n                    declarations: [_MatMenu, MatMenuItem],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n                },] },\n    ];\n    return MatMenuModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatMenu, MAT_MENU_DEFAULT_OPTIONS, _MatMenu, _MatMenuBase, MatMenuItem, MatMenuTrigger, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_PANEL, _MatMenuDirectivesModule, MatMenuModule, matMenuAnimations, fadeInItems, transformMenu, MatMenuContent, MAT_MENU_DEFAULT_OPTIONS_FACTORY as ɵa23, MAT_MENU_SCROLL_STRATEGY_FACTORY as ɵb23, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER as ɵc23 };\n//# sourceMappingURL=menu.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, EventEmitter, Input, isDevMode, Output, Injectable, SkipSelf, Optional, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewEncapsulation, Inject, ɵɵdefineInjectable } from '@angular/core';\nimport { mixinDisabled, mixinInitialized, AnimationCurves, AnimationDurations } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { animate, state, style, transition, trigger, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(\"Cannot have two MatSortables with the same id (\" + id + \").\");\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(\"MatSortHeader must be placed within a parent element with the MatSort directive.\");\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderMissingIdError() {\n    return Error(\"MatSortHeader must be provided with a unique id.\");\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(direction + \" is not a valid sort direction ('asc' or 'desc').\");\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatSort.\n/**\n * \\@docs-private\n */\nvar \n// Boilerplate for applying mixins to MatSort.\n/**\n * \\@docs-private\n */\nMatSortBase = /** @class */ (function () {\n    function MatSortBase() {\n    }\n    return MatSortBase;\n}());\n/** @type {?} */\nvar _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\nvar MatSort = /** @class */ (function (_super) {\n    __extends(MatSort, _super);\n    function MatSort() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Collection of all registered sortables that this directive manages.\n         */\n        _this.sortables = new Map();\n        /**\n         * Used to notify any child components listening to state changes.\n         */\n        _this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        _this.start = 'asc';\n        _this._direction = '';\n        /**\n         * Event emitted when the user changes either the active sort or sort direction.\n         */\n        _this.sortChange = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(MatSort.prototype, \"direction\", {\n        /** The sort direction of the currently active MatSortable. */\n        get: /**\n         * The sort direction of the currently active MatSortable.\n         * @return {?}\n         */\n        function () { return this._direction; },\n        set: /**\n         * @param {?} direction\n         * @return {?}\n         */\n        function (direction) {\n            if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n                throw getSortInvalidDirectionError(direction);\n            }\n            this._direction = direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSort.prototype, \"disableClear\", {\n        /**\n         * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n         * May be overriden by the MatSortable's disable clear input.\n         */\n        get: /**\n         * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n         * May be overriden by the MatSortable's disable clear input.\n         * @return {?}\n         */\n        function () { return this._disableClear; },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) { this._disableClear = coerceBooleanProperty(v); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    MatSort.prototype.register = /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    function (sortable) {\n        if (!sortable.id) {\n            throw getSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id)) {\n            throw getSortDuplicateSortableIdError(sortable.id);\n        }\n        this.sortables.set(sortable.id, sortable);\n    };\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    MatSort.prototype.deregister = /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    function (sortable) {\n        this.sortables.delete(sortable.id);\n    };\n    /** Sets the active sort id and determines the new sort direction. */\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n    MatSort.prototype.sort = /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n    function (sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    };\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n    MatSort.prototype.getNextSortDirection = /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n    function (sortable) {\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        /** @type {?} */\n        var disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n        /** @type {?} */\n        var sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        /** @type {?} */\n        var nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    };\n    /**\n     * @return {?}\n     */\n    MatSort.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._markInitialized();\n    };\n    /**\n     * @return {?}\n     */\n    MatSort.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n    function () {\n        this._stateChanges.next();\n    };\n    /**\n     * @return {?}\n     */\n    MatSort.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._stateChanges.complete();\n    };\n    MatSort.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matSort]',\n                    exportAs: 'matSort',\n                    inputs: ['disabled: matSortDisabled']\n                },] },\n    ];\n    MatSort.propDecorators = {\n        active: [{ type: Input, args: ['matSortActive',] }],\n        start: [{ type: Input, args: ['matSortStart',] }],\n        direction: [{ type: Input, args: ['matSortDirection',] }],\n        disableClear: [{ type: Input, args: ['matSortDisableClear',] }],\n        sortChange: [{ type: Output, args: ['matSortChange',] }]\n    };\n    return MatSort;\n}(_MatSortMixinBase));\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start, disableClear) {\n    /** @type {?} */\n    var sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n    AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * \\@docs-private\n * @type {?}\n */\nvar matSortAnimations = {\n    /**\n     * Animation that moves the sort indicator.\n     */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that rotates the left pointer of the indicator based on the sorting direction.\n     */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that rotates the right pointer of the indicator based on the sorting direction.\n     */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n     * Animation that controls the arrow opacity.\n     */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: .54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(-25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(25%)' })\n        ]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(25%)' }),\n            style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\n            style({ transform: 'translateY(0)' }),\n            style({ transform: 'translateY(-25%)' })\n        ]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /**\n     * Necessary trigger that calls animate on children animations.\n     */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [\n            query('@*', animateChild(), { optional: true })\n        ])\n    ]),\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nvar MatSortHeaderIntl = /** @class */ (function () {\n    function MatSortHeaderIntl() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * ARIA label for the sorting button.\n         */\n        this.sortButtonLabel = (/**\n         * @param {?} id\n         * @return {?}\n         */\n        function (id) {\n            return \"Change sorting for \" + id;\n        });\n    }\n    MatSortHeaderIntl.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ MatSortHeaderIntl.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\n    return MatSortHeaderIntl;\n}());\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nvar MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to the sort header.\n/**\n * \\@docs-private\n */\nvar \n// Boilerplate for applying mixins to the sort header.\n/**\n * \\@docs-private\n */\nMatSortHeaderBase = /** @class */ (function () {\n    function MatSortHeaderBase() {\n    }\n    return MatSortHeaderBase;\n}());\n/** @type {?} */\nvar _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nvar MatSortHeader = /** @class */ (function (_super) {\n    __extends(MatSortHeader, _super);\n    function MatSortHeader(_intl, changeDetectorRef, _sort, _columnDef) {\n        var _this = \n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        _super.call(this) || this;\n        _this._intl = _intl;\n        _this._sort = _sort;\n        _this._columnDef = _columnDef;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        _this._showIndicatorHint = false;\n        /**\n         * The direction the arrow should be facing according to the current state.\n         */\n        _this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        _this._disableViewStateAnimation = false;\n        /**\n         * Sets the position of the arrow that displays when sorted.\n         */\n        _this.arrowPosition = 'after';\n        if (!_sort) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        _this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n            .subscribe((/**\n         * @return {?}\n         */\n        function () {\n            if (_this._isSorted()) {\n                _this._updateArrowDirection();\n            }\n            // If this header was recently active and now no longer sorted, animate away the arrow.\n            if (!_this._isSorted() && _this._viewState && _this._viewState.toState === 'active') {\n                _this._disableViewStateAnimation = false;\n                _this._setAnimationTransitionState({ fromState: 'active', toState: _this._arrowDirection });\n            }\n            changeDetectorRef.markForCheck();\n        }));\n        return _this;\n    }\n    Object.defineProperty(MatSortHeader.prototype, \"disableClear\", {\n        /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n        get: /**\n         * Overrides the disable clear value of the containing MatSort for this MatSortable.\n         * @return {?}\n         */\n        function () { return this._disableClear; },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) { this._disableClear = coerceBooleanProperty(v); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatSortHeader.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\n        this._sort.register(this);\n    };\n    /**\n     * @return {?}\n     */\n    MatSortHeader.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    };\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     * @param {?} visible\n     * @return {?}\n     */\n    MatSortHeader.prototype._setIndicatorHintVisible = /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     * @param {?} visible\n     * @return {?}\n     */\n    function (visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    };\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     * @param {?} viewState\n     * @return {?}\n     */\n    MatSortHeader.prototype._setAnimationTransitionState = /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     * @param {?} viewState\n     * @return {?}\n     */\n    function (viewState) {\n        this._viewState = viewState;\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    };\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    /**\n     * Triggers the sort on this sort header and removes the indicator hint.\n     * @return {?}\n     */\n    MatSortHeader.prototype._handleClick = /**\n     * Triggers the sort on this sort header and removes the indicator hint.\n     * @return {?}\n     */\n    function () {\n        if (this._isDisabled()) {\n            return;\n        }\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n        // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n        // the direction it is facing.\n        /** @type {?} */\n        var viewState = this._isSorted() ?\n            { fromState: this._arrowDirection, toState: 'active' } :\n            { fromState: 'active', toState: this._arrowDirection };\n        this._setAnimationTransitionState(viewState);\n        this._showIndicatorHint = false;\n    };\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n    MatSortHeader.prototype._isSorted = /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n    function () {\n        return this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    };\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    /**\n     * Returns the animation state for the arrow direction (indicator and pointers).\n     * @return {?}\n     */\n    MatSortHeader.prototype._getArrowDirectionState = /**\n     * Returns the animation state for the arrow direction (indicator and pointers).\n     * @return {?}\n     */\n    function () {\n        return \"\" + (this._isSorted() ? 'active-' : '') + this._arrowDirection;\n    };\n    /** Returns the arrow position state (opacity, translation). */\n    /**\n     * Returns the arrow position state (opacity, translation).\n     * @return {?}\n     */\n    MatSortHeader.prototype._getArrowViewState = /**\n     * Returns the arrow position state (opacity, translation).\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var fromState = this._viewState.fromState;\n        return (fromState ? fromState + \"-to-\" : '') + this._viewState.toState;\n    };\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     * @return {?}\n     */\n    MatSortHeader.prototype._updateArrowDirection = /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     * @return {?}\n     */\n    function () {\n        this._arrowDirection = this._isSorted() ?\n            this._sort.direction :\n            (this.start || this._sort.start);\n    };\n    /**\n     * @return {?}\n     */\n    MatSortHeader.prototype._isDisabled = /**\n     * @return {?}\n     */\n    function () {\n        return this._sort.disabled || this.disabled;\n    };\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * @return {?}\n     */\n    MatSortHeader.prototype._getAriaSortAttribute = /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * @return {?}\n     */\n    function () {\n        if (!this._isSorted()) {\n            return null;\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    };\n    /** Whether the arrow inside the sort header should be rendered. */\n    /**\n     * Whether the arrow inside the sort header should be rendered.\n     * @return {?}\n     */\n    MatSortHeader.prototype._renderArrow = /**\n     * Whether the arrow inside the sort header should be rendered.\n     * @return {?}\n     */\n    function () {\n        return !this._isDisabled() || this._isSorted();\n    };\n    MatSortHeader.decorators = [\n        { type: Component, args: [{selector: '[mat-sort-header]',\n                    exportAs: 'matSortHeader',\n                    template: \"<div class=\\\"mat-sort-header-container\\\" [class.mat-sort-header-sorted]=\\\"_isSorted()\\\" [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"><button class=\\\"mat-sort-header-button\\\" type=\\\"button\\\" [attr.disabled]=\\\"_isDisabled() || null\\\" [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\" (focus)=\\\"_setIndicatorHintVisible(true)\\\" (blur)=\\\"_setIndicatorHintVisible(false)\\\"><ng-content></ng-content></button><div class=\\\"mat-sort-header-arrow\\\" *ngIf=\\\"_renderArrow()\\\" [@arrowOpacity]=\\\"_getArrowViewState()\\\" [@arrowPosition]=\\\"_getArrowViewState()\\\" [@allowChildren]=\\\"_getArrowDirectionState()\\\" (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\" (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\"><div class=\\\"mat-sort-header-stem\\\"></div><div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\"><div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-middle\\\"></div></div></div></div>\",\n                    styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}@media (-ms-high-contrast:active){.mat-sort-header-stem{width:0;border-left:solid 2px}}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}@media (-ms-high-contrast:active){.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\n                    host: {\n                        '(click)': '_handleClick()',\n                        '(mouseenter)': '_setIndicatorHintVisible(true)',\n                        '(longpress)': '_setIndicatorHintVisible(true)',\n                        '(mouseleave)': '_setIndicatorHintVisible(false)',\n                        '[attr.aria-sort]': '_getAriaSortAttribute()',\n                        '[class.mat-sort-header-disabled]': '_isDisabled()',\n                    },\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    inputs: ['disabled'],\n                    animations: [\n                        matSortAnimations.indicator,\n                        matSortAnimations.leftPointer,\n                        matSortAnimations.rightPointer,\n                        matSortAnimations.arrowOpacity,\n                        matSortAnimations.arrowPosition,\n                        matSortAnimations.allowChildren,\n                    ]\n                },] },\n    ];\n    /** @nocollapse */\n    MatSortHeader.ctorParameters = function () { return [\n        { type: MatSortHeaderIntl },\n        { type: ChangeDetectorRef },\n        { type: MatSort, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Inject, args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: Optional }] }\n    ]; };\n    MatSortHeader.propDecorators = {\n        id: [{ type: Input, args: ['mat-sort-header',] }],\n        arrowPosition: [{ type: Input }],\n        start: [{ type: Input }],\n        disableClear: [{ type: Input }]\n    };\n    return MatSortHeader;\n}(_MatSortHeaderMixinBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar MatSortModule = /** @class */ (function () {\n    function MatSortModule() {\n    }\n    MatSortModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CommonModule],\n                    exports: [MatSort, MatSortHeader],\n                    declarations: [MatSort, MatSortHeader],\n                    providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n                },] },\n    ];\n    return MatSortModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSortModule, MatSortHeader, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER, MatSort, matSortAnimations };\n//# sourceMappingURL=sort.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { CDK_TABLE_TEMPLATE, CdkTable, CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef, CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation, Directive, ElementRef, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { BehaviorSubject, combineLatest, merge, of, Subscription, Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nvar MatTable = /** @class */ (function (_super) {\n    __extends(MatTable, _super);\n    function MatTable() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Overrides the sticky CSS class set by the `CdkTable`.\n         */\n        _this.stickyCssClass = 'mat-table-sticky';\n        return _this;\n    }\n    MatTable.decorators = [\n        { type: Component, args: [{selector: 'mat-table, table[mat-table]',\n                    exportAs: 'matTable',\n                    template: CDK_TABLE_TEMPLATE,\n                    styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-footer-row,mat-row{min-height:48px}mat-footer-row,mat-header-row,mat-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-footer-row::after,mat-header-row::after,mat-row::after{display:inline-block;min-height:inherit;content:''}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-footer-cell:last-of-type,mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-footer-cell,mat-header-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-footer-row,tr.mat-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}td.mat-cell,td.mat-footer-cell,th.mat-header-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type,th.mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type,[dir=rtl] th.mat-header-cell:first-of-type{padding-left:0;padding-right:24px}td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type,th.mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type,[dir=rtl] th.mat-header-cell:last-of-type{padding-right:0;padding-left:24px}\"],\n                    host: {\n                        'class': 'mat-table',\n                    },\n                    providers: [{ provide: CdkTable, useExisting: MatTable }],\n                    encapsulation: ViewEncapsulation.None,\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                },] },\n    ];\n    return MatTable;\n}(CdkTable));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nvar MatCellDef = /** @class */ (function (_super) {\n    __extends(MatCellDef, _super);\n    function MatCellDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatCellDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matCellDef]',\n                    providers: [{ provide: CdkCellDef, useExisting: MatCellDef }]\n                },] },\n    ];\n    return MatCellDef;\n}(CdkCellDef));\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nvar MatHeaderCellDef = /** @class */ (function (_super) {\n    __extends(MatHeaderCellDef, _super);\n    function MatHeaderCellDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatHeaderCellDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matHeaderCellDef]',\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]\n                },] },\n    ];\n    return MatHeaderCellDef;\n}(CdkHeaderCellDef));\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nvar MatFooterCellDef = /** @class */ (function (_super) {\n    __extends(MatFooterCellDef, _super);\n    function MatFooterCellDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatFooterCellDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matFooterCellDef]',\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]\n                },] },\n    ];\n    return MatFooterCellDef;\n}(CdkFooterCellDef));\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nvar MatColumnDef = /** @class */ (function (_super) {\n    __extends(MatColumnDef, _super);\n    function MatColumnDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatColumnDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matColumnDef]',\n                    providers: [\n                        { provide: CdkColumnDef, useExisting: MatColumnDef },\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\n                    ],\n                },] },\n    ];\n    MatColumnDef.propDecorators = {\n        name: [{ type: Input, args: ['matColumnDef',] }],\n        sticky: [{ type: Input }],\n        stickyEnd: [{ type: Input }]\n    };\n    return MatColumnDef;\n}(CdkColumnDef));\n/**\n * Header cell template container that adds the right classes and role.\n */\nvar MatHeaderCell = /** @class */ (function (_super) {\n    __extends(MatHeaderCell, _super);\n    function MatHeaderCell(columnDef, elementRef) {\n        var _this = _super.call(this, columnDef, elementRef) || this;\n        elementRef.nativeElement.classList.add(\"mat-column-\" + columnDef.cssClassFriendlyName);\n        return _this;\n    }\n    MatHeaderCell.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-header-cell, th[mat-header-cell]',\n                    host: {\n                        'class': 'mat-header-cell',\n                        'role': 'columnheader',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    MatHeaderCell.ctorParameters = function () { return [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ]; };\n    return MatHeaderCell;\n}(CdkHeaderCell));\n/**\n * Footer cell template container that adds the right classes and role.\n */\nvar MatFooterCell = /** @class */ (function (_super) {\n    __extends(MatFooterCell, _super);\n    function MatFooterCell(columnDef, elementRef) {\n        var _this = _super.call(this, columnDef, elementRef) || this;\n        elementRef.nativeElement.classList.add(\"mat-column-\" + columnDef.cssClassFriendlyName);\n        return _this;\n    }\n    MatFooterCell.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\n                    host: {\n                        'class': 'mat-footer-cell',\n                        'role': 'gridcell',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    MatFooterCell.ctorParameters = function () { return [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ]; };\n    return MatFooterCell;\n}(CdkFooterCell));\n/**\n * Cell template container that adds the right classes and role.\n */\nvar MatCell = /** @class */ (function (_super) {\n    __extends(MatCell, _super);\n    function MatCell(columnDef, elementRef) {\n        var _this = _super.call(this, columnDef, elementRef) || this;\n        elementRef.nativeElement.classList.add(\"mat-column-\" + columnDef.cssClassFriendlyName);\n        return _this;\n    }\n    MatCell.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-cell, td[mat-cell]',\n                    host: {\n                        'class': 'mat-cell',\n                        'role': 'gridcell',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    MatCell.ctorParameters = function () { return [\n        { type: CdkColumnDef },\n        { type: ElementRef }\n    ]; };\n    return MatCell;\n}(CdkCell));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nvar MatHeaderRowDef = /** @class */ (function (_super) {\n    __extends(MatHeaderRowDef, _super);\n    function MatHeaderRowDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatHeaderRowDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matHeaderRowDef]',\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                    inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n                },] },\n    ];\n    return MatHeaderRowDef;\n}(CdkHeaderRowDef));\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nvar MatFooterRowDef = /** @class */ (function (_super) {\n    __extends(MatFooterRowDef, _super);\n    function MatFooterRowDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatFooterRowDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matFooterRowDef]',\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                    inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n                },] },\n    ];\n    return MatFooterRowDef;\n}(CdkFooterRowDef));\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n * @template T\n */\nvar MatRowDef = /** @class */ (function (_super) {\n    __extends(MatRowDef, _super);\n    function MatRowDef() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatRowDef.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matRowDef]',\n                    providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                    inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n                },] },\n    ];\n    return MatRowDef;\n}(CdkRowDef));\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nvar MatHeaderRow = /** @class */ (function (_super) {\n    __extends(MatHeaderRow, _super);\n    function MatHeaderRow() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatHeaderRow.decorators = [\n        { type: Component, args: [{selector: 'mat-header-row, tr[mat-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matHeaderRow',\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n                },] },\n    ];\n    return MatHeaderRow;\n}(CdkHeaderRow));\n/**\n * Footer template container that contains the cell outlet. Adds the right class and role.\n */\nvar MatFooterRow = /** @class */ (function (_super) {\n    __extends(MatFooterRow, _super);\n    function MatFooterRow() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatFooterRow.decorators = [\n        { type: Component, args: [{selector: 'mat-footer-row, tr[mat-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matFooterRow',\n                    providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n                },] },\n    ];\n    return MatFooterRow;\n}(CdkFooterRow));\n/**\n * Data row template container that contains the cell outlet. Adds the right class and role.\n */\nvar MatRow = /** @class */ (function (_super) {\n    __extends(MatRow, _super);\n    function MatRow() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatRow.decorators = [\n        { type: Component, args: [{selector: 'mat-row, tr[mat-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRow',\n                    providers: [{ provide: CdkRow, useExisting: MatRow }],\n                },] },\n    ];\n    return MatRow;\n}(CdkRow));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n * @template T\n */\nvar MatTextColumn = /** @class */ (function (_super) {\n    __extends(MatTextColumn, _super);\n    function MatTextColumn() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MatTextColumn.decorators = [\n        { type: Component, args: [{selector: 'mat-text-column',\n                    template: \"\\n    <ng-container matColumnDef>\\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\\\"justify\\\">\\n        {{headerText}}\\n      </th>\\n      <td mat-cell *matCellDef=\\\"let data\\\" [style.text-align]=\\\"justify\\\">\\n        {{dataAccessor(data, name)}}\\n      </td>\\n    </ng-container>\\n  \",\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                },] },\n    ];\n    return MatTextColumn;\n}(CdkTextColumn));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatTextColumn,\n];\nvar MatTableModule = /** @class */ (function () {\n    function MatTableModule() {\n    }\n    MatTableModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        CdkTableModule,\n                        CommonModule,\n                        MatCommonModule,\n                    ],\n                    exports: EXPORTED_DECLARATIONS,\n                    declarations: EXPORTED_DECLARATIONS,\n                },] },\n    ];\n    return MatTableModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n * @type {?}\n */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n * @template T\n */\nvar  /**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n * @template T\n */\nMatTableDataSource = /** @class */ (function (_super) {\n    __extends(MatTableDataSource, _super);\n    function MatTableDataSource(initialData) {\n        if (initialData === void 0) { initialData = []; }\n        var _this = _super.call(this) || this;\n        /**\n         * Stream emitting render data to the table (depends on ordered data changes).\n         */\n        _this._renderData = new BehaviorSubject([]);\n        /**\n         * Stream that emits when a new filter string is set on the data source.\n         */\n        _this._filter = new BehaviorSubject('');\n        /**\n         * Used to react to internal changes of the paginator that are made by the data source itself.\n         */\n        _this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        _this._renderChangesSubscription = Subscription.EMPTY;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        _this.sortingDataAccessor = (/**\n         * @param {?} data\n         * @param {?} sortHeaderId\n         * @return {?}\n         */\n        function (data, sortHeaderId) {\n            /** @type {?} */\n            var value = ((/** @type {?} */ (data)))[sortHeaderId];\n            if (_isNumberValue(value)) {\n                /** @type {?} */\n                var numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        });\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        _this.sortData = (/**\n         * @param {?} data\n         * @param {?} sort\n         * @return {?}\n         */\n        function (data, sort) {\n            /** @type {?} */\n            var active = sort.active;\n            /** @type {?} */\n            var direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((/**\n             * @param {?} a\n             * @param {?} b\n             * @return {?}\n             */\n            function (a, b) {\n                /** @type {?} */\n                var valueA = _this.sortingDataAccessor(a, active);\n                /** @type {?} */\n                var valueB = _this.sortingDataAccessor(b, active);\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come first.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                /** @type {?} */\n                var comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            }));\n        });\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @return Whether the filter matches against the data\n         */\n        _this.filterPredicate = (/**\n         * @param {?} data\n         * @param {?} filter\n         * @return {?}\n         */\n        function (data, filter) {\n            // Transform the data into a lowercase string of all property values.\n            /** @type {?} */\n            var dataStr = Object.keys(data).reduce((/**\n             * @param {?} currentTerm\n             * @param {?} key\n             * @return {?}\n             */\n            function (currentTerm, key) {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + ((/** @type {?} */ (data)))[key] + '◬';\n            }), '').toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            /** @type {?} */\n            var transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        });\n        _this._data = new BehaviorSubject(initialData);\n        _this._updateChangeSubscription();\n        return _this;\n    }\n    Object.defineProperty(MatTableDataSource.prototype, \"data\", {\n        /** Array of data that should be rendered by the table, where each object represents one row. */\n        get: /**\n         * Array of data that should be rendered by the table, where each object represents one row.\n         * @return {?}\n         */\n        function () { return this._data.value; },\n        set: /**\n         * @param {?} data\n         * @return {?}\n         */\n        function (data) { this._data.next(data); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTableDataSource.prototype, \"filter\", {\n        /**\n         * Filter term that should be used to filter out objects from the data array. To override how\n         * data objects match to this filter string, provide a custom function for filterPredicate.\n         */\n        get: /**\n         * Filter term that should be used to filter out objects from the data array. To override how\n         * data objects match to this filter string, provide a custom function for filterPredicate.\n         * @return {?}\n         */\n        function () { return this._filter.value; },\n        set: /**\n         * @param {?} filter\n         * @return {?}\n         */\n        function (filter) { this._filter.next(filter); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTableDataSource.prototype, \"sort\", {\n        /**\n         * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n         * emitted by the MatSort will trigger an update to the table's rendered data.\n         */\n        get: /**\n         * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n         * emitted by the MatSort will trigger an update to the table's rendered data.\n         * @return {?}\n         */\n        function () { return this._sort; },\n        set: /**\n         * @param {?} sort\n         * @return {?}\n         */\n        function (sort) {\n            this._sort = sort;\n            this._updateChangeSubscription();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTableDataSource.prototype, \"paginator\", {\n        /**\n         * Instance of the MatPaginator component used by the table to control what page of the data is\n         * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n         * table's rendered data.\n         *\n         * Note that the data source uses the paginator's properties to calculate which page of data\n         * should be displayed. If the paginator receives its properties as template inputs,\n         * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n         * initialized before assigning it to this data source.\n         */\n        get: /**\n         * Instance of the MatPaginator component used by the table to control what page of the data is\n         * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n         * table's rendered data.\n         *\n         * Note that the data source uses the paginator's properties to calculate which page of data\n         * should be displayed. If the paginator receives its properties as template inputs,\n         * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n         * initialized before assigning it to this data source.\n         * @return {?}\n         */\n        function () { return this._paginator; },\n        set: /**\n         * @param {?} paginator\n         * @return {?}\n         */\n        function (paginator) {\n            this._paginator = paginator;\n            this._updateChangeSubscription();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     * @return {?}\n     */\n    MatTableDataSource.prototype._updateChangeSubscription = /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        /** @type {?} */\n        var sortChange = this._sort ?\n            (/** @type {?} */ (merge(this._sort.sortChange, this._sort.initialized))) :\n            of(null);\n        /** @type {?} */\n        var pageChange = this._paginator ?\n            (/** @type {?} */ (merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized))) :\n            of(null);\n        /** @type {?} */\n        var dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        /** @type {?} */\n        var filteredData = combineLatest(dataStream, this._filter)\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        function (_a) {\n            var data = _a[0];\n            return _this._filterData(data);\n        })));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        /** @type {?} */\n        var orderedData = combineLatest(filteredData, sortChange)\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        function (_a) {\n            var data = _a[0];\n            return _this._orderData(data);\n        })));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        /** @type {?} */\n        var paginatedData = combineLatest(orderedData, pageChange)\n            .pipe(map((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        function (_a) {\n            var data = _a[0];\n            return _this._pageData(data);\n        })));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe((/**\n         * @param {?} data\n         * @return {?}\n         */\n        function (data) { return _this._renderData.next(data); }));\n    };\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     */\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    MatTableDataSource.prototype._filterData = /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\n     * as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        var _this = this;\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\n        // May be overridden for customization.\n        this.filteredData =\n            !this.filter ? data : data.filter((/**\n             * @param {?} obj\n             * @return {?}\n             */\n            function (obj) { return _this.filterPredicate(obj, _this.filter); }));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    };\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    MatTableDataSource.prototype._orderData = /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    };\n    /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    MatTableDataSource.prototype._pageData = /**\n     * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        if (!this.paginator) {\n            return data;\n        }\n        /** @type {?} */\n        var startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice().splice(startIndex, this.paginator.pageSize);\n    };\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    MatTableDataSource.prototype._updatePaginator = /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     * @param {?} filteredDataLength\n     * @return {?}\n     */\n    function (filteredDataLength) {\n        var _this = this;\n        Promise.resolve().then((/**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var paginator = _this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                /** @type {?} */\n                var lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                /** @type {?} */\n                var newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    _this._internalPageChanges.next();\n                }\n            }\n        }));\n    };\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * \\@docs-private\n     * @return {?}\n     */\n    MatTableDataSource.prototype.connect = /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () { return this._renderData; };\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * @docs-private\n     */\n    /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * \\@docs-private\n     * @return {?}\n     */\n    MatTableDataSource.prototype.disconnect = /**\n     * Used by the MatTable. Called when it is destroyed. No-op.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () { };\n    return MatTableDataSource;\n}(DataSource));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatTableModule, MatCellDef, MatHeaderCellDef, MatFooterCellDef, MatColumnDef, MatHeaderCell, MatFooterCell, MatCell, MatTable, MatHeaderRowDef, MatFooterRowDef, MatRowDef, MatHeaderRow, MatFooterRow, MatRow, MatTableDataSource, MatTextColumn };\n//# sourceMappingURL=table.es5.js.map\n","<ng-template><div class=\"mat-menu-panel\" [ngClass]=\"_classList\" (keydown)=\"_handleKeydown($event)\" (click)=\"closed.emit('click')\" [@transformMenu]=\"_panelAnimationState\" (@transformMenu.start)=\"_onAnimationStart($event)\" (@transformMenu.done)=\"_onAnimationDone($event)\" tabindex=\"-1\" role=\"menu\"><div class=\"mat-menu-content\"><ng-content></ng-content></div></div></ng-template>","<ng-content></ng-content><div class=\"mat-menu-ripple\" matRipple [matRippleDisabled]=\"disableRipple || disabled\" [matRippleTrigger]=\"_getHostElement()\"></div>","<div class=\"mat-paginator-outer-container\"><div class=\"mat-paginator-container\"><div class=\"mat-paginator-page-size\" *ngIf=\"!hidePageSize\"><div class=\"mat-paginator-page-size-label\">{{_intl.itemsPerPageLabel}}</div><mat-form-field *ngIf=\"_displayedPageSizeOptions.length > 1\" [color]=\"color\" class=\"mat-paginator-page-size-select\"><mat-select [value]=\"pageSize\" [disabled]=\"disabled\" [aria-label]=\"_intl.itemsPerPageLabel\" (selectionChange)=\"_changePageSize($event.value)\"><mat-option *ngFor=\"let pageSizeOption of _displayedPageSizeOptions\" [value]=\"pageSizeOption\">{{pageSizeOption}}</mat-option></mat-select></mat-form-field><div *ngIf=\"_displayedPageSizeOptions.length <= 1\">{{pageSize}}</div></div><div class=\"mat-paginator-range-actions\"><div class=\"mat-paginator-range-label\">{{_intl.getRangeLabel(pageIndex, pageSize, length)}}</div><button mat-icon-button type=\"button\" class=\"mat-paginator-navigation-first\" (click)=\"firstPage()\" [attr.aria-label]=\"_intl.firstPageLabel\" [matTooltip]=\"_intl.firstPageLabel\" [matTooltipDisabled]=\"_previousButtonsDisabled()\" [matTooltipPosition]=\"'above'\" [disabled]=\"_previousButtonsDisabled()\" *ngIf=\"showFirstLastButtons\"><svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\"><path d=\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"/></svg></button> <button mat-icon-button type=\"button\" class=\"mat-paginator-navigation-previous\" (click)=\"previousPage()\" [attr.aria-label]=\"_intl.previousPageLabel\" [matTooltip]=\"_intl.previousPageLabel\" [matTooltipDisabled]=\"_previousButtonsDisabled()\" [matTooltipPosition]=\"'above'\" [disabled]=\"_previousButtonsDisabled()\"><svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/></svg></button> <button mat-icon-button type=\"button\" class=\"mat-paginator-navigation-next\" (click)=\"nextPage()\" [attr.aria-label]=\"_intl.nextPageLabel\" [matTooltip]=\"_intl.nextPageLabel\" [matTooltipDisabled]=\"_nextButtonsDisabled()\" [matTooltipPosition]=\"'above'\" [disabled]=\"_nextButtonsDisabled()\"><svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/></svg></button> <button mat-icon-button type=\"button\" class=\"mat-paginator-navigation-last\" (click)=\"lastPage()\" [attr.aria-label]=\"_intl.lastPageLabel\" [matTooltip]=\"_intl.lastPageLabel\" [matTooltipDisabled]=\"_nextButtonsDisabled()\" [matTooltipPosition]=\"'above'\" [disabled]=\"_nextButtonsDisabled()\" *ngIf=\"showFirstLastButtons\"><svg class=\"mat-paginator-icon\" viewBox=\"0 0 24 24\" focusable=\"false\"><path d=\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"/></svg></button></div></div></div>","\n  <ng-content select=\"caption\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n","<ng-container cdkCellOutlet></ng-container>","<ng-container cdkCellOutlet></ng-container>","<ng-container cdkCellOutlet></ng-container>","\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  ","<div class=\"mat-tooltip\" [ngClass]=\"tooltipClass\" [class.mat-tooltip-handset]=\"(_isHandset | async)?.matches\" [@state]=\"_visibility\" (@state.start)=\"_animationStart()\" (@state.done)=\"_animationDone($event)\">{{message}}</div>","// export what ./public_api exports so we can import with the lib name like this:\r\n// import { ModuleA } from 'libname'\r\nexport * from './public_api';\r\n","export { PsExceptionMessageExtractor } from './src/exception-message-extractor.service';\nexport { IPsFormIntlTexts, IPsSavebarIntlTexts, IPsTableIntlTexts, PsIntlKeys, PsIntlService, PsIntlServiceEn } from './src/intl';\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PsExceptionMessageExtractor {\r\n  /**\r\n   * Extracts a error message from a given error object\r\n   * @param error The error object.\r\n   * @returns The error message\r\n   */\r\n  public extractErrorMessage(error: any): string {\r\n    if (!error) {\r\n      return null;\r\n    }\r\n\r\n    if (typeof error === 'string') {\r\n      return error;\r\n    }\r\n\r\n    return error.message;\r\n  }\r\n}\r\n","// export what ./public_api exports so we can import with the lib name like this:\r\n// import { ModuleA } from 'libname'\r\nexport * from './public_api';\r\n","export { PsFlipContainerModule } from './src/flip-container.module';\nexport { PsFlipContainerComponent } from './src/flip-container.component';\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { PsFormErrorsModule } from '@prosoft/components/form-errors';\r\nimport { PsSavebarRightContentDirective } from './savebar-right-content.directive';\r\nimport { PsSavebarComponent } from './savebar.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatCardModule, MatButtonModule, PsFormErrorsModule],\r\n  declarations: [PsSavebarComponent, PsSavebarRightContentDirective],\r\n  exports: [PsSavebarComponent, PsSavebarRightContentDirective],\r\n})\r\nexport class PsSavebarModule {}\r\n","// export what ./public_api exports so we can import with the lib name like this:\r\n// import { ModuleA } from 'libname'\r\nexport * from './public_api';\r\n","export { IPsTableFilterResult, PsTableDataSource } from './src/data/table-data-source';\nexport { IPsTableSortDefinition, IPsTableUpdateDataInfo } from './src/models';\nexport { IPsTableSetting, PsTableSettingsService } from './src/services/table-settings.service';\nexport { PsTableComponent } from './src/table.component';\nexport { PsTableModule } from './src/table.module';\nexport { PsTableMemoryStateManager, PsTableUrlStateManager, PsTableStateManager } from './src/helper/state-manager';\nexport { PsTableColumnDirective } from './src/directives/table.directives';\n\n// reexport\nexport { IPsTableIntlTexts } from '@prosoft/components/core';\n","import { DataSource, SelectionModel } from '@angular/cdk/collections';\r\nimport { BehaviorSubject, Observable, of, Subject, Subscription } from 'rxjs';\r\nimport { catchError, finalize, map, take, tap } from 'rxjs/operators';\r\nimport { _isNumberValue } from '../helper/table.helper';\r\nimport { IPsTableUpdateDataInfo } from '../models';\r\n\r\n/**\r\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\r\n * flaky browser support and the value not being defined in Closure's typings.\r\n */\r\nconst MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\nexport interface IPsTableFilterResult<T> {\r\n  Items: T[];\r\n  TotalItems: number;\r\n}\r\n\r\ndeclare type PsTableMode = 'client' | 'server';\r\n\r\nexport class PsTableDataSource<T> extends DataSource<T> {\r\n  /** Subject that emits, when the table should be checked by the change detection */\r\n  public _internalDetectChanges = new Subject<void>();\r\n\r\n  /** Array of data that should be rendered by the table, where each object represents one row. */\r\n  public get data() {\r\n    return this._data.value;\r\n  }\r\n  public set data(data: T[]) {\r\n    this._data.next(data);\r\n  }\r\n\r\n  public readonly selectionModel = new SelectionModel<T>(true, []);\r\n\r\n  /** The currently visible rows. */\r\n  public get visibleRows(): T[] {\r\n    return this._renderData.value;\r\n  }\r\n\r\n  /** The flag that indicates if all visible rows are selected. */\r\n  public get allVisibleRowsSelected(): boolean {\r\n    return this.visibleRows.length === this.selectionModel.selected.length;\r\n  }\r\n\r\n  /** The flag that indicates if the table is currently loading data. */\r\n  public loading = true;\r\n\r\n  /** The error that occured in the last observable returned by loadData or null. */\r\n  public error: any = null;\r\n\r\n  /** The locale for the table texts. */\r\n  public locale: string;\r\n\r\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\r\n  public dataLength = 0;\r\n\r\n  /** The name of the column, after which the rows should be sorted. Defaulted to asc. */\r\n  public sortColumn: string = null;\r\n\r\n  /** The sort direction. Defaulted to asc. */\r\n  public sortDirection: 'asc' | 'desc' = 'asc';\r\n\r\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\r\n  public pageIndex = 0;\r\n\r\n  /** Number of items to display on a page. By default set to 15. */\r\n  public pageSize = 15;\r\n\r\n  /**\r\n   * Filter term that should be used to filter out objects from the data array. To override how\r\n   * data objects match to this filter string, provide a custom function for filterPredicate.\r\n   */\r\n  public filter = '';\r\n\r\n  private _loadData: (filter: IPsTableUpdateDataInfo) => Observable<T[] | IPsTableFilterResult<T>>;\r\n\r\n  /** Stream that emits when a new data array is set on the data source. */\r\n  private readonly _data: BehaviorSubject<T[]> = new BehaviorSubject<T[]>([]);\r\n\r\n  /** Stream emitting render data to the table (depends on ordered data changes). */\r\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\r\n\r\n  /** Indicates if the data source currently holds data provided by the _loadData function. */\r\n  private _hasData = false;\r\n\r\n  /**\r\n   * Subscription to the result of the loadData function.\r\n   */\r\n  private _loadDataSubscription: Subscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Subscription to the changes that should trigger an update to the table's rendered rows.\r\n   */\r\n  private _renderChangesSubscription = Subscription.EMPTY;\r\n\r\n  constructor(\r\n    loadDataFunc: (filter: IPsTableUpdateDataInfo) => Observable<T[] | IPsTableFilterResult<T>>,\r\n    public readonly mode: PsTableMode = 'client'\r\n  ) {\r\n    super();\r\n    this._loadData = loadDataFunc;\r\n\r\n    this._initDataChangeSubscription();\r\n  }\r\n\r\n  /**\r\n   * Returns the names of the property that should be used in filterPredicate.\r\n   * @param row Data object for which the property names should be returned.\r\n   * @returns The names of the properties to use in the filter.\r\n   */\r\n  public filterProperties(row: { [key: string]: any }): string[] {\r\n    return Object.keys(row);\r\n  }\r\n\r\n  /**\r\n   * Returns all values that should be used for filtering.\r\n   * @param row Data object used to check against the filter.\r\n   * @returns The values to use in the filter.\r\n   */\r\n  public filterValues = (row: { [key: string]: any }): any[] => {\r\n    return this.filterProperties(row).map(key => row[key]);\r\n  };\r\n\r\n  /**\r\n   * Checks if a data object matches the data source's filter string. By default, each data object\r\n   * is converted to a string of its properties and returns true if the filter has\r\n   * at least one occurrence in that string. By default, the filter string has its whitespace\r\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\r\n   * filter matching.\r\n   * @param row Data object used to check against the filter.\r\n   * @param filter Filter string that has been set on the data source.\r\n   * @returns Whether the filter matches against the data\r\n   */\r\n  public filterPredicate = (row: { [key: string]: any }, filter: string) => {\r\n    // Transform the data into a lowercase string of all property values.\r\n    const dataStr = this.filterValues(row)\r\n      .map(value => (value instanceof Date ? value.toLocaleString(this.locale) : value + '').toLowerCase())\r\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\r\n      // This avoids matches where the values of two columns combined will match the user's query\r\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\r\n      // that has a very low chance of being typed in by somebody in a text field. This one in\r\n      // particular is \"White up-pointing triangle with dot\" from\r\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\r\n      .join('◬');\r\n\r\n    // Transform the filter by converting it to lowercase.\r\n    const transformedFilter = filter.toLowerCase();\r\n    return dataStr.indexOf(transformedFilter) !== -1;\r\n  };\r\n\r\n  /**\r\n   * Data accessor function that is used for accessing data properties for sorting through\r\n   * the default sortData function.\r\n   * This default function assumes that the sort header IDs (which defaults to the column name)\r\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\r\n   * May be set to a custom function for different behavior.\r\n   * @param data Data object that is being accessed.\r\n   * @param columnName The name of the column that represents the data.\r\n   */\r\n  public sortingDataAccessor = (data: T, columnName: string): any => {\r\n    const value = (data as { [key: string]: any })[columnName];\r\n\r\n    if (_isNumberValue(value)) {\r\n      const numberValue = Number(value);\r\n\r\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\r\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\r\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\r\n    }\r\n\r\n    return value;\r\n  };\r\n\r\n  /**\r\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\r\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\r\n   * By default, the function retrieves the active sort and its direction and compares data\r\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\r\n   * of data ordering.\r\n   * @param data The array of data that should be sorted.\r\n   * @param sort The connected MatSort that holds the current sort state.\r\n   */\r\n  public sortData = (data: T[], sort: { sortColumn: string; sortDirection: 'asc' | 'desc' }): T[] => {\r\n    const sortProp = sort.sortColumn;\r\n    const sortDir = sort.sortDirection;\r\n    if (!sortProp || !sortDir) {\r\n      return data;\r\n    }\r\n\r\n    return data.sort((a: T, b: T) => {\r\n      let valueA = this.sortingDataAccessor(a, sortProp);\r\n      let valueB = this.sortingDataAccessor(b, sortProp);\r\n\r\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\r\n      // one value exists while the other doesn't. In this case, existing value should come first.\r\n      // This avoids inconsistent results when comparing values to undefined/null.\r\n      // If neither value exists, return 0 (equal).\r\n      let comparatorResult = 0;\r\n      if (valueA != null && valueB != null) {\r\n        if (valueA instanceof Date || valueB instanceof Date) {\r\n          valueA = new Date(valueA).toISOString();\r\n          valueB = new Date(valueB).toISOString();\r\n        }\r\n\r\n        const propertyType = typeof valueA;\r\n        if (propertyType === 'string') {\r\n          comparatorResult = valueA.localeCompare(valueB);\r\n        }\r\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\r\n        else if (valueA > valueB) {\r\n          comparatorResult = 1;\r\n        } else if (valueA < valueB) {\r\n          comparatorResult = -1;\r\n        }\r\n      } else if (valueA != null) {\r\n        comparatorResult = 1;\r\n      } else if (valueB != null) {\r\n        comparatorResult = -1;\r\n      }\r\n\r\n      return comparatorResult * (sortDir === 'asc' ? 1 : -1);\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Returns the current page, sort and filter state\r\n   */\r\n  public getUpdateDataInfo() {\r\n    return <IPsTableUpdateDataInfo>{\r\n      pageSize: this.pageSize,\r\n      currentPage: this.pageIndex,\r\n      searchText: this.filter,\r\n      sortColumn: this.sortColumn,\r\n      sortDirection: this.sortDirection,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Reloads the data\r\n   */\r\n  public updateData(forceReload: boolean = true) {\r\n    this.loading = true;\r\n    this.error = null;\r\n    this.selectionModel.clear();\r\n    this._renderData.next([]);\r\n    this._loadDataSubscription.unsubscribe();\r\n    this._internalDetectChanges.next();\r\n\r\n    let data$: Observable<T[] | IPsTableFilterResult<T>>;\r\n    if (this.mode === 'server' || forceReload || !this._hasData) {\r\n      const filter = this.getUpdateDataInfo();\r\n      data$ = this._loadData(filter);\r\n    } else {\r\n      data$ = of(this.data);\r\n    }\r\n    this._loadDataSubscription = data$\r\n      .pipe(\r\n        take(1),\r\n        tap(() => (this._hasData = true)),\r\n        catchError((err: Error | any) => {\r\n          this._hasData = false;\r\n          this.error = err;\r\n          return of([] as T[]);\r\n        }),\r\n        finalize(() => {\r\n          this.loading = false;\r\n          this._internalDetectChanges.next();\r\n        })\r\n      )\r\n      .subscribe(data => {\r\n        if (Array.isArray(data)) {\r\n          this.dataLength = data.length;\r\n          this.data = data;\r\n        } else {\r\n          const filterResult = data;\r\n\r\n          this.dataLength = filterResult.TotalItems;\r\n          this.data = filterResult.Items;\r\n          this._checkPageValidity(filterResult.TotalItems);\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Selects all visible rows\r\n   */\r\n  public selectVisibleRows() {\r\n    this.selectionModel.select(...this.visibleRows);\r\n  }\r\n\r\n  /**\r\n   * Toggle the selection of the visible rows\r\n   */\r\n  public toggleVisibleRowSelection() {\r\n    this.allVisibleRowsSelected ? this.selectionModel.clear() : this.selectVisibleRows();\r\n  }\r\n\r\n  /**\r\n   * Used by the MatTable. Called when it connects to the data source.\r\n   * @docs-private\r\n   */\r\n  public connect() {\r\n    return this._renderData;\r\n  }\r\n\r\n  /**\r\n   * Used by the MatTable. Called when it is destroyed. No-op.\r\n   * @docs-private\r\n   */\r\n  public disconnect() {\r\n    if (this._loadDataSubscription) {\r\n      this._loadDataSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\r\n   * changes occur, process the current state of the filter, sort, and pagination along with\r\n   * the provided base data and send it to the table for rendering.\r\n   */\r\n  private _initDataChangeSubscription() {\r\n    let dataStream: Observable<T[]> = this._data;\r\n    if (this.mode === 'client') {\r\n      dataStream = dataStream.pipe(\r\n        map(data => this._filterData(data)),\r\n        map(data => this._orderData(data)),\r\n        map(data => this._pageData(data))\r\n      );\r\n    }\r\n    this._renderChangesSubscription.unsubscribe();\r\n    this._renderChangesSubscription = dataStream.subscribe(data => this._renderData.next(data));\r\n  }\r\n\r\n  /**\r\n   * Returns a filtered data array where each filter object contains the filter string within\r\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\r\n   * as provided.\r\n   */\r\n  private _filterData(data: T[]) {\r\n    // If there is a filter string, filter out data that does not contain it.\r\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\r\n    // May be overridden for customization.\r\n    const filteredData = !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\r\n\r\n    this.dataLength = filteredData.length;\r\n\r\n    this._checkPageValidity(filteredData.length);\r\n\r\n    return filteredData;\r\n  }\r\n\r\n  /**\r\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\r\n   * data array as provided. Uses the default data accessor for data lookup, unless a\r\n   * sortDataAccessor function is defined.\r\n   */\r\n  private _orderData(data: T[]): T[] {\r\n    // If there is no active sort or direction, return the data without trying to sort.\r\n    if (!this.sortColumn) {\r\n      return data;\r\n    }\r\n\r\n    return this.sortData(data.slice(), {\r\n      sortColumn: this.sortColumn,\r\n      sortDirection: this.sortDirection,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\r\n   * index and length. If there is no paginator provided, returns the data array as provided.\r\n   */\r\n  private _pageData(data: T[]): T[] {\r\n    const startIndex = this.pageIndex * this.pageSize;\r\n    return data.slice().splice(startIndex, this.pageSize);\r\n  }\r\n\r\n  /**\r\n   * Checks if the current pageIndex is 0 or the page contains data, otherwise it switches to the last valid page.\r\n   * Please make sure that dataLength\r\n   */\r\n  private _checkPageValidity(totalItems: number) {\r\n    // If the page index is set beyond the page, reduce it to the last page.\r\n    if (this.pageIndex > 0) {\r\n      const lastPageIndex = totalItems ? Math.ceil(totalItems / this.pageSize) - 1 : 0;\r\n      const newPageIndex = Math.min(this.pageIndex, lastPageIndex);\r\n\r\n      if (newPageIndex !== this.pageIndex) {\r\n        this.pageIndex = newPageIndex;\r\n        this.updateData();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { ContentChild, Directive, ElementRef, Input, TemplateRef } from '@angular/core';\r\n\r\n@Directive({ selector: '[psTableColumnTemplate]' })\r\nexport class PsTableColumnTemplateDirective {\r\n  constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n\r\n@Directive({ selector: '[psTableColumnHeaderTemplate]' })\r\nexport class PsTableColumnHeaderTemplateDirective {\r\n  constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: 'ps-table-column',\r\n})\r\nexport class PsTableColumnDirective {\r\n  @Input() public header = '';\r\n  @Input() public property = '';\r\n  @Input() public sortable = true;\r\n  @Input() public mandatory = false;\r\n  @Input() public width = 'auto';\r\n  @Input() public headerStyles: { [key: string]: string } = {};\r\n  @Input() public columnStyles: { [key: string]: string } = {};\r\n  @ContentChild(PsTableColumnTemplateDirective, { read: TemplateRef, static: false })\r\n  public columnTemplate: TemplateRef<any> | null = null;\r\n  @ContentChild(PsTableColumnHeaderTemplateDirective, { read: TemplateRef, static: false })\r\n  public headerTemplate: TemplateRef<any> | null = null;\r\n}\r\n\r\n@Directive({\r\n  selector: '[psTableTopButtonSection]',\r\n})\r\nexport class PsTableTopButtonSectionDirective {\r\n  constructor(public el: ElementRef) {}\r\n}\r\n\r\n@Directive({\r\n  selector: '[psTableListActions]',\r\n})\r\nexport class PsTableListActionsDirective {\r\n  constructor(public el: ElementRef) {}\r\n}\r\n\r\n@Directive({\r\n  selector: '[psTableRowActions]',\r\n})\r\nexport class PsTableRowActionsDirective {\r\n  constructor(public el: ElementRef) {}\r\n}\r\n\r\n@Directive({\r\n  selector: '[psTableCustomHeader]',\r\n})\r\nexport class PsTableCustomHeaderDirective {\r\n  constructor(public el: ElementRef) {}\r\n}\r\n\r\n@Directive({\r\n  selector: '[psTableCustomSettings]',\r\n})\r\nexport class PsTableCustomSettingsDirective {\r\n  constructor(public el: ElementRef) {}\r\n}\r\n\r\n@Directive({ selector: '[psTableRowDetailTemplate]' })\r\nexport class PsTableRowDetailTemplateDirective {\r\n  constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n\r\n@Directive({\r\n  // tslint:disable-next-line:directive-selector\r\n  selector: 'ps-table-row-detail',\r\n})\r\nexport class PsTableRowDetailDirective {\r\n  /** Gibt an, ob die Row Details initial expanded sein sollen */\r\n  @Input() public expanded = false;\r\n  @Input() public showToggleColumn = true;\r\n\r\n  @ContentChild(PsTableRowDetailTemplateDirective, { read: TemplateRef, static: false })\r\n  public template: TemplateRef<any> | null = null;\r\n\r\n  private expandedItems = new WeakSet();\r\n  private seenItems = new WeakSet();\r\n\r\n  public toggle(item: any, open?: boolean) {\r\n    if (this.expandedItems.has(item)) {\r\n      if (open === true) {\r\n        return;\r\n      }\r\n\r\n      this.expandedItems.delete(item);\r\n    } else {\r\n      if (open === false) {\r\n        return;\r\n      }\r\n\r\n      this.expandedItems.add(item);\r\n    }\r\n  }\r\n\r\n  public isExpanded(item: any) {\r\n    // Beim ersten Aufruf für ein Item expanden, wenn expanded === true\r\n    if (this.expanded && !this.seenItems.has(item)) {\r\n      this.expandedItems.add(item);\r\n      this.seenItems.add(item);\r\n    }\r\n\r\n    return this.expandedItems.has(item);\r\n  }\r\n}\r\n","import { ActivatedRoute, Router } from '@angular/router';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { IPsTableUpdateDataInfo } from '../models';\nimport { asQueryParams, fromQueryParams } from './table.helper';\n\nexport abstract class PsTableStateManager {\n  abstract remove(tableId: string): void;\n  abstract createStateSource(tableId: string): Observable<IPsTableUpdateDataInfo>;\n  abstract requestUpdate(tableId: string, updateInfo: IPsTableUpdateDataInfo): void;\n}\n\nexport class PsTableUrlStateManager extends PsTableStateManager {\n  constructor(private router: Router, private route: ActivatedRoute) {\n    super();\n  }\n\n  public remove(tableId: string) {\n    const currentParams = this.route.snapshot.queryParamMap;\n    const newQueryParams: { [id: string]: any } = {};\n    for (const key of currentParams.keys) {\n      if (key !== tableId) {\n        newQueryParams[key] = currentParams.get(key);\n      }\n    }\n\n    this.router.navigate([], {\n      queryParams: newQueryParams,\n      relativeTo: this.route,\n    });\n  }\n\n  public createStateSource(tableId: string) {\n    return this.route.queryParamMap.pipe(\n      map(queryParamMap => {\n        if (tableId && queryParamMap.has(tableId)) {\n          return fromQueryParams(queryParamMap.get(tableId));\n        }\n        return null;\n      })\n    );\n  }\n\n  public requestUpdate(tableId: string, updateInfo: IPsTableUpdateDataInfo) {\n    const newQueryParams: { [id: string]: any } = {};\n\n    const currentParams = this.route.snapshot.queryParamMap;\n    for (const key of currentParams.keys) {\n      newQueryParams[key] = currentParams.get(key);\n    }\n\n    if (tableId) {\n      newQueryParams[tableId] = asQueryParams(updateInfo);\n    }\n\n    this.router.navigate([], {\n      queryParams: newQueryParams,\n      relativeTo: this.route,\n    });\n  }\n}\n\nexport class PsTableMemoryStateManager extends PsTableStateManager {\n  private settings$ = new BehaviorSubject<IPsTableUpdateDataInfo>(null);\n\n  public remove(tableId: string) {\n    this.settings$.next(null);\n  }\n\n  public createStateSource(tableId: string) {\n    return this.settings$.asObservable();\n  }\n\n  public requestUpdate(tableId: string, updateInfo: IPsTableUpdateDataInfo) {\n    this.settings$.next(updateInfo);\n  }\n}\n","import { coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { IPsTableUpdateDataInfo } from '../models';\r\n\r\nexport function asQueryParams(settings: IPsTableUpdateDataInfo): string {\r\n  return [settings.pageSize, settings.currentPage, settings.searchText, settings.sortColumn, settings.sortDirection].join('◬');\r\n}\r\n\r\nexport function fromQueryParams(settingsString: string): IPsTableUpdateDataInfo {\r\n  if (!settingsString) {\r\n    return undefined;\r\n  }\r\n\r\n  const settings = settingsString.split('◬', 5);\r\n  if (!settings.reduce((prev, curr) => prev || !!curr, false)) {\r\n    return undefined;\r\n  }\r\n\r\n  return <IPsTableUpdateDataInfo>{\r\n    pageSize: coerceNumberProperty(settings[0], null),\r\n    currentPage: coerceNumberProperty(settings[1], null),\r\n    searchText: settings[2] || null,\r\n    sortColumn: settings[3] || null,\r\n    sortDirection: settings[4] || null,\r\n  };\r\n}\r\n\r\n/**\r\n * Whether the provided value is considered a number.\r\n * @docs-private\r\n */\r\nexport function _isNumberValue(value: any): boolean {\r\n  // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\r\n  // and other non-number values as NaN, where Number just uses 0) but it considers the string\r\n  // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\r\n  return !isNaN(parseFloat(value as any)) && !isNaN(Number(value));\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EMPTY, Observable, of } from 'rxjs';\r\n\r\nexport interface IPsTableSetting {\r\n  columnBlacklist: string[];\r\n  sortColumn: string;\r\n  sortDirection: 'asc' | 'desc';\r\n  pageSize: number;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PsTableSettingsService {\r\n  public defaultPageSize$: Observable<number> = of(15);\r\n  public settings$: Observable<{ [id: string]: IPsTableSetting }> = of({});\r\n\r\n  public settingsEnabled = false;\r\n  public pageSizeOptions = [5, 10, 25, 50];\r\n\r\n  public save(_: string, __: IPsTableSetting): Observable<void> {\r\n    return EMPTY;\r\n  }\r\n}\r\n","<table mat-table multiTemplateDataRows class=\"ps-table-data__table\" [dataSource]=\"dataSource\">\r\n  <!-- Checkbox Column -->\r\n  <ng-container matColumnDef=\"select\">\r\n    <th mat-header-cell *matHeaderCellDef>\r\n      <mat-checkbox (change)=\"onMasterToggleChange()\" [checked]=\"isMasterToggleChecked()\" [indeterminate]=\"isMasterToggleIndeterminate()\">\r\n      </mat-checkbox>\r\n    </th>\r\n    <td mat-cell *matCellDef=\"let row\" style=\"width: 55px;\">\r\n      <mat-checkbox (click)=\"$event.stopPropagation()\" (change)=\"onRowToggleChange(row)\" [checked]=\"isRowSelected(row)\"> </mat-checkbox>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <!-- Row Detail Expander Column-->\r\n  <ng-container matColumnDef=\"rowDetailExpander\">\r\n    <th mat-header-cell *matHeaderCellDef></th>\r\n    <td mat-cell *matCellDef=\"let row\" style=\"width: 70px;\">\r\n      <button mat-icon-button color=\"primary\" type=\"button\" (click)=\"toggleRowDetail(row)\">\r\n        <mat-icon *ngIf=\"!rowDetail.isExpanded(row)\">chevron_right</mat-icon>\r\n        <mat-icon *ngIf=\"rowDetail.isExpanded(row)\">expand_more</mat-icon>\r\n      </button>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <!-- Dynamic Columns -->\r\n  <ng-container *ngFor=\"let columnDef of columnDefs\">\r\n    <ng-container [matColumnDef]=\"columnDef.property\">\r\n      <th mat-header-cell *matHeaderCellDef [ngStyle]=\"columnDef.headerStyles\" [style.width]=\"columnDef.width\">\r\n        <ng-container *ngIf=\"!columnDef.headerTemplate\">\r\n          {{ columnDef.header }}\r\n        </ng-container>\r\n        <ng-template *ngIf=\"columnDef.headerTemplate\" [ngTemplateOutlet]=\"columnDef.headerTemplate\"></ng-template>\r\n      </th>\r\n      <td mat-cell *matCellDef=\"let element\" [ngStyle]=\"columnDef.columnStyles\">\r\n        <ng-container *ngIf=\"!columnDef.columnTemplate\">\r\n          {{ element[columnDef.property] }}\r\n        </ng-container>\r\n        <ng-template\r\n          *ngIf=\"columnDef.columnTemplate\"\r\n          [ngTemplateOutlet]=\"columnDef.columnTemplate\"\r\n          [ngTemplateOutletContext]=\"{ $implicit: element, expanded: rowDetail?.isExpanded(element) || false }\"\r\n        >\r\n        </ng-template>\r\n      </td>\r\n    </ng-container>\r\n  </ng-container>\r\n\r\n  <!--Option Column-->\r\n  <ng-container matColumnDef=\"options\">\r\n    <th class=\"ps-table-data__options-column-header\" mat-header-cell *matHeaderCellDef>\r\n      <button *ngIf=\"showListActions\" mat-icon-button type=\"button\" [matMenuTriggerFor]=\"listMenu\">\r\n        <mat-icon>more_vert</mat-icon>\r\n      </button>\r\n      <mat-menu #listMenu=\"matMenu\">\r\n        <!--Dynamic ListActions-->\r\n        <ng-template [ngTemplateOutlet]=\"listActions\" [ngTemplateOutletContext]=\"{ $implicit: getSelectedRows() }\"></ng-template>\r\n\r\n        <button *ngIf=\"refreshable\" type=\"button\" mat-menu-item (click)=\"onRefreshDataClicked()\">\r\n          <mat-icon>refresh</mat-icon>\r\n          {{ intl.refreshListLabel }}\r\n        </button>\r\n        <button *ngIf=\"settingsEnabled\" type=\"button\" mat-menu-item (click)=\"onShowSettingsClicked()\">\r\n          <mat-icon>settings</mat-icon>\r\n          {{ intl.settingsLabel }}\r\n        </button>\r\n      </mat-menu>\r\n    </th>\r\n    <td class=\"ps-table-data__options-column\" mat-cell *matCellDef=\"let element\">\r\n      <button *ngIf=\"rowActions\" mat-icon-button type=\"button\" [matMenuTriggerFor]=\"rowMenu\">\r\n        <mat-icon>more_vert</mat-icon>\r\n      </button>\r\n      <mat-menu #rowMenu=\"matMenu\">\r\n        <!--Dynamic RowActions-->\r\n        <ng-container [ngTemplateOutlet]=\"rowActions\" [ngTemplateOutletContext]=\"{ $implicit: element }\"></ng-container>\r\n      </mat-menu>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <!-- Expanded Content Column - The detail row is made up of this one column that spans across all columns -->\r\n  <ng-container *ngIf=\"rowDetail\" matColumnDef=\"__rowDetail\">\r\n    <td mat-cell *matCellDef=\"let element\" [attr.colspan]=\"displayedColumns.length\" class=\"ps-table-data__detail-cell\">\r\n      <ps-table-row-detail [show]=\"rowDetail.isExpanded(element)\" [element]=\"element\" [rowDetail]=\"rowDetail\"></ps-table-row-detail>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n  <tr mat-row class=\"ps-table-data__row\" *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n  <ng-container *ngIf=\"rowDetail\">\r\n    <tr\r\n      mat-row\r\n      *matRowDef=\"let row; columns: ['__rowDetail']\"\r\n      class=\"ps-table-data__detail-row\"\r\n      [class.ps-table-data__detail-row--collapsed]=\"!rowDetail.isExpanded(row)\"\r\n      [class.ps-table-data__detail-row--expanded]=\"rowDetail.isExpanded(row)\"\r\n    ></tr>\r\n  </ng-container>\r\n</table>\r\n","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  ViewEncapsulation,\r\n  SimpleChanges,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport { IPsTableIntlTexts } from '@prosoft/components/core';\r\nimport { PsTableDataSource } from '../data/table-data-source';\r\nimport { PsTableColumnDirective, PsTableRowDetailDirective } from '../directives/table.directives';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'ps-table-data',\r\n  templateUrl: './table-data.component.html',\r\n  styleUrls: ['./table-data.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PsTableDataComponent implements OnChanges {\r\n  @Input() public dataSource: PsTableDataSource<{ [key: string]: any }>;\r\n  @Input() public tableId: string;\r\n  @Input() public intl: IPsTableIntlTexts;\r\n  @Input() public rowActions: TemplateRef<any> | null = null;\r\n  @Input() public rowDetail: PsTableRowDetailDirective | null;\r\n  @Input() public listActions: TemplateRef<any> | null = null;\r\n  @Input() public columnDefs: PsTableColumnDirective[];\r\n  @Input() public showListActions: boolean;\r\n  @Input() public refreshable: boolean;\r\n  @Input() public settingsEnabled: boolean;\r\n  @Input() public displayedColumns: string[];\r\n\r\n  @Output() public showSettingsClicked = new EventEmitter<void>();\r\n  @Output() public refreshDataClicked = new EventEmitter<void>();\r\n\r\n  private _dataSourceChangesSub = Subscription.EMPTY;\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.dataSource) {\r\n      this._dataSourceChangesSub.unsubscribe();\r\n      this._dataSourceChangesSub = this.dataSource._internalDetectChanges.subscribe(() => {\r\n        this.cd.markForCheck();\r\n      });\r\n    }\r\n  }\r\n\r\n  public onShowSettingsClicked() {\r\n    this.showSettingsClicked.emit();\r\n  }\r\n\r\n  public onRefreshDataClicked() {\r\n    this.refreshDataClicked.emit();\r\n  }\r\n\r\n  public toggleRowDetail(item: { [key: string]: any }) {\r\n    this.rowDetail.toggle(item);\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  public onMasterToggleChange() {\r\n    this.dataSource.toggleVisibleRowSelection();\r\n  }\r\n\r\n  public onRowToggleChange(row: any) {\r\n    this.dataSource.selectionModel.toggle(row);\r\n  }\r\n\r\n  public isMasterToggleChecked() {\r\n    return this.dataSource.selectionModel.hasValue() && this.dataSource.allVisibleRowsSelected;\r\n  }\r\n\r\n  public isMasterToggleIndeterminate() {\r\n    return this.dataSource.selectionModel.hasValue() && !this.dataSource.allVisibleRowsSelected;\r\n  }\r\n\r\n  public isRowSelected(row: any) {\r\n    return this.dataSource.selectionModel.isSelected(row);\r\n  }\r\n\r\n  public getSelectedRows() {\r\n    return this.dataSource.selectionModel.selected;\r\n  }\r\n}\r\n","\n    <h2 *ngIf=\"caption\" class=\"ps-table-header__caption\">{{ caption }}</h2>\n    <ng-container [ngTemplateOutlet]=\"customHeader\"></ng-container>\n    <ps-table-sort\n      *ngIf=\"showSorting\"\n      class=\"ps-table-header__sort\"\n      [sortColumn]=\"sortColumn\"\n      [sortDirection]=\"sortDirection\"\n      [sortDefinitions]=\"sortDefinitions\"\n      [intl]=\"intl\"\n      (sortChanged)=\"sortChanged.emit($event)\"\n    ></ps-table-sort>\n    <ps-table-search\n      *ngIf=\"filterable\"\n      class=\"ps-table-header__search\"\n      [searchText]=\"searchText\"\n      [debounceTime]=\"300\"\n      [intl]=\"intl\"\n      (searchChanged)=\"searchChanged.emit($event)\"\n    ></ps-table-search>\n    <div *ngIf=\"topButtonSection\" class=\"ps-table-header__actions\">\n      <ng-container [ngTemplateOutlet]=\"topButtonSection\" [ngTemplateOutletContext]=\"{ $implicit: selectedRows }\"></ng-container>\n    </div>\n  ","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  ViewEncapsulation,\r\n  HostBinding,\r\n} from '@angular/core';\r\nimport { IPsTableIntlTexts } from '@prosoft/components/core';\r\nimport { IPsTableSortDefinition } from '../models';\r\n\r\n@Component({\r\n  selector: 'ps-table-header',\r\n  template: `\r\n    <h2 *ngIf=\"caption\" class=\"ps-table-header__caption\">{{ caption }}</h2>\r\n    <ng-container [ngTemplateOutlet]=\"customHeader\"></ng-container>\r\n    <ps-table-sort\r\n      *ngIf=\"showSorting\"\r\n      class=\"ps-table-header__sort\"\r\n      [sortColumn]=\"sortColumn\"\r\n      [sortDirection]=\"sortDirection\"\r\n      [sortDefinitions]=\"sortDefinitions\"\r\n      [intl]=\"intl\"\r\n      (sortChanged)=\"sortChanged.emit($event)\"\r\n    ></ps-table-sort>\r\n    <ps-table-search\r\n      *ngIf=\"filterable\"\r\n      class=\"ps-table-header__search\"\r\n      [searchText]=\"searchText\"\r\n      [debounceTime]=\"300\"\r\n      [intl]=\"intl\"\r\n      (searchChanged)=\"searchChanged.emit($event)\"\r\n    ></ps-table-search>\r\n    <div *ngIf=\"topButtonSection\" class=\"ps-table-header__actions\">\r\n      <ng-container [ngTemplateOutlet]=\"topButtonSection\" [ngTemplateOutletContext]=\"{ $implicit: selectedRows }\"></ng-container>\r\n    </div>\r\n  `,\r\n  styles: [\r\n    `\r\n      ps-table-header {\r\n        padding: 0 16px;\r\n\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        align-items: flex-end;\r\n        justify-content: space-between;\r\n      }\r\n\r\n      .ps-table-header__caption {\r\n        flex-basis: 100%;\r\n      }\r\n\r\n      .ps-table-header__sort {\r\n        flex: 0 1 350px;\r\n      }\r\n\r\n      .ps-table-header__search {\r\n        flex: 0 1 800px;\r\n      }\r\n\r\n      .ps-table-header__actions {\r\n        flex-basis: auto;\r\n        margin: 0.3em 8px 1em;\r\n        text-align: end;\r\n        align-self: flex-end;\r\n      }\r\n    `,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PsTableHeaderComponent {\r\n  @Input() public intl: IPsTableIntlTexts;\r\n  @Input() public caption: string;\r\n  @Input() public topButtonSection: TemplateRef<any> | null;\r\n  @Input() public customHeader: TemplateRef<any> | null;\r\n  @Input() public selectedRows: any[];\r\n\r\n  @Input() public showSorting: boolean;\r\n  @Input() public sortColumn: string;\r\n  @Input() public sortDirection: 'asc' | 'desc';\r\n  @Input() public sortDefinitions: IPsTableSortDefinition[] = [];\r\n\r\n  @Input() public filterable: boolean;\r\n  @Input() public searchText: string;\r\n\r\n  @Output() public sortChanged = new EventEmitter<{ sortColumn: string; sortDirection: 'asc' | 'desc' }>();\r\n  @Output() public searchChanged = new EventEmitter<string>();\r\n\r\n  @HostBinding('style.padding-top') public get paddingTop() {\r\n    return !this.caption && (this.showSorting || this.filterable || this.topButtonSection) ? '1em' : '0';\r\n  }\r\n}\r\n","\n    <mat-paginator\n      [pageIndex]=\"pageIndex\"\n      [pageSize]=\"pageSize\"\n      [pageSizeOptions]=\"pageSizeOptions\"\n      [length]=\"dataLength\"\n      [showFirstLastButtons]=\"true\"\n      (page)=\"onPage($event)\"\n    >\n    </mat-paginator>\n    <div class=\"mat-paginator-page-size\" style=\"font-size: 12px;\">\n      <mat-form-field *ngIf=\"pages.length > 2\" class=\"mat-paginator-page-size-select\">\n        <mat-select class=\"ps-table-pagination__page-select\" [ngModel]=\"pageIndex + 1\" (selectionChange)=\"goToPage($event)\">\n          <mat-option *ngFor=\"let page of pages\" [value]=\"page\"> {{ page }}</mat-option>\n        </mat-select>\n      </mat-form-field>\n    </div>\n  ","import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\r\nimport { MatSelectChange } from '@angular/material/select';\r\nimport { IPsTableIntlTexts } from '@prosoft/components/core';\r\nimport { of, Subject, timer, iif } from 'rxjs';\r\nimport { debounce, takeUntil, switchMap } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'ps-table-pagination',\r\n  template: `\r\n    <mat-paginator\r\n      [pageIndex]=\"pageIndex\"\r\n      [pageSize]=\"pageSize\"\r\n      [pageSizeOptions]=\"pageSizeOptions\"\r\n      [length]=\"dataLength\"\r\n      [showFirstLastButtons]=\"true\"\r\n      (page)=\"onPage($event)\"\r\n    >\r\n    </mat-paginator>\r\n    <div class=\"mat-paginator-page-size\" style=\"font-size: 12px;\">\r\n      <mat-form-field *ngIf=\"pages.length > 2\" class=\"mat-paginator-page-size-select\">\r\n        <mat-select class=\"ps-table-pagination__page-select\" [ngModel]=\"pageIndex + 1\" (selectionChange)=\"goToPage($event)\">\r\n          <mat-option *ngFor=\"let page of pages\" [value]=\"page\"> {{ page }}</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </div>\r\n  `,\r\n  styles: [\r\n    `\r\n      ps-table-pagination {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        background-color: #fff;\r\n      }\r\n    `,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PsTablePaginationComponent implements OnChanges, OnDestroy {\r\n  public pages: number[] = [];\r\n\r\n  @Input() public pageSize: number;\r\n  @Input() public dataLength: number;\r\n  @Input() public pageIndex: number;\r\n  @Input() public pageSizeOptions: number;\r\n  @Input() public intl: IPsTableIntlTexts;\r\n  @Input() public pageDebounce: number;\r\n\r\n  @Output() public page = new EventEmitter<PageEvent>();\r\n\r\n  @ViewChild(MatPaginator, { static: false }) public set paginator(value: MatPaginator | null) {\r\n    this._paginator = value;\r\n    this.updatePaginatorIntl();\r\n  }\r\n  public get paginator(): MatPaginator | null {\r\n    return this._paginator;\r\n  }\r\n\r\n  private _paginator: MatPaginator | null = null;\r\n  private _onPage$ = new Subject<PageEvent>();\r\n  private ngUnsubscribe$ = new Subject<void>();\r\n\r\n  constructor(private cd: ChangeDetectorRef) {\r\n    this._onPage$\r\n      .pipe(\r\n        debounce(() => (this.pageDebounce == null ? of(null) : timer(this.pageDebounce))),\r\n        takeUntil(this.ngUnsubscribe$)\r\n      )\r\n      .subscribe(pageEvent => this.page.emit(pageEvent));\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.pageSize || changes.dataLength) {\r\n      const pageCount = Math.ceil(this.dataLength / this.pageSize);\r\n      this.pages = Array.from({ length: pageCount }, (_, k) => k + 1);\r\n\r\n      this.cd.markForCheck();\r\n    }\r\n\r\n    if (changes.intl) {\r\n      this.updatePaginatorIntl();\r\n    }\r\n  }\r\n\r\n  public onPage(event: PageEvent) {\r\n    this._onPage$.next(event);\r\n  }\r\n\r\n  public goToPage(event: MatSelectChange) {\r\n    const nextPage = event.value - 1;\r\n    this._onPage$.next({\r\n      length: this.dataLength,\r\n      pageIndex: nextPage,\r\n      pageSize: this.pageSize,\r\n      previousPageIndex: nextPage - 1,\r\n    } as PageEvent);\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this.ngUnsubscribe$.next();\r\n    this.ngUnsubscribe$.complete();\r\n\r\n    this._onPage$.complete();\r\n  }\r\n\r\n  private updatePaginatorIntl() {\r\n    if (this.paginator && this.intl) {\r\n      this.paginator._intl.firstPageLabel = this.intl.firstPageLabel;\r\n      this.paginator._intl.lastPageLabel = this.intl.lastPageLabel;\r\n      this.paginator._intl.previousPageLabel = this.intl.previousPageLabel;\r\n      this.paginator._intl.nextPageLabel = this.intl.nextPageLabel;\r\n      this.paginator._intl.itemsPerPageLabel = this.intl.itemsPerPageLabel;\r\n      this.paginator._intl.getRangeLabel = this.intl.getRangeLabel;\r\n      this.paginator._intl.changes.next();\r\n    }\r\n  }\r\n}\r\n","\n    <div\n      class=\"ps-table-row-detail__container\"\n      [@detailExpand]=\"animationState\"\n      (@detailExpand.start)=\"rowDetailToggleStart()\"\n      (@detailExpand.done)=\"rowDetailToggleEnd()\"\n    >\n      <!--\n        ps-iframe autoheight funktioniert nur, wenn das iframe beim Initialisieren sichtbar ist.\n        Deshalb sorgen wir hier mit ngIf dafür, das es erst beim Aufklappen initialisiert wird.\n      -->\n      <ng-container *ngIf=\"visible\">\n        <ng-template [ngTemplateOutlet]=\"rowDetail.template\" [ngTemplateOutletContext]=\"{ $implicit: element }\"> </ng-template>\n      </ng-container>\n    </div>\n  ","import { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\nimport { PsTableRowDetailDirective } from '../directives/table.directives';\r\n\r\n@Component({\r\n  selector: 'ps-table-row-detail',\r\n  template: `\r\n    <div\r\n      class=\"ps-table-row-detail__container\"\r\n      [@detailExpand]=\"animationState\"\r\n      (@detailExpand.start)=\"rowDetailToggleStart()\"\r\n      (@detailExpand.done)=\"rowDetailToggleEnd()\"\r\n    >\r\n      <!--\r\n        ps-iframe autoheight funktioniert nur, wenn das iframe beim Initialisieren sichtbar ist.\r\n        Deshalb sorgen wir hier mit ngIf dafür, das es erst beim Aufklappen initialisiert wird.\r\n      -->\r\n      <ng-container *ngIf=\"visible\">\r\n        <ng-template [ngTemplateOutlet]=\"rowDetail.template\" [ngTemplateOutletContext]=\"{ $implicit: element }\"> </ng-template>\r\n      </ng-container>\r\n    </div>\r\n  `,\r\n  styles: [\r\n    `\r\n      .ps-table-row-detail__container {\r\n        overflow: hidden;\r\n      }\r\n    `,\r\n  ],\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({ height: '0px', minHeight: '0', display: 'none' })),\r\n      state('expanded', style({ height: '*', minHeight: '20px' })),\r\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\r\n    ]),\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class TableRowDetailComponent {\r\n  @Input() public rowDetail: PsTableRowDetailDirective;\r\n  @Input() public element: any;\r\n  @Input() public show: boolean;\r\n\r\n  public get animationState(): string {\r\n    return this.show ? 'expanded' : 'collapsed';\r\n  }\r\n\r\n  /** Expanded Items, die sichtbar sind (wird beim Start der Aufklapp-Animation und am Ende der Zuklapp-Animation gesetzt) */\r\n  public visible = false;\r\n\r\n  public rowDetailToggleStart() {\r\n    if (this.show) {\r\n      this.visible = true;\r\n    }\r\n  }\r\n\r\n  public rowDetailToggleEnd() {\r\n    if (!this.show) {\r\n      this.visible = false;\r\n    }\r\n  }\r\n}\r\n","\n    <mat-form-field>\n      <mat-label>{{ intl.searchLabel }}</mat-label>\n      <input #i type=\"text\" matInput [value]=\"searchText\" autocomplete=\"off\" (keyup)=\"onSearch($event.key, i.value)\" />\n      <button\n        *ngIf=\"searchText || currentSearchText\"\n        mat-icon-button\n        matSuffix\n        class=\"ps-table-search__button\"\n        (click)=\"onSearch('Escape', null)\"\n      >\n        <mat-icon>close</mat-icon>\n      </button>\n    </mat-form-field>\n  ","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, OnInit, Output, ViewEncapsulation } from '@angular/core';\r\nimport { IPsTableIntlTexts } from '@prosoft/components/core';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'ps-table-search',\r\n  template: `\r\n    <mat-form-field>\r\n      <mat-label>{{ intl.searchLabel }}</mat-label>\r\n      <input #i type=\"text\" matInput [value]=\"searchText\" autocomplete=\"off\" (keyup)=\"onSearch($event.key, i.value)\" />\r\n      <button\r\n        *ngIf=\"searchText || currentSearchText\"\r\n        mat-icon-button\r\n        matSuffix\r\n        class=\"ps-table-search__button\"\r\n        (click)=\"onSearch('Escape', null)\"\r\n      >\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n  `,\r\n  styles: [\r\n    `\r\n      ps-table-search {\r\n        display: block;\r\n      }\r\n      ps-table-search .mat-form-field {\r\n        width: 100%;\r\n      }\r\n      .ps-table-search__button {\r\n        color: black;\r\n      }\r\n    `,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PsTableSearchComponent implements OnInit, OnDestroy {\r\n  @Input() public intl: IPsTableIntlTexts;\r\n  @Input() public searchText: string;\r\n  @Input() public debounceTime: number;\r\n  @Output() public searchChanged = new EventEmitter<string>();\r\n\r\n  public currentSearchText = '';\r\n\r\n  private _searchValueChanged$ = new Subject<void>();\r\n\r\n  public ngOnInit() {\r\n    this._searchValueChanged$.pipe(debounceTime(this.debounceTime)).subscribe(() => {\r\n      this.emitChange();\r\n    });\r\n  }\r\n\r\n  public onSearch(key: string, value: string) {\r\n    if (key.startsWith('Esc')) {\r\n      this.currentSearchText = '';\r\n      this.emitChange();\r\n      return;\r\n    }\r\n\r\n    this.currentSearchText = value;\r\n    this._searchValueChanged$.next();\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this._searchValueChanged$.complete();\r\n  }\r\n\r\n  private emitChange() {\r\n    if (this.currentSearchText !== this.searchText) {\r\n      this.searchText = this.currentSearchText;\r\n      this.searchChanged.emit(this.currentSearchText);\r\n    }\r\n  }\r\n}\r\n","<mat-card *ngIf=\"settings$ | async as settings\">\r\n  <!-- h1 is the table title -->\r\n  <h2>{{ intl.settingsLabel }}</h2>\r\n  <div class=\"ps-table-settings__form\">\r\n    <div class=\"ps-table-settings__form__display-columns\">\r\n      <strong>{{ intl.displayedColumnsLabel }}</strong>\r\n      <ng-container *ngFor=\"let columnDef of columnDefinitions\">\r\n        <mat-checkbox\r\n          [disabled]=\"settings.sortColumn === columnDef.property || columnDef.mandatory\"\r\n          *ngIf=\"columnDef.header && columnDef.property\"\r\n          [checked]=\"columnVisible(settings, columnDef)\"\r\n          (change)=\"onColumnVisibilityChange($event, settings, columnDef)\"\r\n        >\r\n          {{ columnDef.header }}\r\n        </mat-checkbox>\r\n      </ng-container>\r\n    </div>\r\n\r\n    <ps-table-sort\r\n      *ngIf=\"sortDefinitions.length\"\r\n      [sortColumn]=\"settings.sortColumn\"\r\n      [sortDirection]=\"settings.sortDirection\"\r\n      [sortDefinitions]=\"sortDefinitions\"\r\n      [intl]=\"intl\"\r\n      (sortChanged)=\"onSortChanged($event, settings)\"\r\n    ></ps-table-sort>\r\n\r\n    <mat-form-field>\r\n      <mat-label>{{ intl.itemsPerPageLabel }}</mat-label>\r\n      <mat-select [(value)]=\"settings.pageSize\">\r\n        <mat-option *ngFor=\"let pageSizeOption of pageSizeOptions\" [value]=\"pageSizeOption\">{{ pageSizeOption }}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n  <ng-container [ngTemplateOutlet]=\"customSettings\" [ngTemplateOutletContext]=\"{ $implicit: settings }\"></ng-container>\r\n  <mat-card-actions style=\"text-align: right\">\r\n    <button mat-raised-button color=\"primary\" (click)=\"onSaveClick(settings)\">{{ intl.saveLabel }}</button>\r\n    <button style=\"margin-left: 1em\" mat-stroked-button (click)=\"onCancelClick()\">{{ intl.cancelLabel }}</button>\r\n  </mat-card-actions>\r\n</mat-card>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\r\nimport { MatCheckboxChange } from '@angular/material/checkbox';\r\nimport { IPsTableIntlTexts } from '@prosoft/components/core';\r\nimport { combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { PsTableColumnDirective } from '../directives/table.directives';\r\nimport { IPsTableSortDefinition } from '../models';\r\nimport { IPsTableSetting, PsTableSettingsService } from '../services/table-settings.service';\r\n\r\n@Component({\r\n  selector: 'ps-table-settings',\r\n  templateUrl: './table-settings.component.html',\r\n  styles: [\r\n    `\r\n      .ps-table-settings__form {\r\n        display: flex;\r\n        justify-content: space-between;\r\n      }\r\n      .ps-table-settings__form > * {\r\n        min-width: 20%;\r\n      }\r\n      .ps-table-settings__form__display-columns {\r\n        display: flex;\r\n        flex-direction: column;\r\n      }\r\n    `,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PsTableSettingsComponent implements OnInit {\r\n  @Input() public intl: IPsTableIntlTexts;\r\n  @Input() public tableId: string;\r\n  @Input() public columnDefinitions: PsTableColumnDirective[] = [];\r\n  @Input() public sortDefinitions: IPsTableSortDefinition[] = [];\r\n  @Input() public pageSizeOptions: number[];\r\n  @Input() public customSettings: TemplateRef<any> | null = null;\r\n\r\n  @Output() public settingsSaved = new EventEmitter<void>();\r\n  @Output() public settingsAborted = new EventEmitter<void>();\r\n\r\n  public settings$: Observable<IPsTableSetting>;\r\n\r\n  private _settingSaveSub: Subscription;\r\n\r\n  constructor(public settingsService: PsTableSettingsService) {}\r\n\r\n  public ngOnInit(): void {\r\n    this.settings$ = combineLatest([this.settingsService.settings$, this.settingsService.defaultPageSize$]).pipe(\r\n      map(([allSettings, defaultPageSize]) => {\r\n        if (allSettings[this.tableId]) {\r\n          return allSettings[this.tableId];\r\n        }\r\n\r\n        return <IPsTableSetting>{\r\n          columnBlacklist: [],\r\n          pageSize: defaultPageSize || 15,\r\n          sortColumn: null,\r\n          sortDirection: 'asc',\r\n        };\r\n      })\r\n    );\r\n  }\r\n\r\n  public columnVisible(settings: IPsTableSetting, columnDef: PsTableColumnDirective) {\r\n    return !settings.columnBlacklist.some(x => x === columnDef.property);\r\n  }\r\n\r\n  public onSortChanged(event: { sortColumn: string; sortDirection: 'asc' | 'desc' }, settings: IPsTableSetting) {\r\n    if (settings.sortColumn !== event.sortColumn) {\r\n      settings.sortColumn = event.sortColumn;\r\n      settings.columnBlacklist = settings.columnBlacklist.filter(x => x !== event.sortColumn);\r\n    }\r\n    settings.sortDirection = event.sortDirection;\r\n  }\r\n\r\n  public onColumnVisibilityChange(event: MatCheckboxChange, settings: IPsTableSetting, columnDef: PsTableColumnDirective) {\r\n    if (event.checked) {\r\n      settings.columnBlacklist = settings.columnBlacklist.filter(x => x !== columnDef.property);\r\n    } else if (!settings.columnBlacklist.find(x => x === columnDef.property)) {\r\n      settings.columnBlacklist.push(columnDef.property);\r\n    }\r\n  }\r\n\r\n  public onSaveClick(setting: IPsTableSetting) {\r\n    if (this._settingSaveSub) {\r\n      this._settingSaveSub.unsubscribe();\r\n    }\r\n    this._settingSaveSub = this.settingsService.save(this.tableId, setting).subscribe(() => this.settingsSaved.emit());\r\n  }\r\n\r\n  public onCancelClick() {\r\n    this.settingsAborted.emit();\r\n  }\r\n}\r\n","\n    <mat-form-field>\n      <mat-label>{{ intl.sortLabel }}</mat-label>\n      <mat-select [value]=\"sortColumn\" (selectionChange)=\"onSortColumnChange($event)\">\n        <mat-option *ngFor=\"let sortDefinition of sortDefinitions\" [value]=\"sortDefinition.prop\">{{\n          sortDefinition.displayName\n        }}</mat-option>\n      </mat-select>\n    </mat-form-field>\n    <button\n      mat-mini-fab\n      type=\"button\"\n      (click)=\"onSortSirectionChange('desc')\"\n      class=\"ps-table-sort__dir-button\"\n      [class.ps-table-sort__dir-button--inactive]=\"sortDirection === 'asc'\"\n    >\n      <mat-icon>arrow_downward</mat-icon>\n    </button>\n    <button\n      mat-mini-fab\n      type=\"button\"\n      (click)=\"onSortSirectionChange('asc')\"\n      class=\"ps-table-sort__dir-button\"\n      [class.ps-table-sort__dir-button--inactive]=\"sortDirection === 'desc'\"\n    >\n      <mat-icon>arrow_upward</mat-icon>\n    </button>\n  ","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { MatSelectChange } from '@angular/material/select';\r\nimport { IPsTableIntlTexts } from '@prosoft/components/core';\r\nimport { IPsTableSortDefinition } from '../models';\r\n\r\n@Component({\r\n  selector: 'ps-table-sort',\r\n  template: `\r\n    <mat-form-field>\r\n      <mat-label>{{ intl.sortLabel }}</mat-label>\r\n      <mat-select [value]=\"sortColumn\" (selectionChange)=\"onSortColumnChange($event)\">\r\n        <mat-option *ngFor=\"let sortDefinition of sortDefinitions\" [value]=\"sortDefinition.prop\">{{\r\n          sortDefinition.displayName\r\n        }}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <button\r\n      mat-mini-fab\r\n      type=\"button\"\r\n      (click)=\"onSortSirectionChange('desc')\"\r\n      class=\"ps-table-sort__dir-button\"\r\n      [class.ps-table-sort__dir-button--inactive]=\"sortDirection === 'asc'\"\r\n    >\r\n      <mat-icon>arrow_downward</mat-icon>\r\n    </button>\r\n    <button\r\n      mat-mini-fab\r\n      type=\"button\"\r\n      (click)=\"onSortSirectionChange('asc')\"\r\n      class=\"ps-table-sort__dir-button\"\r\n      [class.ps-table-sort__dir-button--inactive]=\"sortDirection === 'desc'\"\r\n    >\r\n      <mat-icon>arrow_upward</mat-icon>\r\n    </button>\r\n  `,\r\n  styles: [\r\n    `\r\n      ps-table-sort {\r\n        display: grid;\r\n        grid-template-columns: 1fr min-content min-content;\r\n      }\r\n\r\n      .ps-table-sort__dir-button {\r\n        width: 28px;\r\n        height: 28px;\r\n        line-height: 28px;\r\n        margin-top: 16px;\r\n        margin-left: 0.2em;\r\n      }\r\n\r\n      .ps-table-sort__dir-button .mat-button-wrapper {\r\n        padding: 0;\r\n      }\r\n\r\n      .ps-table-sort__dir-button--inactive {\r\n        background-color: transparent !important;\r\n        color: black !important;\r\n      }\r\n    `,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PsTableSortComponent {\r\n  @Input() public intl: IPsTableIntlTexts;\r\n  @Input() public sortColumn: string;\r\n  @Input() public sortDirection: 'asc' | 'desc';\r\n  @Input() public sortDefinitions: IPsTableSortDefinition[] = [];\r\n  @Output() public sortChanged = new EventEmitter<{ sortColumn: string; sortDirection: 'asc' | 'desc' }>();\r\n\r\n  public onSortColumnChange(event: MatSelectChange) {\r\n    if (this.sortColumn !== event.value) {\r\n      this.sortColumn = event.value;\r\n      this.emitChange();\r\n    }\r\n  }\r\n\r\n  public onSortSirectionChange(dir: 'asc' | 'desc') {\r\n    if (this.sortDirection !== dir) {\r\n      this.sortDirection = dir;\r\n      this.emitChange();\r\n    }\r\n  }\r\n\r\n  private emitChange() {\r\n    this.sortChanged.emit({\r\n      sortColumn: this.sortColumn,\r\n      sortDirection: this.sortDirection,\r\n    });\r\n  }\r\n}\r\n","<ps-flip-container>\r\n  <div *psFlipContainerFront>\r\n    <ps-table-header\r\n      [intl]=\"intl\"\r\n      [caption]=\"caption\"\r\n      [topButtonSection]=\"topButtonSection\"\r\n      [selectedRows]=\"dataSource.selectionModel.selected\"\r\n      [customHeader]=\"customHeader\"\r\n      [showSorting]=\"showSorting\"\r\n      [sortColumn]=\"sortColumn\"\r\n      [sortDirection]=\"sortDirection\"\r\n      [sortDefinitions]=\"sortDefinitions\"\r\n      [filterable]=\"filterable\"\r\n      [searchText]=\"filterText\"\r\n      (sortChanged)=\"onSortChanged($event)\"\r\n      (searchChanged)=\"onSearchChanged($event)\"\r\n    ></ps-table-header>\r\n\r\n    <div [class.ps-table__shadow]=\"cardLayout\">\r\n      <ps-table-data\r\n        [intl]=\"intl\"\r\n        [dataSource]=\"dataSource\"\r\n        [tableId]=\"tableId\"\r\n        [rowActions]=\"rowActions\"\r\n        [rowDetail]=\"rowDetail\"\r\n        [columnDefs]=\"columnDefs\"\r\n        [listActions]=\"listActions\"\r\n        [refreshable]=\"refreshable\"\r\n        [settingsEnabled]=\"settingsEnabled\"\r\n        [showListActions]=\"showListActions\"\r\n        [displayedColumns]=\"displayedColumns\"\r\n        (showSettingsClicked)=\"flipContainer.toggleFlip()\"\r\n        (refreshDataClicked)=\"onRefreshDataClicked()\"\r\n      ></ps-table-data>\r\n\r\n      <div class=\"ps-table__no-entries-text\" *ngIf=\"showNoEntriesText\">{{ intl.noEntriesLabel }}</div>\r\n      <div class=\"ps-table__error-text\" *ngIf=\"showError\">{{ errorMessage }}</div>\r\n      <div class=\"ps-table__loading-container\" *ngIf=\"showLoading\">\r\n        <mat-spinner class=\"ps-table__loading-spinner\"></mat-spinner>\r\n      </div>\r\n      <ps-table-pagination\r\n        [pageSize]=\"pageSize\"\r\n        [dataLength]=\"dataLength\"\r\n        [pageIndex]=\"pageIndex\"\r\n        [pageSizeOptions]=\"pageSizeOptions\"\r\n        [intl]=\"intl\"\r\n        [pageDebounce]=\"pageDebounce\"\r\n        (page)=\"onPage($event)\"\r\n      ></ps-table-pagination>\r\n    </div>\r\n  </div>\r\n  <div *psFlipContainerBack>\r\n    <ps-table-settings\r\n      *ngIf=\"settingsEnabled\"\r\n      [tableId]=\"tableId\"\r\n      [intl]=\"intl\"\r\n      [columnDefinitions]=\"columnDefs\"\r\n      [sortDefinitions]=\"sortDefinitions\"\r\n      [pageSizeOptions]=\"pageSizeOptions\"\r\n      (settingsAborted)=\"flipContainer.toggleFlip()\"\r\n      (settingsSaved)=\"onSettingsSaved()\"\r\n      [customSettings]=\"customSettings\"\r\n    >\r\n    </ps-table-settings>\r\n  </div>\r\n</ps-flip-container>\r\n","import {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Inject,\r\n  Input,\r\n  LOCALE_ID,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  SimpleChanges,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { PageEvent } from '@angular/material/paginator';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { IPsTableIntlTexts, PsExceptionMessageExtractor, PsIntlService } from '@prosoft/components/core';\r\nimport { PsFlipContainerComponent } from '@prosoft/components/flip-container';\r\nimport { combineLatest, Subject, Subscription } from 'rxjs';\r\nimport { debounceTime, map, startWith } from 'rxjs/operators';\r\nimport { PsTableDataSource } from './data/table-data-source';\r\nimport {\r\n  PsTableColumnDirective,\r\n  PsTableCustomHeaderDirective,\r\n  PsTableCustomSettingsDirective,\r\n  PsTableListActionsDirective,\r\n  PsTableRowActionsDirective,\r\n  PsTableRowDetailDirective,\r\n  PsTableTopButtonSectionDirective,\r\n} from './directives/table.directives';\r\nimport { PsTableStateManager, PsTableUrlStateManager } from './helper/state-manager';\r\nimport { IPsTableSortDefinition, IPsTableUpdateDataInfo } from './models';\r\nimport { IPsTableSetting, PsTableSettingsService } from './services/table-settings.service';\r\n\r\n@Component({\r\n  selector: 'ps-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PsTableComponent implements OnInit, OnChanges, AfterContentInit, OnDestroy {\r\n  @Input() public caption: string;\r\n  @Input() public dataSource: PsTableDataSource<{ [key: string]: any }>;\r\n  @Input() public tableId: string;\r\n  @Input() public intlOverride: Partial<IPsTableIntlTexts>;\r\n  @Input()\r\n  public set sortDefinitions(value: IPsTableSortDefinition[]) {\r\n    if (!value) {\r\n      return;\r\n    }\r\n\r\n    this._sortDefinitions = [...value];\r\n    this.mergeSortDefinitions();\r\n  }\r\n\r\n  public get sortDefinitions(): IPsTableSortDefinition[] {\r\n    return this._mergedSortDefinitions;\r\n  }\r\n\r\n  @Input() public refreshable = true;\r\n  @Input() public filterable = true;\r\n  @Input() public showSettings = true;\r\n  @Input() public pageDebounce: number;\r\n\r\n  @Input()\r\n  @HostBinding('class.mat-elevation-z3')\r\n  public cardLayout = true;\r\n\r\n  @Input()\r\n  @HostBinding('class.ps-table--striped')\r\n  public striped = false;\r\n\r\n  @Input() stateManager: PsTableStateManager = new PsTableUrlStateManager(this.router, this.route);\r\n\r\n  @Output() public page = new EventEmitter<PageEvent>();\r\n\r\n  @ViewChild(PsFlipContainerComponent, { static: true }) public flipContainer: PsFlipContainerComponent | null = null;\r\n\r\n  @ContentChild(PsTableCustomHeaderDirective, { read: TemplateRef, static: false })\r\n  public customHeader: TemplateRef<any> | null = null;\r\n\r\n  @ContentChild(PsTableCustomSettingsDirective, { read: TemplateRef, static: false })\r\n  public customSettings: TemplateRef<any> | null = null;\r\n\r\n  @ContentChild(PsTableTopButtonSectionDirective, { read: TemplateRef, static: false })\r\n  public topButtonSection: TemplateRef<any> | null = null;\r\n\r\n  @ContentChild(PsTableListActionsDirective, { read: TemplateRef, static: false })\r\n  public listActions: TemplateRef<any> | null = null;\r\n\r\n  @ContentChild(PsTableRowActionsDirective, { read: TemplateRef, static: false })\r\n  public rowActions: TemplateRef<any> | null = null;\r\n\r\n  @ContentChildren(PsTableColumnDirective)\r\n  public set columnDefsSetter(queryList: QueryList<PsTableColumnDirective>) {\r\n    this.columnDefs = [...queryList.toArray()];\r\n    this.mergeSortDefinitions();\r\n  }\r\n\r\n  @HostBinding('class.ps-table--row-detail')\r\n  @ContentChild(PsTableRowDetailDirective, { static: false })\r\n  public rowDetail: PsTableRowDetailDirective | null = null;\r\n\r\n  public pageSizeOptions: number[];\r\n  public columnDefs: PsTableColumnDirective[] = [];\r\n\r\n  public displayedColumns: string[] = [];\r\n\r\n  public get sortDirection(): 'asc' | 'desc' {\r\n    return this.dataSource.sortDirection;\r\n  }\r\n  public set sortDirection(value: 'asc' | 'desc') {\r\n    this.dataSource.sortDirection = value;\r\n  }\r\n\r\n  public get sortColumn(): string {\r\n    return this.dataSource.sortColumn;\r\n  }\r\n  public set sortColumn(value: string) {\r\n    this.dataSource.sortColumn = value;\r\n  }\r\n\r\n  public get pageIndex(): number {\r\n    return this.dataSource.pageIndex;\r\n  }\r\n  public set pageIndex(value: number) {\r\n    this.dataSource.pageIndex = value;\r\n  }\r\n\r\n  public get pageSize(): number {\r\n    return this.dataSource.pageSize;\r\n  }\r\n  public set pageSize(value: number) {\r\n    this.dataSource.pageSize = value;\r\n  }\r\n\r\n  public get dataLength(): number {\r\n    return this.dataSource.dataLength;\r\n  }\r\n\r\n  public get filterText(): string {\r\n    return this.dataSource.filter;\r\n  }\r\n  public set filterText(value: string) {\r\n    this.dataSource.filter = value;\r\n  }\r\n\r\n  public get showNoEntriesText(): boolean {\r\n    return !this.dataSource.loading && !this.dataSource.error && !this.dataSource.visibleRows.length;\r\n  }\r\n\r\n  public get errorMessage(): string {\r\n    return this.exceptionMessageExtractor.extractErrorMessage(this.dataSource.error);\r\n  }\r\n  public get showError(): boolean {\r\n    return !!this.dataSource.error;\r\n  }\r\n  public get showLoading(): boolean {\r\n    return this.dataSource.loading;\r\n  }\r\n  public get settingsEnabled(): boolean {\r\n    return !!(this.tableId && this.settingsService.settingsEnabled && this.showSettings);\r\n  }\r\n  public get showListActions(): boolean {\r\n    return !!this.listActions || this.settingsEnabled || this.refreshable;\r\n  }\r\n  public get showSorting(): boolean {\r\n    return !!this._mergedSortDefinitions.length;\r\n  }\r\n\r\n  public intl: IPsTableIntlTexts;\r\n\r\n  private subscriptions: Subscription[] = [];\r\n  private _sortDefinitions: IPsTableSortDefinition[] = [];\r\n  private _mergedSortDefinitions: IPsTableSortDefinition[] = [];\r\n  private _intlChangesSub: Subscription;\r\n\r\n  private ngUnsubscribe$ = new Subject<void>();\r\n\r\n  constructor(\r\n    public intlService: PsIntlService,\r\n    public settingsService: PsTableSettingsService,\r\n    private exceptionMessageExtractor: PsExceptionMessageExtractor,\r\n    private cd: ChangeDetectorRef,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    @Inject(LOCALE_ID) private _locale: string\r\n  ) {}\r\n\r\n  public ngOnInit() {\r\n    this._intlChangesSub = this.intlService.intlChanged$.pipe(startWith(null as any)).subscribe(() => {\r\n      this.updateIntl();\r\n      this.cd.markForCheck();\r\n    });\r\n\r\n    this.pageSizeOptions = this.settingsService.pageSizeOptions;\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.intlOverride) {\r\n      this.updateIntl();\r\n    }\r\n\r\n    if (changes.dataSource) {\r\n      this.dataSource.locale = this._locale;\r\n      if (!changes.dataSource.firstChange) {\r\n        this.dataSource.updateData();\r\n      }\r\n    }\r\n  }\r\n\r\n  public ngAfterContentInit(): void {\r\n    // This can't happen earlier, otherwise the ContentChilds would not be resolved yet\r\n    this.initListSettingsSubscription();\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.subscriptions) {\r\n      this.subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n    if (this._intlChangesSub) {\r\n      this._intlChangesSub.unsubscribe();\r\n    }\r\n\r\n    this.ngUnsubscribe$.next();\r\n    this.ngUnsubscribe$.complete();\r\n  }\r\n\r\n  public onSearchChanged(value: string) {\r\n    this.filterText = value;\r\n    this.requestUpdate();\r\n  }\r\n\r\n  public onSortChanged(event: { sortColumn: string; sortDirection: 'asc' | 'desc' }) {\r\n    this.sortColumn = event.sortColumn;\r\n    this.sortDirection = event.sortDirection;\r\n    this.requestUpdate();\r\n  }\r\n\r\n  public onPage(event: PageEvent) {\r\n    this.pageIndex = event.pageIndex;\r\n    this.pageSize = event.pageSize;\r\n    this.page.emit(event);\r\n    this.requestUpdate();\r\n  }\r\n\r\n  public onRefreshDataClicked() {\r\n    this.dataSource.updateData();\r\n  }\r\n\r\n  public onSettingsSaved() {\r\n    this.stateManager.remove(this.tableId);\r\n    this.flipContainer.toggleFlip();\r\n  }\r\n\r\n  public toggleRowDetail(item: any, open?: boolean) {\r\n    if (!this.rowDetail) {\r\n      return;\r\n    }\r\n\r\n    this.rowDetail.toggle(item, open);\r\n  }\r\n\r\n  private requestUpdate() {\r\n    const updateInfo = this.dataSource.getUpdateDataInfo();\r\n    this.stateManager.requestUpdate(this.tableId, updateInfo);\r\n  }\r\n\r\n  private initListSettingsSubscription() {\r\n    const tableSettings$ = this.settingsService.settings$.pipe(\r\n      map(settings => {\r\n        if (this.tableId && settings && settings[this.tableId]) {\r\n          return settings[this.tableId];\r\n        }\r\n        return null;\r\n      })\r\n    );\r\n    const stateSettings$ = this.stateManager.createStateSource(this.tableId);\r\n    this.subscriptions.push(\r\n      combineLatest([stateSettings$, tableSettings$, this.settingsService.defaultPageSize$])\r\n        .pipe(\r\n          // guards agains multiple data updates, when multiple emits happen at the same time.\r\n          debounceTime(0)\r\n        )\r\n        .subscribe({\r\n          next: ([urlSettings, savedSettings, defaultPageSize]) => {\r\n            // Paging, Sorting, Filter und Display Columns updaten\r\n            this.updateTableState(savedSettings, urlSettings, defaultPageSize);\r\n\r\n            // Row Detail Expander aktivieren\r\n            if (this.rowDetail && this.rowDetail.showToggleColumn) {\r\n              this.displayedColumns.splice(0, 0, 'rowDetailExpander');\r\n            }\r\n\r\n            // Selektierung der Rows aktivieren\r\n            if (this.listActions) {\r\n              this.displayedColumns.splice(0, 0, 'select');\r\n            }\r\n\r\n            // Selektierungs- und Row-Aktionen aktivieren\r\n            if (this.showListActions || this.rowActions) {\r\n              this.displayedColumns.push('options');\r\n            }\r\n\r\n            this.dataSource.updateData(false);\r\n            this.cd.markForCheck();\r\n          },\r\n          error: (err: Error | any) => {\r\n            this.dataSource.error = err;\r\n          },\r\n        })\r\n    );\r\n  }\r\n\r\n  private updateTableState(tableSettings: Partial<IPsTableSetting>, urlSettings: Partial<IPsTableUpdateDataInfo>, defaultPageSize: number) {\r\n    tableSettings = tableSettings || {};\r\n    urlSettings = urlSettings || {};\r\n\r\n    this.pageIndex = Math.max(urlSettings.currentPage || 0, 0);\r\n    this.pageSize = Math.max(urlSettings.pageSize || tableSettings.pageSize || defaultPageSize, 1);\r\n    this.sortColumn = urlSettings.sortColumn || tableSettings.sortColumn || null;\r\n    this.sortDirection = urlSettings.sortDirection || tableSettings.sortDirection || 'asc';\r\n    this.filterText = urlSettings.searchText || '';\r\n\r\n    this.displayedColumns = this.columnDefs.map(x => x.property);\r\n    if (tableSettings.columnBlacklist && tableSettings.columnBlacklist.length) {\r\n      this.displayedColumns = this.displayedColumns.filter(x => !tableSettings.columnBlacklist.includes(x));\r\n    }\r\n  }\r\n\r\n  private mergeSortDefinitions() {\r\n    const sortableColumns = this.columnDefs\r\n      .filter(def => def.sortable)\r\n      .map(def => <IPsTableSortDefinition>{ prop: def.property, displayName: def.header });\r\n\r\n    this._mergedSortDefinitions = sortableColumns\r\n      .concat(this._sortDefinitions)\r\n      .filter((value, index, self) => self.indexOf(value) === index)\r\n      .sort((a, b) => a.displayName.toLocaleLowerCase().localeCompare(b.displayName.toLocaleLowerCase()));\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  private updateIntl() {\r\n    const intl = this.intlService.get('table');\r\n    this.intl = this.intlService.merge(intl, this.intlOverride);\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { PsFlipContainerModule } from '@prosoft/components/flip-container';\r\nimport { PsSavebarModule } from '@prosoft/components/savebar';\r\nimport {\r\n  PsTableColumnDirective,\r\n  PsTableColumnHeaderTemplateDirective,\r\n  PsTableColumnTemplateDirective,\r\n  PsTableCustomHeaderDirective,\r\n  PsTableCustomSettingsDirective,\r\n  PsTableListActionsDirective,\r\n  PsTableRowActionsDirective,\r\n  PsTableRowDetailDirective,\r\n  PsTableRowDetailTemplateDirective,\r\n  PsTableTopButtonSectionDirective,\r\n} from './directives/table.directives';\r\nimport { PsTableDataComponent } from './subcomponents/table-data.component';\r\nimport { PsTableHeaderComponent } from './subcomponents/table-header.component';\r\nimport { PsTablePaginationComponent } from './subcomponents/table-pagination.component';\r\nimport { TableRowDetailComponent } from './subcomponents/table-row-detail.component';\r\nimport { PsTableSearchComponent } from './subcomponents/table-search.component';\r\nimport { PsTableSettingsComponent } from './subcomponents/table-settings.component';\r\nimport { PsTableSortComponent } from './subcomponents/table-sort.component';\r\nimport { PsTableComponent } from './table.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PsTableComponent,\r\n    PsTableDataComponent,\r\n    PsTableSettingsComponent,\r\n    PsTableHeaderComponent,\r\n    PsTableSortComponent,\r\n    PsTableSearchComponent,\r\n    TableRowDetailComponent,\r\n    PsTablePaginationComponent,\r\n    PsTableColumnDirective,\r\n    PsTableColumnTemplateDirective,\r\n    PsTableColumnHeaderTemplateDirective,\r\n    PsTableTopButtonSectionDirective,\r\n    PsTableListActionsDirective,\r\n    PsTableRowActionsDirective,\r\n    PsTableCustomHeaderDirective,\r\n    PsTableRowDetailDirective,\r\n    PsTableRowDetailTemplateDirective,\r\n    PsTableCustomSettingsDirective,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatCheckboxModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatMenuModule,\r\n    MatSelectModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatProgressSpinnerModule,\r\n    PsFlipContainerModule,\r\n    PsSavebarModule,\r\n  ],\r\n  exports: [\r\n    PsTableComponent,\r\n    PsTableColumnDirective,\r\n    PsTableColumnTemplateDirective,\r\n    PsTableColumnHeaderTemplateDirective,\r\n    PsTableTopButtonSectionDirective,\r\n    PsTableListActionsDirective,\r\n    PsTableRowActionsDirective,\r\n    PsTableCustomHeaderDirective,\r\n    PsTableRowDetailDirective,\r\n    PsTableRowDetailTemplateDirective,\r\n    PsTableCustomSettingsDirective,\r\n  ],\r\n})\r\nexport class PsTableModule {}\r\n","<div class=\"app-table-demo__settings\">\r\n  <mat-card class=\"app-table-demo__settings-box\">\r\n    <strong>ps-table</strong>\r\n    <mat-checkbox [(ngModel)]=\"refreshable\">[refreshable]</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"filterable\">[filterable]</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"showSettings\">[showSettings]</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"cardLayout\">[cardLayout]</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"striped\">[striped]</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"sortDefinitions\"\r\n      >[sortDefinitions]=\"[&#x7B; displayName: 'custom: `$&#x7B;boolean&#x7D;$&#x7B;string&#x7D;`', prop: 'hiddenSortable'\r\n      &#x7D;]\"</mat-checkbox\r\n    >\r\n    <mat-form-field>\r\n      <mat-label>[caption]</mat-label>\r\n      <input matInput type=\"string\" [(ngModel)]=\"caption\" />\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <mat-label>[dataSource]</mat-label>\r\n      <mat-select [(ngModel)]=\"dataSourceType\" (selectionChange)=\"onDataSourceTypeChanged($event)\">\r\n        <mat-option [value]=\"'client'\">sample data (client filter/sort/paging)</mat-option>\r\n        <mat-option [value]=\"'error'\">error while loading</mat-option>\r\n        <mat-option [value]=\"'loading'\">endless loading</mat-option>\r\n        <mat-option [value]=\"'empty'\">no data</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <input matInput type=\"number\" [(ngModel)]=\"pageDebounce\" />\r\n      <mat-label>Page debounce in ms</mat-label>\r\n    </mat-form-field>\r\n    <div>(page) $event = &#x7B; pageIndex: number; previousPageIndex?: number; pageSize: number; length: number; &#x7D;</div>\r\n\r\n    <mat-checkbox [(ngModel)]=\"disableAllSortable\" (change)=\"rebuildTable()\"\r\n      >set all ps-table-column [sortable]=\"false\" and ps-table [sortDefinitions]=\"null\"</mat-checkbox\r\n    >\r\n  </mat-card>\r\n\r\n  <mat-card class=\"app-table-demo__settings-box\">\r\n    <strong>ps-table-column (all inputs are only initially settable) (demo for date column)</strong>\r\n    <mat-checkbox [(ngModel)]=\"columnMandatory\">[mandatory]</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"columnSortable\" (change)=\"rebuildTable()\">[sortable]</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"columnHeaderStyles\" (change)=\"rebuildTable()\">[headerStyles]=\"&#x7B; 'color': 'green' &#x7D;\"</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"columnColumnStyles\" (change)=\"rebuildTable()\">[columnStyles]=\"&#x7B; 'color': 'green' &#x7D;\"</mat-checkbox>\r\n    <mat-form-field>\r\n      <mat-label>[header]</mat-label>\r\n      <input matInput type=\"string\" [(ngModel)]=\"columnHeader\" (change)=\"rebuildTable()\" />\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <mat-label>[width]</mat-label>\r\n      <input matInput type=\"string\" [(ngModel)]=\"columnWidth\" (change)=\"rebuildTable()\" />\r\n    </mat-form-field>\r\n    <mat-checkbox [(ngModel)]=\"columnHeaderTemplate\" (change)=\"rebuildTable()\">*psTableColumnHeaderTemplate</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"columnColumnTemplate\" (change)=\"rebuildTable()\"\r\n      >*psTableColumnTemplate=\"let item; let expanded = expanded\"</mat-checkbox\r\n    >\r\n  </mat-card>\r\n\r\n  <mat-card class=\"app-table-demo__settings-box\">\r\n    <strong>ps-table-row-detail (only initially defineable)</strong>\r\n    <mat-checkbox [(ngModel)]=\"expandable\" (change)=\"rebuildTable()\">use</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"expanded\" (change)=\"rebuildTable()\">[expanded]</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"showToggleColumn\" (change)=\"rebuildTable()\">[showToggleColumn]</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"showCustomToggleColumn\" (change)=\"rebuildTable()\">Use custom toggle column</mat-checkbox>\r\n    <span>*psTableRowDetailTemplate=\"let item\"</span>\r\n  </mat-card>\r\n\r\n  <mat-card class=\"app-table-demo__settings-box\">\r\n    <strong>template directives (only initially defineable)</strong>\r\n    <mat-checkbox [(ngModel)]=\"customHeader\" (change)=\"rebuildTable()\">*psTableCustomHeader</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"customSettings\" (change)=\"rebuildTable()\">*psTableCustomSettings</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"customTopButton\" (change)=\"rebuildTable()\">*psTableTopButtonSection</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"customListActions\" (change)=\"rebuildTable()\">*psTableListActions=\"let selection\"</mat-checkbox>\r\n    <mat-checkbox [(ngModel)]=\"customRowActions\" (change)=\"rebuildTable()\">*psTableRowActions=\"let item\"</mat-checkbox>\r\n  </mat-card>\r\n</div>\r\n\r\n<ps-table\r\n  #table\r\n  *ngIf=\"show\"\r\n  tableId=\"example\"\r\n  [dataSource]=\"dataSource\"\r\n  [caption]=\"caption\"\r\n  [sortDefinitions]=\"\r\n    sortDefinitions && !disableAllSortable ? [{ displayName: 'custom: `${boolean}${string}`', prop: 'hiddenSortable' }] : null\r\n  \"\r\n  [refreshable]=\"refreshable\"\r\n  [filterable]=\"filterable\"\r\n  [showSettings]=\"showSettings\"\r\n  [cardLayout]=\"cardLayout\"\r\n  [striped]=\"striped\"\r\n  [pageDebounce]=\"pageDebounce\"\r\n  (page)=\"onPage($event)\"\r\n>\r\n  <ps-table-column [header]=\"'id'\" property=\"id\" [sortable]=\"!disableAllSortable\"></ps-table-column>\r\n  <ps-table-column [header]=\"'number'\" property=\"number\" [sortable]=\"!disableAllSortable\"></ps-table-column>\r\n  <ps-table-column [header]=\"'boolean'\" property=\"boolean\" [sortable]=\"!disableAllSortable\"></ps-table-column>\r\n  <ps-table-column\r\n    [header]=\"columnHeader\"\r\n    property=\"date\"\r\n    [mandatory]=\"columnMandatory\"\r\n    [sortable]=\"columnSortable && !disableAllSortable\"\r\n    [headerStyles]=\"columnHeaderStyles ? { color: 'green' } : null\"\r\n    [columnStyles]=\"columnColumnStyles ? { color: 'green' } : null\"\r\n    [width]=\"columnWidth\"\r\n  >\r\n    <ng-container *ngIf=\"columnHeaderTemplate\">\r\n      <ng-container *psTableColumnHeaderTemplate>\r\n        <i style=\"color: blue;\">date</i>\r\n      </ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"columnColumnTemplate\">\r\n      <ng-container *psTableColumnTemplate=\"let item\">\r\n        {{ item.date | date: 'yyyy-MM-dd HH:mm:ss' }}\r\n      </ng-container>\r\n    </ng-container>\r\n  </ps-table-column>\r\n  <ps-table-column [header]=\"'string'\" property=\"string\" [sortable]=\"!disableAllSortable\"></ps-table-column>\r\n  <ps-table-column\r\n    [header]=\"'Custom row detail toggle'\"\r\n    property=\"__custom\"\r\n    [sortable]=\"false\"\r\n    *ngIf=\"showCustomToggleColumn && expandable\"\r\n  >\r\n    <ng-container *psTableColumnTemplate=\"let item; let expanded = expanded\">\r\n      <button (click)=\"table.toggleRowDetail(item)\">Custom row detail expand button</button>\r\n    </ng-container>\r\n  </ps-table-column>\r\n  <ps-table-column [header]=\"'virtual column'\" property=\"__virtual\" [sortable]=\"false\">\r\n    <ng-container *psTableColumnTemplate=\"let item; let expanded = expanded\"> expanded: {{ expanded }} </ng-container>\r\n  </ps-table-column>\r\n\r\n  <ng-container *ngIf=\"customHeader\">\r\n    <div *psTableCustomHeader style=\"border: 1px solid black; width: 100%;\">\r\n      custom header\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"customSettings\">\r\n    <div *psTableCustomSettings style=\"border: 1px solid black; width: 100%;\">\r\n      custom settings\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"customTopButton\">\r\n    <div *psTableTopButtonSection style=\"border: 1px solid black\">\r\n      custom button section\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"customListActions\">\r\n    <ng-container *psTableListActions=\"let selection\">\r\n      <button type=\"button\" mat-menu-item (click)=\"alertData(selection)\">\r\n        custom list actions\r\n      </button>\r\n    </ng-container>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"customRowActions\">\r\n    <ng-container *psTableRowActions=\"let item\">\r\n      <button type=\"button\" mat-menu-item>item {{ item.id }} custom row actions</button>\r\n    </ng-container>\r\n  </ng-container>\r\n\r\n  <ng-container *ngIf=\"expandable\">\r\n    <ps-table-row-detail [expanded]=\"expanded\" [showToggleColumn]=\"showToggleColumn\">\r\n      <ng-container *psTableRowDetailTemplate=\"let item\"> item: {{ item.id }} expanded: {{ expanded }} </ng-container>\r\n    </ps-table-row-detail>\r\n  </ng-container>\r\n</ps-table>\r\n\r\n<mat-card style=\"margin: 1em 0;\"> Last page event: {{ pageEvent | json }} </mat-card>\r\n","import { ChangeDetectionStrategy } from '@angular/compiler/src/core';\nimport { ChangeDetectorRef, Component, ViewChild } from '@angular/core';\nimport { PageEvent } from '@angular/material/paginator';\nimport { MatSelectChange } from '@angular/material/select';\nimport { PsTableComponent, PsTableDataSource } from '@prosoft/components/table';\nimport { NEVER, of, throwError } from 'rxjs';\n\ninterface ISampleData {\n  id: number;\n  number: number;\n  date: Date;\n  string: string;\n  boolean: boolean;\n  hiddenSortable: string;\n}\n\nfunction generateNumber() {\n  return Math.round(Math.random() * 100);\n}\n\nfunction generateBoolean() {\n  return Math.random() > 0.5;\n}\n\nfunction generateDate() {\n  const date = new Date();\n  date.setDate(Math.random() * 30);\n  return date;\n}\nfunction generateString() {\n  return (\n    Math.random()\n      .toString(36)\n      .substring(2, 15) +\n    Math.random()\n      .toString(36)\n      .substring(2, 15)\n  );\n}\n\nfunction generateSampleDataRow(idx: number): ISampleData {\n  const num = generateNumber();\n  const bool = generateBoolean();\n  const date = generateDate();\n  const str = generateString();\n  return {\n    id: idx,\n    number: num,\n    boolean: bool,\n    date: date,\n    string: str,\n    hiddenSortable: `${bool}${str}`,\n  };\n}\nfunction generateSampleData(rowCount: number): ISampleData[] {\n  const rows = Array.from(new Array(rowCount).keys());\n  return rows.map(x => generateSampleDataRow(x));\n}\n\nconst sampleData = generateSampleData(100);\n\n@Component({\n  selector: 'app-table-demo',\n  templateUrl: './table-demo.component.html',\n  styles: [\n    `\n      .app-table-demo__settings {\n        display: grid;\n        grid-auto-flow: column;\n        gap: 1em;\n\n        margin-bottom: 1em;\n      }\n      .app-table-demo__settings-box {\n        display: grid;\n        gap: 1em;\n        align-content: start;\n      }\n    `,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TableDemoComponent {\n  public show = true;\n  @ViewChild(PsTableComponent, { static: false }) public table: PsTableComponent;\n\n  public clientSampleDataSource = new PsTableDataSource<ISampleData>(() => {\n    return of(sampleData);\n  }, 'client');\n  public emptyDataSource = new PsTableDataSource<any>(() => of([]));\n  public loadingDataSource = new PsTableDataSource<any>(() => NEVER);\n  public errorDataSource = new PsTableDataSource<any>(() => {\n    return throwError(new Error('Error while loading the data.'));\n  });\n  public pageEvent: PageEvent;\n\n  public caption = 'table caption';\n  public refreshable = true;\n  public filterable = true;\n  public showSettings = true;\n  public cardLayout = true;\n  public striped = true;\n  public sortDefinitions = true;\n  public pageDebounce = 1000;\n  public dataSourceType: 'client' | 'loading' | 'error' | 'empty' = 'client';\n  public dataSource: PsTableDataSource<ISampleData> = this.clientSampleDataSource;\n\n  public columnHeaderTemplate = false;\n  public columnColumnTemplate = true;\n  public columnSortable = true;\n  public columnMandatory = true;\n  public columnHeader = 'date';\n  public columnWidth = 'auto';\n  public columnHeaderStyles = false;\n  public columnColumnStyles = false;\n\n  public customHeader = false;\n  public customSettings = false;\n  public customTopButton = false;\n  public customListActions = false;\n  public customRowActions = false;\n  public expandable = false;\n  public expanded = false;\n  public showToggleColumn = true;\n  public showCustomToggleColumn = false;\n\n  public disableAllSortable = false;\n\n  constructor(private cd: ChangeDetectorRef) {}\n\n  public onDataSourceTypeChanged(event: MatSelectChange) {\n    switch (event.value) {\n      case 'loading':\n        this.dataSource = this.loadingDataSource;\n        break;\n      case 'error':\n        this.dataSource = this.errorDataSource;\n        break;\n      case 'empty':\n        this.dataSource = this.emptyDataSource;\n        break;\n      default:\n        this.dataSource = this.clientSampleDataSource;\n        break;\n    }\n  }\n\n  public rebuildTable() {\n    this.show = false;\n    setTimeout(() => {\n      this.show = true;\n      this.cd.markForCheck();\n    });\n  }\n\n  public onPage(event: PageEvent) {\n    this.pageEvent = event;\n  }\n\n  public alertData(data: any) {\n    alert(JSON.stringify(data));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { RouterModule } from '@angular/router';\nimport { PsIntlService, PsIntlServiceEn } from '@prosoft/components/core';\nimport { IPsTableSetting, PsTableModule, PsTableSettingsService } from '@prosoft/components/table';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { TableDemoComponent } from './table-demo.component';\n\nexport class DemoPsTableSettingsService extends PsTableSettingsService {\n  constructor() {\n    super();\n    this.settingsEnabled = true;\n    this.settings$ = new BehaviorSubject<{ [id: string]: IPsTableSetting }>({});\n  }\n  public save(tableId: string, settings: IPsTableSetting): Observable<void> {\n    (this.settings$ as Subject<{ [id: string]: IPsTableSetting }>).next({ [tableId]: settings });\n    return of(null);\n  }\n}\n\n@NgModule({\n  declarations: [TableDemoComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatInputModule,\n    MatSelectModule,\n    PsTableModule,\n    MatFormFieldModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: TableDemoComponent,\n      },\n    ]),\n  ],\n  providers: [\n    { provide: PsIntlService, useClass: PsIntlServiceEn },\n    { provide: PsTableSettingsService, useClass: DemoPsTableSettingsService },\n  ],\n})\nexport class TableDemoModule {}\n"],"sourceRoot":""}