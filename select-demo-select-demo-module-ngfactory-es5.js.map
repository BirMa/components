{"version":3,"sources":["/C:/workspace/prosoft-components-demo/node_modules/ngx-mat-select-search/ngx-mat-select-search.d.ts.MatSelectSearchComponent.html","/../components/select/index.ts","/../components/select/public_api.ts","/../components/select/src/defaults/default-select-data-source.ts","/../components/select/src/defaults/default-select-service.ts","/../components/select/src/errors.ts","/../components/select/src/select-data-source.ts","/../components/select/src/select-data.component.ts.PsSelectDataComponent.html","/../components/select/src/select-data.component.ts","/../components/select/src/select-option-template.directive.ts","/../components/select/src/select-trigger-template.directive.ts","/../components/select/src/select.component.ts.PsSelectComponent.html","/../components/select/src/select.component.ts","/./src/app/select-demo/demos/select-with-custom-select-service.component.ts.SelectWithCustomSelectServiceComponent.html","/./src/app/select-demo/demos/select-with-custom-select-service.component.ts","/./src/app/select-demo/demos/select-with-custom-template.component.ts.SelectWithCustomTemplateComponent.html","/./src/app/select-demo/demos/select-with-custom-template.component.ts","/./src/app/select-demo/demos/select-with-endless-loading-datasource.component.ts.SelectWithEndlessLoadingDataSourceComponent.html","/./src/app/select-demo/demos/select-with-endless-loading-datasource.component.ts","/./src/app/select-demo/demos/select-with-error-in-datasource.component.ts.SelectWithErrorInDataSourceComponent.html","/./src/app/select-demo/demos/select-with-error-in-datasource.component.ts","/./src/app/select-demo/demos/select-with-error-state-matcher.component.ts.SelectWithErrorStateMatcherComponent.html","/./src/app/select-demo/demos/select-with-error-state-matcher.component.ts","/./src/app/select-demo/demos/select-with-events-only.component.ts.SelectWithEventsOnlyComponent.html","/./src/app/select-demo/demos/select-with-events-only.component.ts","/./src/app/select-demo/demos/select-with-multiselect.component.ts.SelectWithMultiselectComponent.html","/./src/app/select-demo/demos/select-with-multiselect.component.ts","/./src/app/select-demo/demos/select-with-ng-model.component.ts.SelectWithNgModelComponent.html","/./src/app/select-demo/demos/select-with-ng-model.component.ts","/./src/app/select-demo/demos/select-with-other-load-trigger.component.ts.SelectWithOtherLoadTriggerComponent.html","/./src/app/select-demo/demos/select-with-other-load-trigger.component.ts","/./src/app/select-demo/demos/select-with-selected-item-not-in-datasource.component.ts.SelectWithSelectedItemNotInDataSourceComponent.html","/./src/app/select-demo/demos/select-with-selected-item-not-in-datasource.component.ts","/./src/app/select-demo/select-demo.component.ts.SelectDemoComponent.html","/./src/app/select-demo/select-demo.component.ts","/./src/app/select-demo/select-demo.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8GASE,gdAMC,YADa;;wBAAwD;MALtE,0oCAMC,mDALa,wDAA6B,sBAE7B,mBAAoC,2BACpC,mBAAgD,iCAJ9D,YAMC,EALa,SAA6B,EAE7B,SAAoC,EACpC,SAAgD,2BAJ9D,qpBAMC;8GAeD,mnCAEsB,yBAAd,oBAAa,EAFrB,YAEsB,EAAd,SAAa,2BAFrB,gTAEsB;6GAQpB,0DAAmF;8GAEjF,uxBAAU,8EAAK,2BAAf,kaAAU;8GARd,8UAKwC,YADhC;;wBAAsB;MAJ9B,glBAKwC,IACtC,yaAAmF,IACnF,+HAA0B,kDADd,uGAAmC,GAA/C,YAAmF,EAAvE,oBAAmC,2BANjD,iPAKwC;8GAW1C,sKACgD,4MAEhD;sSApDA;;;;;;;;;s3BAA0E,IAG1E,y5BAGiJ,GAA3I,sIAA0I,MAE9I,kZAMC,IAED;;;;;;;;wBAYE;MANK;;wBAAkC;MAClC;;wBAA8B;MAC9B;;wBAA4C;MAC5C;;wBAAoC;MAT3C,w7BAYE,IACF,kZAEsB,IAEtB,kZAKwC,GAOxC,0DAA8D,IAIhE,kZACgD,iDAlDhD,YAA0E,GAKpE,8FAAoF,EACpF,0DAA0I,iCAHhJ,YAGiJ,EAD3I,SAAoF,EACpF,UAA0I,GAEhI,oBAAqC,gCAAnD,aAMC,EANa,UAAqC,GAkB5C,oBAAgC,mBAPhC,oBAAa,OACb,oBAAe,QAJtB,aAYE,EAFK,UAAgC,EAPhC,UAAa,EACb,UAAe,GAST,oBAAiB,YAA9B,aAEsB,EAFT,UAAiB,GAKtB,mCAA2B,aADnC,aAKwC,EAJhC,UAA2B,GAehC,oBAAyB,oBAA9B,aACgD,EAD3C,UAAyB,mDAjD9B,09BAA0E,GA2BjE,oBAA6B,YAXpC,24BAYE,EADK,UAA6B,EAXpC,0GAYE;;;;;;;;;;;;;;;;AC7BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iFAAiF;AACjF,oCAAoC;AACP;;;;;;;;;;;;;ACF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoE;AACT;AAEyB;AAC/B;AACE;AAMJ;AAC0C;AACJ;;;;;;;;;;;;;;;;;;;;;;ACbkB;AAcnF;AAEmC;AAapD,SAAS,qBAAqB,CAAC,KAAU;IAC9C,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,IAAI,KAAK,IAAI,UAAU,IAAI,KAAK,IAAI,OAAO,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,CAAC;AACrH,CAAC;AAYD;IAAwD,mFAAqB;IAS3E,mCAAY,OAAkC;QAA9C,YACE,iBAAO,SA2CR;QAlDO,mBAAa,GAAG,IAAI,oDAAe,CAAU,KAAK,CAAC,CAAC;QACpD,kBAAY,GAAG,IAAI,oDAAe,CAAS,EAAE,CAAC,CAAC;QAC/C,qBAAe,GAAG,IAAI,oDAAe,CAAM,EAAE,CAAC,CAAC;QAC/C,qBAAe,GAAG,IAAI,4CAAO,EAAU,CAAC;QA8KhD;;;WAGG;QACI,iBAAW,GAAG,UAAC,CAAe,EAAE,CAAe;YACpD,OAAO,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACxC,CAAC,CAAC;QAEF;;;;WAIG;QACI,yBAAmB,GAAG,UAAC,KAAU;YACtC,IAAI,KAAK,YAAY,KAAK,EAAE;gBAC1B,OAAO,KAAK,CAAC,OAAO,CAAC;aACtB;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC;QA1LA,KAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC,cAAc,IAAI,GAAG,CAAC;QACzD,KAAI,CAAC,YAAY,GAAG,OAAO,CAAC,WAAW,mBAA+B,CAAC;QAEvE,IAAI,QAA6C,CAAC;QAClD,IAAM,kBAAkB,GAAG,8BAA8B,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;QAEzG,IAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC5B,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;YAC/B,IAAM,OAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC,IAAI,CACxC,0DAAG,CAAC,WAAC,IAAI,QAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAzB,CAAyB,CAAC,EACnC,gEAAS,CAAC,KAAI,CAAC,eAAe,CAAC,CAChC,CAAC;YACF,QAAQ,GAAG,cAAM,cAAK,EAAL,CAAK,CAAC;SACxB;aAAM;YACL,IAAM,MAAI,GAAgC,KAAY,CAAC;YACvD,QAAQ,GAAG,cAAM,uBAAgB,CAAC,MAAI,EAAE,CAAC,CAAC,IAAI,CAAC,0DAAG,CAAC,WAAC,IAAI,QAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAzB,CAAyB,CAAC,CAAC,EAAlE,CAAkE,CAAC;SACrF;QAED,IAAI,OAAO,CAAC,IAAI,KAAK,QAAQ,EAAE;YAC7B,KAAI,CAAC,WAAW,GAAG,oBAAoB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvD,KAAI,CAAC,iBAAiB,GAAG,UAAC,MAAa;gBACrC,OAAO,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;YACxC,CAAC,CAAC;SACH;QAED,KAAI,CAAC,SAAS,GAAG;YACf,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAClB,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YAEzB,OAAO,QAAQ,EAAE,CAAC,IAAI,CACpB,iEAAU,CAAC,UAAC,GAAgB;gBAC1B,KAAI,CAAC,KAAK,GAAG,GAAG,CAAC;gBACjB,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;gBAClD,OAAO,+CAAE,CAAC,EAAuB,CAAC,CAAC;YACrC,CAAC,CAAC,EACF,0DAAG,CAAC;gBACF,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACvB,CAAC,CAAC,CACH,CAAC;QACJ,CAAC,CAAC;;IACJ,CAAC;IAEM,2CAAO,GAAd;QAAA,iBAgGC;QA/FC,IAAM,mBAAmB,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAC5D,IAAM,cAAc,GAAG,mBAAmB,CAAC,IAAI,CAC7C,gEAAS,CAAC,cAAM,YAAI,CAAC,SAAS,EAAE,EAAhB,CAAgB,CAAC,EACjC,gEAAS,CAAoB,EAAE,CAAC,EAChC,kEAAW,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAC/C,CAAC;QAEF,4DAA4D;QAC5D,IAAM,eAAe,GAAG,cAAc,CAAC,IAAI,CACzC,gEAAS,CAAC,iBAAO;YACf,YAAI,CAAC,eAAe,CAAC,IAAI,CACvB,0DAAG,CAAC,gBAAM;gBACR,IAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,eAAK,IAAI,QAAC,OAAO,CAAC,IAAI,CAAC,WAAC,IAAI,YAAI,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAhC,CAAgC,CAAC,EAApD,CAAoD,CAAC,CAAC;gBACnG,IAAM,cAAc,GAAG,KAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;gBAC7D,OAAO,cAAc,CAAC;YACxB,CAAC,CAAC,CACH;QAND,CAMC,CACF,EACD,2EAAoB,CAAC,UAAC,CAAC,EAAE,CAAC;YACxB,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;gBACzB,OAAO,KAAK,CAAC;aACd;oCACU,MAAM;gBACf,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,WAAC,IAAI,YAAI,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,EAAvC,CAAuC,CAAC,EAAE;oCAClD,KAAK;iBACb;;YAHH,KAAqB,UAAC,EAAD,OAAC,EAAD,eAAC,EAAD,IAAC;gBAAjB,IAAM,MAAM;sCAAN,MAAM;;;aAIhB;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CACH,CAAC;QAEF,IAAM,QAAQ,GAAG,0DAAa,CAAC,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC,CAAC,IAAI,CACpE,0DAAG,CAAC,UAAC,EAAyB;gBAAxB,eAAO,EAAE,sBAAc;YAC3B,qBAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,gBAAM;gBACvC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;oBACjB,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC;iBACnB;qBAAM,IAAI,CAAC,CAAC,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE;oBAC9C,MAAM,CAAC,KAAK,GAAG,KAAG,MAAM,CAAC,KAAO,CAAC;iBAClC;gBACD,OAAO,MAAM,CAAC;YAChB,CAAC,CAAC;QAPF,CAOE,CACH,CACF,CAAC;QAEF,IAAM,gBAAgB,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAC9C,2DAAI,CAAC,CAAC,CAAC,EAAE,sEAAsE;QAC/E,2EAAoB,EAAE,EACtB,6DAAM,CAAC,WAAC,IAAI,QAAC,CAAC,EAAF,CAAE,CAAC,CAChB,CAAC;QACF,IAAM,wBAAwB,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CACtD,2EAAoB,EAAE,EACtB,gEAAS,CAAC,mBAAS,IAAI,QAAC,SAAS,CAAC,CAAC,CAAC,0CAAK,CAAC,CAAC,CAAC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,2DAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAxD,CAAwD,CAAC,CACjF,CAAC;QACF,IAAM,YAAY,GAAG,kDAAK,CAAC,gBAAgB,EAAE,wBAAwB,CAAC,CAAC;QACvE,IAAM,cAAc,GAAG,QAAQ,CAAC,IAAI;QAClC,oGAAoG;QACpG,gEAAS,CAAC,iBAAO;YACf,mBAAY,CAAC,IAAI,CACf,gEAAS,CAAC,CAAC,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EACpC,0DAAG,CAAC;gBACF,IAAM,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,gBAAM;oBAC3C,YAAI,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,eAAK,IAAI,YAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,EAArC,CAAqC,CAAC;gBAA/E,CAA+E,CAChF,CAAC;gBACF,IAAM,kBAAkB,GAAG,IAAI,OAAO,CAAC,eAAe,CAAC,CAAC;gBACxD,OAAO,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;oBAChB,IAAM,SAAS,GAAG,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC9C,IAAM,SAAS,GAAG,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC9C,IAAM,iBAAiB,GAAG,CAAC,SAAS,GAAG,CAAC,SAAS,CAAC;oBAClD,IAAI,iBAAiB,EAAE;wBACrB,OAAO,iBAAiB,CAAC;qBAC1B;oBAED,OAAO,KAAI,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChC,CAAC,CAAC,CAAC;gBACH,OAAO,OAAO,CAAC;YACjB,CAAC,CAAC,CACH;QAnBD,CAmBC,CACF;QACD,oBAAoB;QACpB,gEAAS,CAAC,iBAAO;YACf,YAAI,CAAC,YAAY,CAAC,IAAI,CACpB,mEAAY,CAAC,KAAI,CAAC,mBAAmB,CAAC,EACtC,gEAAS,CAAC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAClC,0DAAG,CAAC,WAAC,IAAI,QAAC,CAAC,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,EAAvB,CAAuB,CAAC,EACjC,2EAAoB,EAAE,EACtB,0DAAG,CAAC,oBAAU;gBACZ,OAAO,CAAC,OAAO,CAAC,gBAAM;oBACpB,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;gBACxE,CAAC,CAAC,CAAC;gBACH,OAAO,OAAO,CAAC;YACjB,CAAC,CAAC,CACH;QAXD,CAWC,CACF,CACF,CAAC;QACF,OAAO,cAAc,CAAC;IACxB,CAAC;IAEM,8CAAU,GAAjB;QACE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;QAC7B,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;QAChC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;QAC5B,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;IAClC,CAAC;IAEM,oDAAgB,GAAvB,UAAwB,SAAkB;QACxC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;IAEM,qDAAiB,GAAxB,UAAyB,UAAkB;QACzC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACrC,CAAC;IAEM,yDAAqB,GAA5B,UAA6B,MAAW;QACtC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IAEM,qDAAiB,GAAxB,UAAyB,MAAW;QAClC,OAAO,MAAM,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC;YACtB,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,cAAY,CAAC,MAAG;SACxB,CAAC,EAHqB,CAGrB,CAAC,CAAC;IACN,CAAC;IAsBO,4DAAwB,GAAhC;QACE,IAAM,YAAY,GAAsB,EAAE,CAAC;QAC3C,uCAAuC;QACvC,IAAI,IAAI,CAAC,YAAY,kBAA8B,EAAE;YACnD,YAAY,CAAC,IAAI,CAAC,+CAAE,CAAC,IAAI,CAAC,CAAC,CAAC;SAC7B;QAED,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CACxC,2EAAoB,EAAE,EACtB,6DAAM,CAAC,mBAAS,IAAI,gBAAS,EAAT,CAAS,CAAC,CAC/B,CAAC;QACF,uCAAuC;QACvC,IAAI,IAAI,CAAC,YAAY,yBAAqC,EAAE;YAC1D,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9B,uCAAuC;SACxC;aAAM,IAAI,IAAI,CAAC,YAAY,yBAAqC,EAAE;YACjE,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,2DAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC7C;QAED,OAAO,0CAAK,eAAI,YAAY,EAAE;IAChC,CAAC;IACH,gCAAC;AAAD,CAAC,CA7NuD,sEAAkB,GA6NzE;;AAEM,SAAS,gBAAgB,CAAI,IAAuB;IACzD,IAAI,CAAC,yDAAY,CAAC,IAAI,CAAC,EAAE;QACvB,IAAI,GAAG,+CAAE,CAAC,IAAI,CAAC,CAAC;KACjB;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,8BAA8B,CAAC,IAAqB,EAAE,KAAgB,EAAE,QAAmB;IAClG,IAAI,IAAI,KAAK,IAAI,EAAE;QACjB,OAAO,UAAC,IAAS,IAAK,QAAC;YACrB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC;YAClB,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC;SACtB,CAAC,EAHoB,CAGpB,CAAC;KACJ;IACD,OAAO,UAAC,IAAS,IAAK,QAAC;QACrB,KAAK,EAAE,IAAI;QACX,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC;KACtB,CAAC,EAHoB,CAGpB,CAAC;AACL,CAAC;AAED,SAAS,oBAAoB,CAAC,KAAgB;IAC5C,OAAO,UAAC,OAAY,EAAE,OAAY;QAChC,gDAAgD;QAChD,IAAI,OAAO,KAAK,OAAO,EAAE;YACvB,OAAO,IAAI,CAAC;SACb;QAED,wDAAwD;QACxD,IAAI,OAAO,OAAO,KAAK,OAAO,OAAO,EAAE;YACrC,OAAO,KAAK,CAAC;SACd;QAED,+GAA+G;QAC/G,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,EAAE;YACxB,OAAO,KAAK,CAAC;SACd;QAED,gFAAgF;QAChF,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC/B,OAAO,KAAK,CAAC;SACd;QAED,OAAO,OAAO,CAAC,KAAK,CAAC,KAAK,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC,CAAC;AACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;ACpTgF;AAC7B;AACuE;AAC3E;AACY;AAI5D;IAC4C,gFAAe;IAD3D;;IAuBA,CAAC;IArBQ,iDAAgB,GAAvB,UAA2B,UAA2B,EAAE,CAAyB;QAC/E,IAAI,gFAAoB,CAAC,UAAU,CAAC,EAAE;YACpC,OAAO,UAAU,CAAC;SACnB;QAED,IAAI,OAAqC,CAAC;QAC1C,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,yDAAY,CAAC,UAAU,CAAC,EAAE;YACzD,OAAO,GAAG;gBACR,IAAI,EAAE,IAAI;gBACV,QAAQ,EAAE,OAAc;gBACxB,KAAK,EAAE,OAAc;gBACrB,KAAK,EAAE,UAAU;aAClB,CAAC;SACH;aAAM,IAAI,yFAAqB,CAAC,UAAU,CAAC,EAAE;YAC5C,OAAO,GAAG,UAAU,CAAC;SACtB;aAAM;YACL,MAAM,+EAA+B,EAAE,CAAC;SACzC;QAED,OAAO,IAAI,qFAAyB,CAAI,OAAO,CAAC,CAAC;IACnD,CAAC;IACH,6BAAC;AAAD,CAAC,CAtB2C,+DAAe,GAsB1D;;;;;;;;;;;;;;ACjCD;AAAA;AAAA;;;GAGG;AACI,SAAS,+BAA+B;IAC7C,OAAO,KAAK,CAAC,oEAAoE,CAAC,CAAC;AACrF,CAAC;;;;;;;;;;;;;ACHD;AAAA;AAAA;AAAA;IAAA;QACE,uEAAuE;QAChE,YAAO,GAAG,KAAK,CAAC;QAEvB,oFAAoF;QAC7E,UAAK,GAAQ,IAAI,CAAC;QAEzB,+CAA+C;QACxC,iBAAY,GAAkB,IAAI,CAAC;QACnC,gBAAW,GAAsC,UAAC,CAAC,EAAE,CAAC,IAAK,QAAC,KAAK,CAAC,EAAP,CAAO,CAAC;IAoB5E,CAAC;IAAD,yBAAC;AAAD,CAAC;;AAED,iDAAiD;AAC1C,SAAS,oBAAoB,CAAC,KAAU;IAC7C,+FAA+F;IAC/F,+FAA+F;IAC/F,iEAAiE;IACjE,OAAO,KAAK,IAAI,OAAO,KAAK,CAAC,OAAO,KAAK,UAAU,CAAC;AACtD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2GCpCG;;;;;;6qBAAwE,6EAExE,iCAFA,uxBAAwE;2GAGxE;;;;;;ssBAA6E,IAC3E,+JAA4C,gFAAkB,2BADnC,oBAAiB,EAA9C,YAA6E,EAAhD,SAAiB,mDAA9C,uxBAA6E,GAC/B,yDAAkB;2GAQ9D,wHAAsC,6LAEtC;;2GACA,ibAAwH,GAAhD,uOAA+C,4BAAnF,mBAAmC,iBAAvE,YAAwH,EAAhD,SAA+C,EAAnF,SAAmC;2GATzE;;;;;;gsBAKC,IACC,2YAAsC,IAGtC,2YAAwH,iDAPxH,kBAAoB,0BAFtB,YAKC,EAHC,SAAoB,GAIN,qBAAuB,iBAArC,YAAsC,EAAxB,UAAuB,GAGxB,oBAAsB,iBAAnC,YAAwH,EAA3G,UAAsB,2BANnC,kBAAsC,2BAHxC,+rBAKC,EAFC,SAAsC,EAHxC,sFAKC;6LAdD;;;;;;6qBAA2C,IACzC,uxEAAwE,IAE1E,+YAAwE,IAGxE,+YAA6E,IAG7E,2fAKC,iDAbmD,oBAAqB,UAAvE,YAAwE,EAAtB,UAAqB,GAAhD,oBAA0B,aAAjD,YAAwE,EAAjD,UAA0B,GAEvC,oBAAsB,iBAAlC,aAAwE,EAA5D,UAAsB,GAGtB,oBAAgB,WAA5B,aAA6E,EAAjE,UAAgB,GAI1B,gDAAmD,iBADrD,aAKC,EAJC,sBAAmD,2BAVrD,uxBAA2C,GACzC,k0BAAwE;;;;;;;;;;;;;;;;ACF9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcuB;AACkD;AACtB;AACE;AACS;AACR;AACK;AAEqB;AAC7B;AAEnD;IA8HE,+BAC6B,MAAiB,EACjB,SAAoB,EACvC,aAA8B,EAC9B,EAAqB;QAHF,WAAM,GAAN,MAAM,CAAW;QACjB,cAAS,GAAT,SAAS,CAAW;QACvC,kBAAa,GAAb,aAAa,CAAiB;QAC9B,OAAE,GAAF,EAAE,CAAmB;QA3F/B;;;WAGG;QACI,eAAU,GAAG,IAAI,oDAAe,CAAiC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC;QAuB7G,+EAA+E;QAC/D,cAAS,GAAG,IAAI,CAAC;QAEjB,mBAAc,GAA4B,IAAI,CAAC;QAK/D,wCAAwC;QACjC,eAAU,GAAG,IAAI,0DAAW,CAAC,EAAE,CAAC,CAAC;QAExC,8BAA8B;QACvB,UAAK,GAAuD,EAAE,CAAC;QA+BtE,gEAAgE;QACxD,oBAAe,GAAG,IAAI,4CAAO,EAAQ,CAAC;IAqB3C,CAAC;IAhFJ,sBACI,6CAAU;QAPd;;;;;WAKG;aACH;YAEE,OAAO,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;aACD,UAAe,UAAiC;YAC9C,IAAI,IAAI,CAAC,WAAW,KAAK,UAAU,EAAE;gBACnC,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;aACpC;QACH,CAAC;;;OALA;IAOD,sBAAoB,8CAAW;aAA/B,UAAgC,EAAiC;YAC/D,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;YACvB,IAAI,CAAC,0BAA0B,EAAE,CAAC;QACpC,CAAC;;;OAAA;IAiBD,sBAAW,0CAAO;QADlB,kDAAkD;aAClD;YACE,OAAO,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;QACpD,CAAC;;;OAAA;IAGD,sBAAW,2CAAQ;QADnB,uDAAuD;aACvD;YACE,OAAO,IAAI,CAAC,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;QACpD,CAAC;;;OAAA;IAGD,sBAAW,+CAAY;QADvB,qEAAqE;aACrE;YACE,OAAO,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC;QACzD,CAAC;;;OAAA;IAGD,sBAAW,2CAAQ;QADnB,kDAAkD;aAClD;YACE,OAAO,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;QAC7C,CAAC;;;OAAA;IAGD,sBAAW,iDAAc;QADzB,wFAAwF;aACxF;YACE,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACpC,OAAO,KAAK,CAAC;aACd;YACD,IAAM,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;YAC/D,OAAO,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;QACtD,CAAC;;;OAAA;IAeD,sBAAY,0CAAO;QADnB,sDAAsD;aACtD;YACE,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;QAChC,CAAC;;;OAAA;IASM,+CAAe,GAAtB;QAAA,iBAqBC;QApBC,4BAA4B;QAC5B,IAAI,CAAC,OAAO,CAAC,OAAO;aACjB,IAAI,CACH,gEAAS,CAAC,IAAW,CAAC,EACtB,gEAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAChC;aACA,SAAS,CAAC;YACT,IAAM,OAAO,GAAG,KAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YACvC,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACnC,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;QAEL,wEAAwE;QACxE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,gEAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,SAAS,CAAC,cAAI,IAAI,YAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAtC,CAAsC,CAAC,CAAC;QACzH,IAAI,CAAC,UAAU,CAAC,YAAY;aACzB,IAAI,CAAC,gEAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aACrC,SAAS,CAAC,oBAAU,IAAI,YAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAA7C,CAA6C,CAAC,CAAC;QAC1E,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,YAAY;aAC/B,IAAI,CAAC,gEAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aACrC,SAAS,CAAC,eAAK,IAAI,YAAI,CAAC,+BAA+B,CAAC,KAAK,CAAC,EAA3C,CAA2C,CAAC,CAAC;IACrE,CAAC;IAEM,2CAAW,GAAlB;QACE,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC;QAC5B,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;QAChC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;QAE3B,IAAI,IAAI,CAAC,yBAAyB,EAAE;YAClC,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,CAAC;SAC9C;IACH,CAAC;IAEM,8CAAc,GAArB,UAAsB,CAAS,EAAE,IAAqB;QACpD,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAEO,0DAA0B,GAAlC;QACE,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YACpB,OAAO;SACR;QAED,6DAA6D;QAC7D,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;YACjD,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;SAC7C;QACD,sEAAsE;aACjE,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;YACrC,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;SACxD;QACD,yEAAyE;aACpE;YACH,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;SACxD;IACH,CAAC;IAEO,+DAA+B,GAAvC,UAAwC,KAAU;QAChD,IAAI,MAAa,CAAC;QAClB,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YACxB,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;SAC5C;aAAM;YACL,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SAC/B;QACD,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;IAED,sEAAsE;IAC9D,iDAAiB,GAAzB,UAA0B,UAAe;QAAzC,iBA2BC;QA1BC,IAAI,gFAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YACzC,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;SAC9B;QAED,yDAAyD;QACzD,IAAI,IAAI,CAAC,yBAAyB,EAAE;YAClC,IAAI,CAAC,yBAAyB,CAAC,WAAW,EAAE,CAAC;YAC7C,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;SACvC;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACjF,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAClC,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC1D,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAElE,IAAI,CAAC,gFAAoB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;YAC3C,MAAM,+EAA+B,EAAE,CAAC;SACzC;QAED,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,UAAU;aAC7C,OAAO,EAAE;aACT,IAAI,CAAC,gEAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aACrC,SAAS,CAAC,eAAK;YACd,KAAI,CAAC,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;YACzB,KAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IACH,4BAAC;AAAD,CAAC;;;;;;;;;;;;;;AC9PD;AAAA;AAAA;AAAuD;AAEvD;IAEE,yCAAmB,WAA6B;QAA7B,gBAAW,GAAX,WAAW,CAAkB;IAAG,CAAC;IACtD,sCAAC;AAAD,CAAC;;;;;;;;;;;;;;ACLD;AAAA;AAAA;AAAuD;AAEvD;IAEE,0CAAmB,WAA6B;QAA7B,gBAAW,GAAX,WAAW,CAAkB;IAAG,CAAC;IACtD,uCAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uGCGO,6SAAsD,IACpD,6aAA+G,GAA7D,wJAA4D,qBAAjG,mBAAoC,kBAAjD,YAA+G,EAA7D,SAA4D,EAAjG,SAAoC;8LARvD;;;;;;;;;;;;;;;0pDAAqF,IACnF;;;;;;;;wBAKC;MAFC;;wBAA6C;MAC7C;;wBAAuC;MAJzC,msFAKC,MACC,wYAAsD,IAGtD,w2BAKC,iDAfA,mBAAuB,YAA5B,YAAqF,EAAhF,SAAuB,GAAwB,oBAAgC,WAAvD,mBAAsB,UAAnD,YAAqF,EAAjC,SAAgC,EAAvD,SAAsB,GAE/C,oBAA2B,cAD7B,YAKC,EAJC,UAA2B,GAC3B,qBAA+B,EAFjC,aAKC,EAHC,UAA+B,GAIX,6CAAiC,SAArD,aAAsD,EAAlC,UAAiC,GAInD,oBAAyB,aACzB,oBAA2B,cAC3B,oBAAuB,YACvB,oBAAiC,iBAJnC,aAKC,EAJC,UAAyB,EACzB,UAA2B,EAC3B,UAAuB,EACvB,UAAiC,2BAdvC,8sBAAqF,GACnF,4zEAKC;;;;;;;;;;;;;;;;ACPP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcuB;AAC8F;AAC/C;AACH;AACG;AAItE;IA6LE,2BACsB,WAAmB,EACnB,gBAAoC,EAC7B,SAAoB;QAF3B,gBAAW,GAAX,WAAW,CAAQ;QACnB,qBAAgB,GAAhB,gBAAgB,CAAoB;QAC7B,cAAS,GAAT,SAAS,CAAW;QA3J3B,OAAE,GAAG,eAAa,iBAAiB,CAAC,MAAM,EAAI,CAAC;QAG9D,mBAAc,GAA4B,IAAI,CAAC;QAG/C,oBAAe,GAA4B,IAAI,CAAC;QA4BvC,gBAAW,GAA2C,IAAI,CAAC;QAE3E,6FAA6F;QAC7E,cAAS,GAAG,IAAI,CAAC;QA4ChB,iBAAY,GAAG,IAAI,0DAAY,EAAW,CAAC;QAC3C,oBAAe,GAAG,IAAI,0DAAY,EAAmB,CAAC;QAqBvD,gBAAW,GAAG,WAAW,CAAC;QA6ClC,eAAU,GAAG,IAAI,wDAAS,CAAC,EAAE,CAAC,CAAC;QAC/B,kBAAa,GAAG,IAAI,0DAAW,CAAC,IAAI,CAAC,CAAC;QAQ5C,IAAI,IAAI,CAAC,SAAS,EAAE;YAClB,+DAA+D;YAC/D,2DAA2D;YAC3D,IAAI,CAAC,SAAS,CAAC,aAAa,GAAG,IAAI,CAAC;SACrC;IACH,CAAC;IA1JD,sBAAmD,2CAAY;aAA/D,UAAgE,MAAiB;YAC/E,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;YAEzB,8FAA8F;YAC9F,IAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAC3B,MAAM,CAAC,KAAK,GAAG;gBACb,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACnB,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;YAC7B,CAAC,CAAC;YAEF,yDAAyD;YACzD,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACjD,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC7D,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/D,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC7D,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,gBAAgB,GAAG,MAAM,CAAC,iBAAiB,GAAG,MAAM,CAAC,gBAAgB,GAAG,cAAO,CAAC,CAAC;QAC9G,CAAC;;;OAAA;IAeD,sBAAoB,uCAAQ;aAG5B;YACE,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;QACnC,CAAC;aALD,UAA6B,KAAc;YACzC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC;;;OAAA;IAKD,sBAAoB,uCAAQ;aAG5B;YACE,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;QAClC,CAAC;aALD,UAA6B,KAAc;YACzC,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,CAAC;QACnC,CAAC;;;OAAA;IAKD,sBAAoB,gDAAiB;aAGrC;YACE,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC;QAC3C,CAAC;aALD,UAAsC,KAAwB;YAC5D,IAAI,CAAC,UAAU,CAAC,iBAAiB,GAAG,KAAK,CAAC;QAC5C,CAAC;;;OAAA;IAKD,sBAAoB,yCAAU;aAG9B;YACE,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;QACpC,CAAC;aALD,UAA+B,KAA+D;YAC5F,IAAI,CAAC,UAAU,CAAC,UAAU,GAAG,KAAK,CAAC;QACrC,CAAC;;;OAAA;IAKD,sBAAoB,0CAAW;aAG/B;YACE,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;QACrC,CAAC;aALD,UAAgC,KAAa;YAC3C,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,KAAK,CAAC;QACtC,CAAC;;;OAAA;IAKD,sBAAoB,uCAAQ;aAG5B;YACE,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;QAClC,CAAC;aALD,UAA6B,KAAc;YACzC,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,CAAC;QACnC,CAAC;;;OAAA;IAQD,sBAAW,oCAAK;aAAhB;YACE,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;QAC/B,CAAC;;;OAAA;IACD,sBAAW,oCAAK;aAAhB;YACE,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;QAC/B,CAAC;;;OAAA;IACD,sBAAW,+CAAgB;aAA3B;YACE,OAAO,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC;QAC1C,CAAC;;;OAAA;IACD,sBAAW,2CAAY;aAAvB;YACE,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC;QACtC,CAAC;;;OAAA;IACD,sBAAW,sCAAO;aAAlB;YACE,wCAAwC;YACxC,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;QACjC,CAAC;;;OAAA;IACD,sBAAW,yCAAU;aAArB;YACE,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;QACpC,CAAC;;;OAAA;IAGD,sBAAW,wCAAS;aAApB;YACE,kDAAkD;YAClD,OAAO,CAAC,IAAI,CAAC,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC;QACjI,CAAC;;;OAAA;IACD,sBAAW,0CAAW;aAAtB;YACE,sCAAsC;YACtC,OAAO,CAAC,IAAI,CAAC,SAAS,IAAK,IAAI,CAAC,SAAS,CAAC,OAAuB,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC;QAC3F,CAAC;;;OAAA;IAED,sBAAW,sCAAO;aAAlB;YACE,sGAAsG;YACtG,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,eAAe,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE;gBACnG,OAAqB,IAAI,CAAC,UAAU,CAAC,QAAS,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,CAAC,SAAS,EAAX,CAAW,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACjF;YACD,OAAO,EAAE,CAAC;QACZ,CAAC;;;OAAA;IAGD,sBAAI,gDAAiB;QADrB,0CAA0C;aAC1C;YACE,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,OAAO,IAAI,CAAC;aACb;YAED,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,IAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAEvF,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,EAAE;oBAC5B,eAAe,CAAC,OAAO,EAAE,CAAC;iBAC3B;gBAED,OAAO,eAAe,CAAC;aACxB;YAED,OAAO,gBAAgB,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAErE,SAAS,gBAAgB,CAAC,MAAiB;gBACzC,OAAO;oBACL,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,SAAS,EAAE,MAAM,CAAC,SAAS;iBAC5B,CAAC;YACJ,CAAC;QACH,CAAC;;;OAAA;IAkBM,qCAAS,GAAhB;QACE,uEAAuE;QACvE,gFAAgF;QAChF,4EAA4E;QAC5E,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;IAC9B,CAAC;IAEM,4CAAgB,GAAvB,UAAwB,CAAa;QACnC,IAAI,CAAC,UAAU,CAAC,gBAAgB,EAAE,CAAC;IACrC,CAAC;IACM,6CAAiB,GAAxB,UAAyB,GAAa;QACpC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;IACzC,CAAC;IAEM,sCAAU,GAAjB,UAAkB,CAAM;QACtB,6CAA6C;IAC/C,CAAC;IAEM,4CAAgB,GAAvB,UAAwB,EAAc;QACpC,6CAA6C;IAC/C,CAAC;IAEM,6CAAiB,GAAxB,UAAyB,EAAO;QAC9B,6CAA6C;IAC/C,CAAC;IAEM,4CAAgB,GAAvB,UAAwB,UAAmB;QACzC,6CAA6C;IAC/C,CAAC;IAEM,6CAAiB,GAAxB,UAAyB,KAAsB;QAC7C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAEM,0CAAc,GAArB,UAAsB,KAAc;QAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAzMa,wBAAM,GAAG,CAAC,CAAC;IA0M3B,wBAAC;CAAA;AA3M6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4HCxD1B,sHAAI,mGAAsB,MAC1B;;;;;;2oBAAwB,IACtB,0rFAA6C,MAC3C,uSAAW,iGAAqB,MAChC,myEAA2E,KAC5D,4MAC2B,2HAAM,KAClD,qsFAA6C,MAC3C,ySAAW,6FAAiB,MAC5B,iyEAAyE,KAC1D,4MACuB,2HAAM,KAC9C,qsFAA6C,MAC3C,ySAAW,kGAAsB,MACjC,kiEAGC,KADC,iGAA+E,KAFjF,+PAGC,KACc,4MAC4B,2HAAM,KACnD,qsFAA6C,MAC3C,ySAAW,8FAAkB,MAC7B,+hEAAoH,KAA5E,kGAA2E,KAAnH,+PAAoH,KACrG,6MACwB,4HAAM,KAEjD,wHAAI,KACF,wHAAI,mMAAsH,MAC1H,wHAAI,wLAA2G,MAC/G,wHAAI,2IAA8D,MAClE,wHAAI,kIAAqD,mDA7BtD,mBAAkB,OAAvB,YAAwB,EAAnB,SAAkB,GAGR,gCAA+B,EAA1C,aAA2E,EAAhE,UAA+B,GAAC,iCAA+B,EAA1E,aAA2E,EAAhC,UAA+B,GAK/D,4BAA2B,EAAtC,aAAyE,EAA9D,UAA2B,GAAC,mCAAiC,EAAxE,aAAyE,EAAlC,UAAiC,GAMtE,kCAAgC,EADlC,aAGC,EAFC,WAAgC,GAChC,4DAA+E,UAFjF,aAGC,EADC,WAA+E,GAMtE,8BAA4B,EAAvC,aAAoH,EAAzG,WAA4B,GAAC,yDAA2E,UAAnH,cAAoH,EAA5E,WAA2E,mDArBvH,8sBAAwB,GACtB,y4EAA6C,IAE3C,0yCAA2E,IAC5D,6MAC2B,GAC5C,o6EAA6C,IAE3C,0yCAAyE,IAC1D,yMACuB,GACxC,g7EAA6C,IAE3C,o0CAGC,IACc,gNAC4B,GAC7C,g9EAA6C,IAE3C,00CAAoH,IACrG,+MACwB;;;;;;;;;;;;;;;;;;;;;;;;ACxB0B;AACmE;AACtG;AAEtC;IAC2C,+EAAsB;IAC/D;eACE,iBAAO;IACT,CAAC;IAEM,gDAAgB,GAAvB,UAA2B,IAA2B,EAAE,OAAwB;QAC9E,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC5B,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;SAC5B;QACD,OAAO,iBAAM,gBAAgB,YAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;IACH,4BAAC;AAAD,CAAC,CAX0C,iFAAsB,GAWhE;;AAED;IAAA;QAwCS,WAAM,GAA0B,+CAAE,CACvC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC;YACrC,EAAE,EAAE,OAAK,CAAG;YACZ,IAAI,EAAE,UAAQ,CAAG;SAClB,CAAC,EAHoC,CAGpC,CAAC,CACJ,CAAC;QACK,SAAI,GAAG,IAAI,wDAAS,CAAC;YAC1B,aAAa,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,8BAA8B,EAAE,CAAC;YACxF,SAAS,EAAE,IAAI,0DAAW,CAAC,UAAU,CAAC;YACtC,cAAc,EAAE,IAAI,0DAAW,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,uBAAuB,EAAE,CAAC;YAC7E,UAAU,EAAE,IAAI,0DAAW,CAAC,KAAK,CAAC;SACnC,CAAC,CAAC;IACL,CAAC;IAAD,6CAAC;AAAD,CAAC;;AAOD,SAAS,aAAa,CAAC,MAAc;IACnC,+CAA+C;IAC/C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;QACjC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;KACzB;IAED,IAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,IAAM,KAAK,GAA0B,+CAAE,CACrC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC;QACrC,EAAE,EAAE,KAAG,UAAU,GAAG,CAAG;QACvB,IAAI,EAAK,UAAU,SAAI,CAAG;KAC3B,CAAC,EAHoC,CAGpC,CAAC,CACJ,CAAC;IAEF,OAAO;QACL,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ;QAC/C,KAAK,EAAE,IAAI;QACX,QAAQ,EAAE,MAAM;QAChB,KAAK,EAAE,KAAK;QACZ,WAAW,wBAAoC;KAChD,CAAC;AACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uHC9FO,wHAAkD,qFACzC,+JAA8C,gFAAoB,iCAA5D,kBAA0B,0BAAhC,YAA8C,EAAxC,SAA0B,GAAc,uEAAoB;uHAE3E,wHAAiD,KAC/C,uHAAK,mFAAM,MACX,iLAAwF,gFAAgB,iCAAlG,kBAAgC,gCAAC,kBAAmC,+BAA1E,YAAwF,EAAlF,SAAgC,EAAC,SAAmC,GAAc,mEAAgB;uHAT9G,sHAAI,oGAAuB,MAC3B,upFAAgB,MACd,uSAAW,kFAAM,MACjB,uiBAAuF,YAA5E;;wBAA0B;MAArC,msDAAuF,KACrF,8YAAkD,IAGlD,4YAAiD,IAKpC,6MAEjB,2HAAI,KACF,uHAAI,sIAAyD,mDAZlD,oBAA0B,eAArC,aAAuF,EAA5E,UAA0B,GAAC,oBAAoB,QAAC,oBAA2B,eAAtF,aAAuF,EAAjD,UAAoB,EAAC,UAA2B,mDAFxF,y3EAAgB,IAEd,0yCAAuF,IASxE,iMAEjB;;;;;;;;;;;;;;;;ACbJ;AAAA;AAAA;IAAA;QAoCS,UAAK,GAAG;YACb;gBACE,KAAK,EAAE;oBACL,KAAK,EAAE,KAAK;oBACZ,IAAI,EAAE,KAAK;iBACZ;gBACD,KAAK,EAAE,KAAK;aACb;YACD;gBACE,KAAK,EAAE;oBACL,KAAK,EAAE,OAAO;oBACd,IAAI,EAAE,KAAK;iBACZ;gBACD,KAAK,EAAE,OAAO;aACf;YACD;gBACE,KAAK,EAAE;oBACL,KAAK,EAAE,MAAM;oBACb,IAAI,EAAE,OAAO;iBACd;gBACD,KAAK,EAAE,MAAM;aACd;SACF,CAAC;QACK,iBAAY,GAAQ,IAAI,CAAC;QACzB,iBAAY,GAAG;YACpB,+CAA+C,EAAE,IAAI;SACtD,CAAC;IACJ,CAAC;IAAD,wCAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iIChEG,sHAAI,uGAA0B,MAC9B;;;;;;2oBAAyB,IACvB,0rFAA6C,MAC3C,uSAAW,kFAAM,MACjB,4xEAA8D,KAE3D,4MAC8B,2HAAM,KAC3C,uHAAI,KACF,uHAAI,yHAA4C,MAChD,uHAAI,0IAA6D,MACjE,uHAAI,mGAAsB,mDAVtB,mBAAkB,OAAxB,YAAyB,EAAnB,SAAkB,GAGT,yBAAwB,EAAnC,aAA8D,EAAnD,UAAwB,GAAC,oBAAyB,aAA7D,aAA8D,EAA1B,UAAyB,mDAHjE,8sBAAyB,GACvB,y4EAA6C,IAE3C,0yCAA8D,IAE3D,sMAC8B;;;;;;;;;;;;;;;;ACPzC;AAAA;AAAA;AAAA;AAAA;AAAwD;AACe;AAC1C;AAE7B;IAAA;QAoBS,eAAU,GAAG,IAAI,oFAAyB,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,cAAM,iDAAK,EAAL,CAAK,EAAE,CAAC,CAAC;QAC1G,SAAI,GAAG,IAAI,wDAAS,CAAC;YAC1B,MAAM,EAAE,IAAI,0DAAW,CAAC,KAAK,CAAC;SAC/B,CAAC,CAAC;IACL,CAAC;IAAD,kDAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0HC5BG,sHAAI,sGAAyB,MAC7B;;;;;;2oBAAyB,IACvB,0rFAA6C,MAC3C,uSAAW,kFAAM,MACjB,4xEAA8D,KAE3D,4MAC8B,2HAAM,KAC3C,uHAAI,KACF,uHAAI,yHAA4C,MAChD,uHAAI,oLAAuG,mDATvG,mBAAkB,OAAxB,YAAyB,EAAnB,SAAkB,GAGT,yBAAwB,EAAnC,aAA8D,EAAnD,UAAwB,GAAC,oBAAyB,aAA7D,aAA8D,EAA1B,UAAyB,mDAHjE,8sBAAyB,GACvB,y4EAA6C,IAE3C,0yCAA8D,IAE3D,sMAC8B;;;;;;;;;;;;;;;;ACPzC;AAAA;AAAA;AAAA;AAAA;AAAwD;AACe;AACrC;AAElC;IAAA;QAmBS,eAAU,GAAG,IAAI,oFAAyB,CAAC;YAChD,IAAI,EAAE,IAAI;YACV,QAAQ,EAAE,GAAG;YACb,KAAK,EAAE,GAAG;YACV,KAAK,EAAE,cAAM,8DAAU,CAAC,sBAAsB,CAAC,EAAlC,CAAkC;SAChD,CAAC,CAAC;QACI,SAAI,GAAG,IAAI,wDAAS,CAAC;YAC1B,MAAM,EAAE,IAAI,0DAAW,CAAC,KAAK,CAAC;SAC/B,CAAC,CAAC;IACL,CAAC;IAAD,2CAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0HChCG,sHAAI,0HAA6C,MACjD,uHAAK,KACH,8KAAkC,YAA1B;;wBAAyB;MAAjC,wBAAkC,4FAAe,MAEnD;;;;;;2oBAAyB,IACvB,2rFAA6C,MAC3C,uSAAW,kFAAM,MACjB,y0EAAkG,KAE/F,4MAC8B,2HAAM,8RAE3C,4HAAI,KACF,uHAAI,yGAA4B,MAChC,uHAAI,8GAAiC,MACrC,uHAAI,yIAA4D,mDAX5D,mBAAkB,OAAxB,YAAyB,EAAnB,SAAkB,GAGT,yBAAwB,EAAnC,aAAkG,EAAvF,UAAwB,GAAC,oBAAqB,SAAC,oBAAuC,oBAAjG,aAAkG,EAA9D,UAAqB,EAAC,UAAuC,mDAHrG,8sBAAyB,GACvB,+5EAA6C,IAE3C,0yCAAkG,IAE/F,sMAC8B,GAAM,oMAE3C;;;;;;;;;;;;;;;;ACZJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgG;AAE1D;AACkB;AAExD;IAAA;IAIA,CAAC;IAHC,0CAAY,GAAZ,UAAa,OAA2B,EAAE,IAAwC;QAChF,OAAO,CAAC,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IACH,0BAAC;AAAD,CAAC;;AAED;IAuCE;QAfO,WAAM,GAAsB,+CAAE,CACnC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC;YACrC,KAAK,EAAE,OAAK,CAAG;YACf,KAAK,EAAE,UAAQ,CAAG;SACnB,CAAC,EAHoC,CAGpC,CAAC,CACJ,CAAC;QACK,SAAI,GAAG,IAAI,wDAAS,CAAC;YAC1B,MAAM,EAAE,IAAI,0DAAW,CAAC,IAAI,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SACrD,CAAC,CAAC;QACI,sBAAiB,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAC9C,oBAAe,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,IAAI,CAChE,gEAAS,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAW,CAAC,EAC9C,kEAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAClB,CAAC;QAGA,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC;IAED,4DAAa,GAAb;QACE,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACtB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;SACpB;aAAM;YACL,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;SACrB;IACH,CAAC;IACH,2CAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mHC7DG,sHAAI,wGAA2B,MAC/B,upFAAgB,MACd,uSAAW,gGAAoB,MAC/B,0XAA8E,YAA9C;;wBAA6C;MAA7E,8hCAA8E,KAC/D,2NAEjB,2HAAI,KACF,uHAAI,gHAAmC,MACvC,uHAAI,gLAAmG,mDAL5F,oBAAoB,QAA/B,aAA8E,EAAnE,UAAoB,mDAFjC,y3EAAgB,IAEd,klBAA8E,GAC/D,2LAEjB;;;;;;;;;;;;;;;;ACJJ;AAAA;AAAA;IAAA;QAiBS,UAAK,GAAU,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC;YAC3D,KAAK,EAAE,OAAK,CAAG;YACf,KAAK,EAAE,UAAQ,CAAG;SACnB,CAAC,EAH0D,CAG1D,CAAC,CAAC;QACG,WAAM,GAAa,EAAE,CAAC;IAK/B,CAAC;IAHQ,yDAAiB,GAAxB,UAAyB,KAAsB;QAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IACH,oCAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oHC5BG,sHAAI,wFAAW,MACf;;;;;;2oBAAyB,IACvB,0rFAA6C,MAC3C,uSAAW,kFAAM,MACjB,uzEAA4E,KAEzE,4MAC8B,2HAAM,KAC3C,uHAAI,KACF,uHAAI,gHAAmC,MACvC,uHAAI,yIAA4D,MAChE,uHAAI,gKAAmF,MACvF,uHAAI,6JAAgF,mDAXhF,mBAAkB,OAAxB,YAAyB,EAAnB,SAAkB,GAGT,yBAAwB,EAAnC,aAA4E,EAAjE,UAAwB,GAAC,oBAAqB,SAAC,qBAAiB,EAA3E,aAA4E,EAAxC,UAAqB,EAAC,UAAiB,mDAH/E,8sBAAyB,GACvB,y4EAA6C,IAE3C,0yCAA4E,IAEzE,sMAC8B;;;;;;;;;;;;;;;;ACPzC;AAAA;AAAA;AAAA;AAAwD;AAClB;AAEtC;IAAA;QAqBS,WAAM,GAAsB,+CAAE,CACnC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC;YACrC,KAAK,EAAE,OAAK,CAAG;YACf,KAAK,EAAE,UAAQ,CAAG;SACnB,CAAC,EAHoC,CAGpC,CAAC,CACJ,CAAC;QACK,SAAI,GAAG,IAAI,wDAAS,CAAC;YAC1B,MAAM,EAAE,IAAI,0DAAW,EAAE;SAC1B,CAAC,CAAC;IACL,CAAC;IAAD,qCAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gHCjCG,sHAAI,oFAAO,MACX,uHAAK,KACH,8KAA2B,YAAnB;;wBAAkB;MAA1B,wBAA2B,gGAAmB,MAEhD,upFAAgB,MACd,uSAAW,yFAAa,MACxB,siBAA2D,YAAhD;;wBAA0B;MAArC,oqDAA2D,KAC5C,6MAEjB,2HAAI,KACF,uHAAI,0HAA6C,MACjD,uHAAI,oIAAuD,mDALhD,oBAA0B,eAArC,aAA2D,EAAhD,UAA0B,GAAC,oBAAoB,QAA1D,aAA2D,EAArB,UAAoB,mDAF5D,y3EAAgB,IAEd,0yCAA2D,IAC5C,iMAEjB;;;;;;;;;;;;;;;;ACVJ;AAAA;AAAA;AAAsF;AAEtF;IA0BE,oCAAoB,EAAqB;QAArB,OAAE,GAAF,EAAE,CAAmB;QANlC,UAAK,GAAU,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC;YAC3D,KAAK,EAAE,OAAK,CAAG;YACf,KAAK,EAAE,UAAQ,CAAG;SACnB,CAAC,EAH0D,CAG1D,CAAC,CAAC;QACG,iBAAY,GAAQ,MAAM,CAAC;IAEU,CAAC;IAEtC,2CAAM,GAAb;QACE,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC1D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;QAC1C,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;IACzB,CAAC;IACH,iCAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yHClCG,sHAAI,4HAA+C,MACnD,wHAAK,KACH,gbAA4F,YAA3E;;wBAAgC;MAAC;;wBAAyC;MAA3F,uvCAA4F,IAC1F;;;08BAAkC,gFAAO,MACzC;;;08BAAoC,yFAAgB,MACpD;;;08BAAoC,yFAAgB,MAGxD;;;;;;6oBAAyB,IACvB,+rFAA6C,MAC3C,uSAAW,kFAAM,MACjB,gyEAA8D,KAE3D,4MAC8B,2HAAM,wGACG,6HAAM,uGAEpD,6HAAI,KACF,uHAAI,2KAA8F,MAClG,uHAAI,4LAA+G,MACnH,uHAAI,kKAAqF,MACzF,uHAAI,iJAAoE,mDAnBvD,mBAAgC,qBAAjD,YAA4F,EAA3E,SAAgC,GAC7B,0BAAe,EAAjC,aAAkC,EAAhB,UAAe,GACf,4BAAiB,EAAnC,aAAoC,EAAlB,UAAiB,GACjB,4BAAiB,EAAnC,aAAoC,EAAlB,UAAiB,GAGjC,oBAAkB,OAAxB,aAAyB,EAAnB,UAAkB,GAGT,yBAAwB,EAAnC,aAA8D,EAAnD,UAAwB,GAAC,oBAAyB,aAA7D,aAA8D,EAA1B,UAAyB,mDAT/D,8sBAA4F,GAC1F,sxBAAkC,GAClC,0xBAAoC,GACpC,0xBAAoC,GAGxC,ouBAAyB,GACvB,o6EAA6C,IAE3C,0yCAA8D,IAE3D,sMAC8B,GAAM,kEACG,GAAM,yDAEpD;;;;;;;;;;;;;;;;AClBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsF;AAC9B;AACwD;AACtF;AACa;AAEvC;IAqCE,6CAAoB,EAAqB;QAArB,OAAE,GAAF,EAAE,CAAmB;QANlC,uBAAkB,GAAG,SAAS,CAAC;QAC/B,cAAS,GAAG,CAAC,CAAC;QACd,SAAI,GAAG,IAAI,wDAAS,CAAC;YAC1B,MAAM,EAAE,IAAI,0DAAW,CAAC,KAAK,CAAC;SAC/B,CAAC,CAAC;QAGD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACjD,CAAC;IAEM,8DAAgB,GAAvB,UAAwB,KAAa;QACnC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACnB,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,iBAA6B,CAAC;SACtE;aAAM,IAAI,KAAK,KAAK,WAAW,EAAE;YAChC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,wBAAoC,CAAC;SAC7E;aAAM;YACL,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,gBAAgB,wBAAoC,CAAC;SAC7E;QACD,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;IACzB,CAAC;IAEO,8DAAgB,GAAxB,UAAyB,WAAgC;QAAzD,iBAsBC;QArBC,OAAO,IAAI,oFAAyB,CAAS;YAC3C,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,OAAO;YACd,QAAQ,EAAE,OAAO;YACjB,KAAK,EAAE;gBACL,KAAI,CAAC,SAAS,EAAE,CAAC;gBACjB,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;gBAC3B,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;gBAC3B,OAAO,+CAAE,CAAC;oBACR;wBACE,KAAK,EAAE,IAAI;wBACX,KAAK,EAAE,OAAO,GAAG,IAAI;qBACtB;oBACD;wBACE,KAAK,EAAE,IAAI;wBACX,KAAK,EAAE,OAAO,GAAG,IAAI;qBACtB;iBACF,CAAC,CAAC,IAAI,CAAC,4DAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACvB,CAAC;YACD,WAAW,EAAE,WAAW;SACzB,CAAC,CAAC;IACL,CAAC;IACH,0CAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oICjFG,sHAAI,yHAA4C,MAChD;;;;;;2oBAAyB,IACvB,0rFAA6C,MAC3C,uSAAW,kFAAM,MACjB,4xEAA0D,KAEvD,4MAC8B,2HAAM,KAC3C,wHAAI,KACF,uHAAI,yHAA4C,MAChD,uHAAI,4KAA+F,MACnG,uHAAI,mGAAsB,MAC1B,uHAAI,mUAGJ,MACA,uHAAI,qKAAwF,mDAfxF,mBAAkB,OAAxB,YAAyB,EAAnB,SAAkB,GAGT,yBAAwB,EAAnC,aAA0D,EAA/C,UAAwB,GAAC,oBAAqB,SAAzD,aAA0D,EAAtB,UAAqB,mDAH7D,8sBAAyB,GACvB,y4EAA6C,IAE3C,0yCAA0D,IAEvD,sMAC8B;;;;;;;;;;;;;;;;ACPzC;AAAA;AAAA;AAAA;AAAwD;AAClB;AAEtC;IAAA;QAyBS,WAAM,GAAsB,+CAAE,CACnC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC;YACrC,KAAK,EAAE,OAAK,CAAG;YACf,KAAK,EAAE,UAAQ,CAAG;SACnB,CAAC,EAHoC,CAGpC,CAAC,CACJ,CAAC;QACK,SAAI,GAAG,IAAI,wDAAS,CAAC;YAC1B,MAAM,EAAE,IAAI,0DAAW,CAAC,KAAK,CAAC;SAC/B,CAAC,CAAC;IACL,CAAC;IAAD,qDAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yGCrCG,4jBAA6B,IAC7B,yjBAA6B,IAC7B,mmBAA0B,IAC1B,4rBAAiD,IACjD,gqBAA4C,IAC5C,mnBAAqC,IACrC,2qBAAoC,IACpC,w4BAAuC,IACvC,0lBAAiC,IACjC,mnBAAqC;;;;;;;;;;;;;;;;ACRzC;AAAA;AAAA;IAAA;IAgBkC,CAAC;IAAD,0BAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCnC;AAAA;AAAA;IAAA;IA8B+B,CAAC;IAAD,uBAAC;AAAD,CAAC","file":"select-demo-select-demo-module-ngfactory-es5.js","sourcesContent":["<!-- Placeholder to adjust vertical offset of the mat-option elements -->\r\n<input matInput class=\"mat-select-search-input mat-select-search-hidden\"/>\r\n\r\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\r\n<div\r\n      #innerSelectSearch\r\n      class=\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\"\r\n      [ngClass]=\"{'mat-select-search-inner-multiple': matSelect.multiple, 'mat-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\">\r\n\r\n  <mat-checkbox *ngIf=\"_isToggleAllCheckboxVisible()\"\r\n                [color]=\"matFormField?.color\"\r\n                class=\"mat-select-search-toggle-all-checkbox\"\r\n                [checked]=\"toggleAllCheckboxChecked\"\r\n                [indeterminate]=\"toggleAllCheckboxIndeterminate\"\r\n                (change)=\"_emitSelectAllBooleanToParent($event.checked)\"\r\n  ></mat-checkbox>\r\n\r\n  <input matInput\r\n         class=\"mat-select-search-input\"\r\n         autocomplete=\"off\"\r\n         [type]=\"type\"\r\n         [value]=\"value\"\r\n         #searchSelectInput\r\n         (keydown)=\"_handleKeydown($event)\"\r\n         (keyup)=\"_handleKeyup($event)\"\r\n         (input)=\"onInputChange($event.target.value)\"\r\n         (blur)=\"onBlur($event.target.value)\"\r\n         [placeholder]=\"placeholderLabel\"\r\n         [attr.aria-label]=\"ariaLabel\"\r\n  />\r\n  <mat-spinner *ngIf=\"searching\"\r\n          class=\"mat-select-search-spinner\"\r\n          diameter=\"16\"></mat-spinner>\r\n\r\n  <button mat-button\r\n          *ngIf=\"value && !searching\"\r\n          mat-icon-button\r\n          aria-label=\"Clear\"\r\n          (click)=\"_reset(true)\"\r\n          class=\"mat-select-search-clear\">\r\n    <ng-content *ngIf=\"clearIcon; else defaultIcon\" select=\"[ngxMatSelectSearchClear]\"></ng-content>\r\n    <ng-template #defaultIcon>\r\n      <mat-icon>close</mat-icon>\r\n    </ng-template>\r\n  </button>\r\n\r\n  <ng-content select=\".mat-select-search-custom-header-content\"></ng-content>\r\n\r\n</div>\r\n\r\n<div *ngIf=\"_noEntriesFound()\"\r\n     class=\"mat-select-search-no-entries-found\">\r\n  {{noEntriesFoundLabel}}\r\n</div>\r\n<!--\r\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\r\n\r\nUse of this source code is governed by an MIT-style license that can be\r\nfound in the LICENSE file at https://angular.io/license\r\n-->\r\n","// export what ./public_api exports so we can import with the lib name like this:\r\n// import { ModuleA } from 'libname'\r\nexport * from './public_api';\r\n","export { PsSelectDataComponent } from './src/select-data.component';\nexport { PsSelectComponent } from './src/select.component';\nexport { PsSelectItem } from './src/models';\nexport { isPsSelectDataSource, PsSelectDataSource } from './src/select-data-source';\nexport { PsSelectModule } from './src/select.module';\nexport { PsSelectService } from './src/select.service';\nexport {\n  DefaultPsSelectDataSource,\n  PsSelectLoadTrigger,\n  PsSelectDataSourceOptions,\n  isPsSelectOptionsData,\n} from './src/defaults/default-select-data-source';\nexport { DefaultPsSelectService, PsSelectData } from './src/defaults/default-select-service';\nexport { PsSelectOptionTemplateDirective } from './src/select-option-template.directive';\n","import { BehaviorSubject, combineLatest, isObservable, merge, NEVER, Observable, of, Subject } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  shareReplay,\r\n  skip,\r\n  startWith,\r\n  switchMap,\r\n  take,\r\n  takeUntil,\r\n  tap,\r\n} from 'rxjs/operators';\r\nimport { PsSelectItem } from '../models';\r\nimport { PsSelectDataSource } from '../select-data-source';\r\n\r\nexport declare type MaybeObservable<T> = T | Observable<T>;\r\n\r\nexport interface PsSelectDataSourceOptions<T = any> {\r\n  mode: 'id' | 'entity';\r\n  idKey: keyof T;\r\n  labelKey: keyof T;\r\n  items: MaybeObservable<T[]> | (() => MaybeObservable<T[]>);\r\n  searchDebounce?: number;\r\n  loadTrigger?: PsSelectLoadTrigger;\r\n}\r\n\r\nexport function isPsSelectOptionsData(value: any): value is PsSelectDataSourceOptions {\r\n  return typeof value === 'object' && 'idKey' in value && 'labelKey' in value && 'items' in value && 'mode' in value;\r\n}\r\n\r\nexport const enum PsSelectLoadTrigger {\r\n  // tslint:disable-next-line: no-bitwise\r\n  Initial = 1 << 0,\r\n  // tslint:disable-next-line: no-bitwise\r\n  FirstPanelOpen = 1 << 1,\r\n  // tslint:disable-next-line: no-bitwise\r\n  EveryPanelOpen = 1 << 2,\r\n  All = Initial + FirstPanelOpen + EveryPanelOpen,\r\n}\r\n\r\nexport class DefaultPsSelectDataSource<T = any> extends PsSelectDataSource<T> {\r\n  private _searchDebounceTime: number;\r\n  private _loadTrigger: PsSelectLoadTrigger;\r\n  private _isPanelOpen$ = new BehaviorSubject<boolean>(false);\r\n  private _searchText$ = new BehaviorSubject<string>('');\r\n  private _currentValues$ = new BehaviorSubject<T[]>([]);\r\n  private _ngUnsubscribe$ = new Subject<string>();\r\n  private _loadData: () => Observable<PsSelectItem<T>[]>;\r\n\r\n  constructor(options: PsSelectDataSourceOptions) {\r\n    super();\r\n\r\n    this._searchDebounceTime = options.searchDebounce || 300;\r\n    this._loadTrigger = options.loadTrigger || PsSelectLoadTrigger.Initial;\r\n\r\n    let loadData: () => Observable<PsSelectItem<T>[]>;\r\n    const entityToSelectItem = createEntityToSelectItemMapper(options.mode, options.idKey, options.labelKey);\r\n\r\n    const items = options.items;\r\n    if (typeof items !== 'function') {\r\n      const data$ = ensureObservable(items).pipe(\r\n        map(x => x.map(entityToSelectItem)),\r\n        takeUntil(this._ngUnsubscribe$)\r\n      );\r\n      loadData = () => data$;\r\n    } else {\r\n      const func: () => T[] | Observable<T[]> = items as any;\r\n      loadData = () => ensureObservable(func()).pipe(map(x => x.map(entityToSelectItem)));\r\n    }\r\n\r\n    if (options.mode === 'entity') {\r\n      this.compareWith = createEntityComparer(options.idKey);\r\n      this.getItemsForValues = (values: any[]) => {\r\n        return values.map(entityToSelectItem);\r\n      };\r\n    }\r\n\r\n    this._loadData = () => {\r\n      this.loading = true;\r\n      this.error = null;\r\n      this.errorMessage = null;\r\n\r\n      return loadData().pipe(\r\n        catchError((err: Error | any) => {\r\n          this.error = err;\r\n          this.errorMessage = this.extractErrorMessage(err);\r\n          return of([] as PsSelectItem<T>[]);\r\n        }),\r\n        tap(() => {\r\n          this.loading = false;\r\n        })\r\n      );\r\n    };\r\n  }\r\n\r\n  public connect(): Observable<PsSelectItem<T>[]> {\r\n    const optionsLoadTrigger$ = this.createOptionsLoadTrigger();\r\n    const loadedOptions$ = optionsLoadTrigger$.pipe(\r\n      switchMap(() => this._loadData()),\r\n      startWith<PsSelectItem<T>[]>([]),\r\n      shareReplay({ bufferSize: 1, refCount: true })\r\n    );\r\n\r\n    // Values die nicht in den Options sind, generieren wir hier\r\n    const missingOptions$ = loadedOptions$.pipe(\r\n      switchMap(options =>\r\n        this._currentValues$.pipe(\r\n          map(values => {\r\n            const missingValues = values.filter(value => !options.find(o => this.compareWith(o.value, value)));\r\n            const missingOptions = this.getItemsForValues(missingValues);\r\n            return missingOptions;\r\n          })\r\n        )\r\n      ),\r\n      distinctUntilChanged((a, b) => {\r\n        if (a.length !== b.length) {\r\n          return false;\r\n        }\r\n        for (const option of a) {\r\n          if (!b.find(o => this.compareWith(o.value, option.value))) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      })\r\n    );\r\n\r\n    const options$ = combineLatest([loadedOptions$, missingOptions$]).pipe(\r\n      map(([options, missingOptions]) =>\r\n        missingOptions.concat(options).map(option => {\r\n          if (!option.label) {\r\n            option.label = '';\r\n          } else if (!(typeof option.label === 'string')) {\r\n            option.label = `${option.label}`;\r\n          }\r\n          return option;\r\n        })\r\n      )\r\n    );\r\n\r\n    const panelCloseEvent$ = this._isPanelOpen$.pipe(\r\n      skip(1), // Wir wollen nur Close-Events, nicht den initialen Zustand des Panels\r\n      distinctUntilChanged(),\r\n      filter(x => !x)\r\n    );\r\n    const valueChangedWhileClosed$ = this._isPanelOpen$.pipe(\r\n      distinctUntilChanged(),\r\n      switchMap(panelOpen => (panelOpen ? NEVER : this._currentValues$.pipe(skip(1))))\r\n    );\r\n    const sortTrigger$ = merge(panelCloseEvent$, valueChangedWhileClosed$);\r\n    const renderOptions$ = options$.pipe(\r\n      // Initial und wenn sich das Panel schließt, müssen wir die selektierten Options nach oben sortieren\r\n      switchMap(options =>\r\n        sortTrigger$.pipe(\r\n          startWith(!this._isPanelOpen$.value),\r\n          map(() => {\r\n            const selectedOptions = options.filter(option =>\r\n              this._currentValues$.value.find(value => this.compareWith(option.value, value))\r\n            );\r\n            const selectedOptionsSet = new WeakSet(selectedOptions);\r\n            options.sort((a, b) => {\r\n              const aSelected = !!selectedOptionsSet.has(a);\r\n              const bSelected = !!selectedOptionsSet.has(b);\r\n              const selectedDifferent = +bSelected - +aSelected;\r\n              if (selectedDifferent) {\r\n                return selectedDifferent;\r\n              }\r\n\r\n              return this.sortCompare(a, b);\r\n            });\r\n            return options;\r\n          })\r\n        )\r\n      ),\r\n      // Suchtext handling\r\n      switchMap(options =>\r\n        this._searchText$.pipe(\r\n          debounceTime(this._searchDebounceTime),\r\n          startWith(this._searchText$.value),\r\n          map(x => (x || '').toLowerCase()),\r\n          distinctUntilChanged(),\r\n          map(searchText => {\r\n            options.forEach(option => {\r\n              option.hidden = option.label.toLowerCase().indexOf(searchText) === -1;\r\n            });\r\n            return options;\r\n          })\r\n        )\r\n      )\r\n    );\r\n    return renderOptions$;\r\n  }\r\n\r\n  public disconnect(): void {\r\n    this._isPanelOpen$.complete();\r\n    this._searchText$.complete();\r\n    this._currentValues$.complete();\r\n    this._ngUnsubscribe$.next();\r\n    this._ngUnsubscribe$.complete();\r\n  }\r\n\r\n  public panelOpenChanged(panelOpen: boolean): void {\r\n    this._isPanelOpen$.next(panelOpen);\r\n  }\r\n\r\n  public searchTextChanged(searchText: string): void {\r\n    this._searchText$.next(searchText);\r\n  }\r\n\r\n  public selectedValuesChanged(values: T[]): void {\r\n    this._currentValues$.next(values);\r\n  }\r\n\r\n  public getItemsForValues(values: T[]): PsSelectItem<T>[] {\r\n    return values.map(v => ({\r\n      value: v,\r\n      label: `??? (ID: ${v})`,\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Sort comparer for the items.\r\n   * Note: Selected items will still be at the top.\r\n   */\r\n  public sortCompare = (a: PsSelectItem, b: PsSelectItem): number => {\r\n    return a.label.localeCompare(b.label);\r\n  };\r\n\r\n  /**\r\n   * Extracts a error message from a given error object\r\n   * @param error The error object.\r\n   * @returns The error message\r\n   */\r\n  public extractErrorMessage = (error: any): string => {\r\n    if (error instanceof Error) {\r\n      return error.message;\r\n    }\r\n    return error;\r\n  };\r\n\r\n  private createOptionsLoadTrigger(): Observable<void> {\r\n    const loadTriggers: Observable<any>[] = [];\r\n    // tslint:disable-next-line: no-bitwise\r\n    if (this._loadTrigger & PsSelectLoadTrigger.Initial) {\r\n      loadTriggers.push(of(null));\r\n    }\r\n\r\n    const panelOpen$ = this._isPanelOpen$.pipe(\r\n      distinctUntilChanged(),\r\n      filter(panelOpen => panelOpen)\r\n    );\r\n    // tslint:disable-next-line: no-bitwise\r\n    if (this._loadTrigger & PsSelectLoadTrigger.EveryPanelOpen) {\r\n      loadTriggers.push(panelOpen$);\r\n      // tslint:disable-next-line: no-bitwise\r\n    } else if (this._loadTrigger & PsSelectLoadTrigger.FirstPanelOpen) {\r\n      loadTriggers.push(panelOpen$.pipe(take(1)));\r\n    }\r\n\r\n    return merge(...loadTriggers);\r\n  }\r\n}\r\n\r\nexport function ensureObservable<T>(data: T | Observable<T>): Observable<T> {\r\n  if (!isObservable(data)) {\r\n    data = of(data);\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction createEntityToSelectItemMapper(mode: 'id' | 'entity', idKey: keyof any, labelKey: keyof any): (item: any) => PsSelectItem<any> {\r\n  if (mode === 'id') {\r\n    return (item: any) => ({\r\n      value: item[idKey],\r\n      label: item[labelKey],\r\n    });\r\n  }\r\n  return (item: any) => ({\r\n    value: item,\r\n    label: item[labelKey],\r\n  });\r\n}\r\n\r\nfunction createEntityComparer(idKey: keyof any) {\r\n  return (entity1: any, entity2: any) => {\r\n    // Wenn sie gleich sind, sind sie wohl gleich :D\r\n    if (entity1 === entity2) {\r\n      return true;\r\n    }\r\n\r\n    // Wenn der typ ungleich ist, dann sind sie nicht gleich\r\n    if (typeof entity1 !== typeof entity2) {\r\n      return false;\r\n    }\r\n\r\n    // Wenn eins von beidem falsy ist, es aber nicht das gleiche falsy ist (check oben), dann sind sie nicht gleich\r\n    if (!entity1 || !entity2) {\r\n      return false;\r\n    }\r\n\r\n    // Wenn es kein Object ist, wird es nicht unterstützt und wir geben false zurück\r\n    if (typeof entity1 !== 'object') {\r\n      return false;\r\n    }\r\n\r\n    return entity1[idKey] === entity2[idKey];\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { isPsSelectDataSource, PsSelectDataSource } from '../select-data-source';\r\nimport { PsSelectService } from '../select.service';\r\nimport { DefaultPsSelectDataSource, PsSelectDataSourceOptions, isPsSelectOptionsData } from './default-select-data-source';\r\nimport { Observable, isObservable } from 'rxjs';\r\nimport { getSelectUnknownDataSourceError } from '../errors';\r\n\r\nexport declare type PsSelectData<T = any> = T[] | Observable<T[]> | PsSelectDataSource | PsSelectDataSourceOptions<T>;\r\n\r\n@Injectable()\r\nexport class DefaultPsSelectService extends PsSelectService {\r\n  public createDataSource<T>(dataSource: PsSelectData<T>, _: AbstractControl | null): PsSelectDataSource<T> {\r\n    if (isPsSelectDataSource(dataSource)) {\r\n      return dataSource;\r\n    }\r\n\r\n    let options: PsSelectDataSourceOptions<T>;\r\n    if (Array.isArray(dataSource) || isObservable(dataSource)) {\r\n      options = {\r\n        mode: 'id',\r\n        labelKey: 'label' as any,\r\n        idKey: 'value' as any,\r\n        items: dataSource,\r\n      };\r\n    } else if (isPsSelectOptionsData(dataSource)) {\r\n      options = dataSource;\r\n    } else {\r\n      throw getSelectUnknownDataSourceError();\r\n    }\r\n\r\n    return new DefaultPsSelectDataSource<T>(options);\r\n  }\r\n}\r\n","/**\r\n * Returns an error that should be thrown when the data source does not match the compatible types.\r\n * @docs-private\r\n */\r\nexport function getSelectUnknownDataSourceError() {\r\n  return Error('The provided data source did not match any of the compatible types');\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { PsSelectItem } from './models';\r\n\r\nexport abstract class PsSelectDataSource<T = any> {\r\n  /** The flag that indicates if the select is currently loading data. */\r\n  public loading = false;\r\n\r\n  /** The error that occured in the last observable returned by _loadItems or null. */\r\n  public error: any = null;\r\n\r\n  /** The error message for the error or null. */\r\n  public errorMessage: string | null = null;\r\n  public compareWith: (value1: T, value2: T) => boolean = (a, b) => a === b;\r\n\r\n  /**\r\n   * Connects a collection viewer (such as a data-table) to this data source. Note that\r\n   * the stream provided will be accessed during change detection and should not directly change\r\n   * values that are bound in template views.\r\n   * @returns Observable that emits a new value when the data changes.\r\n   */\r\n  public abstract connect(): Observable<PsSelectItem<T>[] | ReadonlyArray<PsSelectItem<T>>>;\r\n\r\n  /**\r\n   * Disconnects a collection viewer (such as a data-table) from this data source. Can be used\r\n   * to perform any clean-up or tear-down operations when a view is being destroyed.\r\n   */\r\n  public abstract disconnect(): void;\r\n\r\n  public abstract panelOpenChanged(panelOpen: boolean): void;\r\n  public abstract searchTextChanged(searchText: string): void;\r\n  public abstract selectedValuesChanged(values: T[]): void;\r\n  public abstract getItemsForValues(values: T[]): PsSelectItem<T>[];\r\n}\r\n\r\n/** Checks whether an object is a data source. */\r\nexport function isPsSelectDataSource(value: any): value is PsSelectDataSource<any> {\r\n  // Check if the value is a PsSelectDataSource by observing if it has a connect function. Cannot\r\n  // be checked as an `instanceof PsSelectDataSource` since people could create their own sources\r\n  // that match the interface, but don't extend PsSelectDataSource.\r\n  return value && typeof value.connect === 'function';\r\n}\r\n","\n    <mat-option class=\"ps-select-data__search\">\n      <ngx-mat-select-search [formControl]=\"filterCtrl\" [searching]=\"loading\"></ngx-mat-select-search>\n    </mat-option>\n    <mat-option *ngIf=\"showEmptyInput\" class=\"ps-select-data__empty-option\">\n      --\n    </mat-option>\n    <mat-option *ngIf=\"hasError\" [disabled]=\"true\" class=\"ps-select-data__error\">\n      <span class=\"ps-select-data__error-message\">{{ errorMessage }}</span>\n    </mat-option>\n    <mat-option\n      *ngFor=\"let item of items; trackBy: trackByOptions\"\n      [value]=\"item.value\"\n      [class.ps-option-hidden]=\"item.hidden\"\n      class=\"ps-select-data__option\"\n    >\n      <ng-container *ngIf=\"!optionTemplate\">\n        {{ item.label }}\n      </ng-container>\n      <ng-template *ngIf=\"optionTemplate\" [ngTemplateOutlet]=\"optionTemplate\" [ngTemplateOutletContext]=\"{ $implicit: item }\">\n      </ng-template>\n    </mat-option>\n  ","import {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Host,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  QueryList,\r\n  TemplateRef,\r\n  ViewChildren,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { AbstractControl, FormControl, NgControl } from '@angular/forms';\r\nimport { MatOption } from '@angular/material/core';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { BehaviorSubject, Subject, Subscription } from 'rxjs';\r\nimport { startWith, takeUntil } from 'rxjs/operators';\r\nimport { getSelectUnknownDataSourceError } from './errors';\r\nimport { PsSelectItem } from './models';\r\nimport { isPsSelectDataSource, PsSelectDataSource } from './select-data-source';\r\nimport { PsSelectService } from './select.service';\r\n\r\n@Component({\r\n  selector: 'ps-select-data',\r\n  template: `\r\n    <mat-option class=\"ps-select-data__search\">\r\n      <ngx-mat-select-search [formControl]=\"filterCtrl\" [searching]=\"loading\"></ngx-mat-select-search>\r\n    </mat-option>\r\n    <mat-option *ngIf=\"showEmptyInput\" class=\"ps-select-data__empty-option\">\r\n      --\r\n    </mat-option>\r\n    <mat-option *ngIf=\"hasError\" [disabled]=\"true\" class=\"ps-select-data__error\">\r\n      <span class=\"ps-select-data__error-message\">{{ errorMessage }}</span>\r\n    </mat-option>\r\n    <mat-option\r\n      *ngFor=\"let item of items; trackBy: trackByOptions\"\r\n      [value]=\"item.value\"\r\n      [class.ps-option-hidden]=\"item.hidden\"\r\n      class=\"ps-select-data__option\"\r\n    >\r\n      <ng-container *ngIf=\"!optionTemplate\">\r\n        {{ item.label }}\r\n      </ng-container>\r\n      <ng-template *ngIf=\"optionTemplate\" [ngTemplateOutlet]=\"optionTemplate\" [ngTemplateOutletContext]=\"{ $implicit: item }\">\r\n      </ng-template>\r\n    </mat-option>\r\n  `,\r\n  styles: [\r\n    `\r\n      .ps-option-hidden {\r\n        display: none !important;\r\n      }\r\n      .ps-select-data__error-message {\r\n        color: red;\r\n      }\r\n    `,\r\n  ],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class PsSelectDataComponent<T = any> implements AfterViewInit, OnDestroy {\r\n  /**\r\n   * Stream containing the latest information on what rows are being displayed on screen.\r\n   * Can be used by the data source to as a heuristic of what data should be provided.\r\n   */\r\n  public viewChange = new BehaviorSubject<{ start: number; end: number }>({ start: 0, end: Number.MAX_VALUE });\r\n\r\n  /**\r\n   * The selects's source of data, which can be provided in three ways (in order of complexity):\r\n   *   - Simple data array (each object represents one select option)\r\n   *   - Stream that emits a data array each time the array changes\r\n   *   - `DataSource` object that implements the connect/disconnect interface.\r\n   */\r\n  @Input()\r\n  get dataSource(): PsSelectDataSource<T> {\r\n    return this._dataSource;\r\n  }\r\n  set dataSource(dataSource: PsSelectDataSource<T>) {\r\n    if (this._dataSource !== dataSource) {\r\n      this._switchDataSource(dataSource);\r\n    }\r\n  }\r\n\r\n  @Input() public set compareWith(fn: (o1: any, o2: any) => boolean) {\r\n    this._compareWith = fn;\r\n    this._updateCompareWithBindings();\r\n  }\r\n\r\n  /** Gibt an, ob im singleselect Modus eine leere Option auswählbar sein soll */\r\n  @Input() public clearable = true;\r\n\r\n  @Input() public optionTemplate: TemplateRef<any> | null = null;\r\n\r\n  /** Die MatOptions für MatSelect */\r\n  @ViewChildren(MatOption) public options: QueryList<MatOption>;\r\n\r\n  /** FormControl for the search filter */\r\n  public filterCtrl = new FormControl('');\r\n\r\n  /** Die anzuzeigenden Items */\r\n  public items: PsSelectItem<T>[] | ReadonlyArray<PsSelectItem<T>> = [];\r\n\r\n  /** Gibt an, ob die Items gerade geladen werden */\r\n  public get loading() {\r\n    return this.dataSource && this.dataSource.loading;\r\n  }\r\n\r\n  /** Gibt an, ob es beim Items Laden einen Fehler gab */\r\n  public get hasError() {\r\n    return this.dataSource && !!this.dataSource.error;\r\n  }\r\n\r\n  /** Die Fehlernachricht, wenn es beim Items Laden einen Fehler gab */\r\n  public get errorMessage() {\r\n    return this.dataSource && this.dataSource.errorMessage;\r\n  }\r\n\r\n  /** Gibt an, ob der multiselect Modus aktiv ist */\r\n  public get multiple() {\r\n    return this.select && this.select.multiple;\r\n  }\r\n\r\n  /** Gibt an, ob die MatOption ohne value (zum Auswahl Löschen) angezeigt werden soll. */\r\n  public get showEmptyInput() {\r\n    if (this.multiple || !this.clearable) {\r\n      return false;\r\n    }\r\n    const searchText = (this.filterCtrl.value || '').toLowerCase();\r\n    return !searchText || '--'.indexOf(searchText) > -1;\r\n  }\r\n\r\n  /** Subject that emits when the component has been destroyed. */\r\n  private _ngUnsubscribe$ = new Subject<void>();\r\n\r\n  /** Subscription that listens for the data provided by the data source. */\r\n  private _renderChangeSubscription: Subscription | null;\r\n\r\n  /** The data source. */\r\n  private _dataSource: PsSelectDataSource<T>;\r\n\r\n  /** The compareWith function set through the @Input() */\r\n  private _compareWith: (o1: any, o2: any) => boolean;\r\n\r\n  /** The AbstractControl that MatSelect is bound to. */\r\n  private get control(): AbstractControl {\r\n    return this.ngControl.control;\r\n  }\r\n\r\n  constructor(\r\n    @Inject(MatSelect) private select: MatSelect,\r\n    @Optional() @Host() public ngControl: NgControl,\r\n    private selectService: PsSelectService,\r\n    private cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  public ngAfterViewInit() {\r\n    // MatOptions weiter reichen\r\n    this.options.changes\r\n      .pipe(\r\n        startWith(null as any),\r\n        takeUntil(this._ngUnsubscribe$)\r\n      )\r\n      .subscribe(() => {\r\n        const options = this.options.toArray();\r\n        this.select.options.reset(options);\r\n        this.select.options.notifyOnChanges();\r\n      });\r\n\r\n    // panel open/close, filter und selectedValue an DataSource weiter geben\r\n    this.select.openedChange.pipe(takeUntil(this._ngUnsubscribe$)).subscribe(open => this.dataSource.panelOpenChanged(open));\r\n    this.filterCtrl.valueChanges\r\n      .pipe(takeUntil(this._ngUnsubscribe$))\r\n      .subscribe(searchText => this.dataSource.searchTextChanged(searchText));\r\n    this.select.ngControl.valueChanges\r\n      .pipe(takeUntil(this._ngUnsubscribe$))\r\n      .subscribe(value => this._pushSelectedValuesToDataSource(value));\r\n  }\r\n\r\n  public ngOnDestroy() {\r\n    this._ngUnsubscribe$.next();\r\n    this._ngUnsubscribe$.complete();\r\n    this.viewChange.complete();\r\n\r\n    if (this._renderChangeSubscription) {\r\n      this._renderChangeSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  public trackByOptions(_: number, item: PsSelectItem<T>) {\r\n    return item.value;\r\n  }\r\n\r\n  private _updateCompareWithBindings() {\r\n    if (!this.dataSource) {\r\n      return;\r\n    }\r\n\r\n    // compareWith angegeben -> mat select und datasource updaten\r\n    if (this._compareWith) {\r\n      this._dataSource.compareWith = this._compareWith;\r\n      this.select.compareWith = this._compareWith;\r\n    }\r\n    // keine angegeben, aber datasource hat eine default -> select updaten\r\n    else if (this._dataSource.compareWith) {\r\n      this.select.compareWith = this._dataSource.compareWith;\r\n    }\r\n    // keine angegeben und datasource hat keine default -> datasource updaten\r\n    else {\r\n      this._dataSource.compareWith = this.select.compareWith;\r\n    }\r\n  }\r\n\r\n  private _pushSelectedValuesToDataSource(value: any): void {\r\n    let values: any[];\r\n    if (this.select.multiple) {\r\n      values = Array.isArray(value) ? value : [];\r\n    } else {\r\n      values = value ? [value] : [];\r\n    }\r\n    this.dataSource.selectedValuesChanged(values);\r\n  }\r\n\r\n  /** Set up a subscription for the data provided by the data source. */\r\n  private _switchDataSource(dataSource: any) {\r\n    if (isPsSelectDataSource(this.dataSource)) {\r\n      this.dataSource.disconnect();\r\n    }\r\n\r\n    // Stop listening for data from the previous data source.\r\n    if (this._renderChangeSubscription) {\r\n      this._renderChangeSubscription.unsubscribe();\r\n      this._renderChangeSubscription = null;\r\n    }\r\n\r\n    this._dataSource = this.selectService.createDataSource(dataSource, this.control);\r\n    this._updateCompareWithBindings();\r\n    this._dataSource.searchTextChanged(this.filterCtrl.value);\r\n    this._pushSelectedValuesToDataSource(this.select.ngControl.value);\r\n\r\n    if (!isPsSelectDataSource(this._dataSource)) {\r\n      throw getSelectUnknownDataSourceError();\r\n    }\r\n\r\n    this._renderChangeSubscription = this.dataSource\r\n      .connect()\r\n      .pipe(takeUntil(this._ngUnsubscribe$))\r\n      .subscribe(items => {\r\n        this.items = items || [];\r\n        this.cd.markForCheck();\r\n      });\r\n  }\r\n}\r\n","import { TemplateRef, Directive } from '@angular/core';\r\n\r\n@Directive({ selector: '[psSelectOptionTemplate]' })\r\nexport class PsSelectOptionTemplateDirective {\r\n  constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n","import { TemplateRef, Directive } from '@angular/core';\r\n\r\n@Directive({ selector: '[psSelectTriggerTemplate]' })\r\nexport class PsSelectTriggerTemplateDirective {\r\n  constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n","\n    <div [formGroup]=\"formGroup\" [matTooltip]=\"tooltip\" [matTooltipDisabled]=\"!multiple\">\n      <mat-select\n        [formControl]=\"formControl\"\n        [disableOptionCentering]=\"true\"\n        (selectionChange)=\"onSelectionChange($event)\"\n        (openedChange)=\"onOpenedChange($event)\"\n      >\n        <mat-select-trigger *ngIf=\"triggerTemplate && !empty\">\n          <ng-template [ngTemplateOutlet]=\"triggerTemplate\" [ngTemplateOutletContext]=\"{ $implicit: customTriggerData }\"></ng-template>\n        </mat-select-trigger>\n        <ps-select-data\n          [dataSource]=\"dataSource\"\n          [compareWith]=\"compareWith\"\n          [clearable]=\"clearable\"\n          [optionTemplate]=\"optionTemplate\"\n        ></ps-select-data>\n      </mat-select>\n    </div>\n  ","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ContentChild,\r\n  DoCheck,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Optional,\r\n  Output,\r\n  Self,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, FormGroup, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\r\nimport { ErrorStateMatcher, MatOption } from '@angular/material/core';\r\nimport { MatFormFieldControl } from '@angular/material/form-field';\r\nimport { MatSelect, MatSelectChange } from '@angular/material/select';\r\nimport { PsSelectOptionTemplateDirective } from './select-option-template.directive';\r\nimport { PsSelectTriggerTemplateDirective } from './select-trigger-template.directive';\r\n\r\n@Component({\r\n  selector: 'ps-select',\r\n  template: `\r\n    <div [formGroup]=\"formGroup\" [matTooltip]=\"tooltip\" [matTooltipDisabled]=\"!multiple\">\r\n      <mat-select\r\n        [formControl]=\"formControl\"\r\n        [disableOptionCentering]=\"true\"\r\n        (selectionChange)=\"onSelectionChange($event)\"\r\n        (openedChange)=\"onOpenedChange($event)\"\r\n      >\r\n        <mat-select-trigger *ngIf=\"triggerTemplate && !empty\">\r\n          <ng-template [ngTemplateOutlet]=\"triggerTemplate\" [ngTemplateOutletContext]=\"{ $implicit: customTriggerData }\"></ng-template>\r\n        </mat-select-trigger>\r\n        <ps-select-data\r\n          [dataSource]=\"dataSource\"\r\n          [compareWith]=\"compareWith\"\r\n          [clearable]=\"clearable\"\r\n          [optionTemplate]=\"optionTemplate\"\r\n        ></ps-select-data>\r\n      </mat-select>\r\n    </div>\r\n  `,\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  // tslint:disable-next-line: no-host-metadata-property\r\n  host: {\r\n    '[class.ps-select-multiple]': 'multiple',\r\n    '[class.ps-select-disabled]': 'disabled',\r\n    '[class.ps-select-invalid]': 'errorState',\r\n    '[class.ps-select-required]': 'required',\r\n    '[class.ps-select-empty]': 'empty',\r\n    class: 'ps-select',\r\n  },\r\n  providers: [{ provide: MatFormFieldControl, useExisting: PsSelectComponent }],\r\n})\r\nexport class PsSelectComponent<T = any> implements ControlValueAccessor, MatFormFieldControl<T>, DoCheck {\r\n  public static nextId = 0;\r\n  @HostBinding() public id = `ps-select-${PsSelectComponent.nextId++}`;\r\n\r\n  @ContentChild(PsSelectOptionTemplateDirective, { read: TemplateRef, static: false })\r\n  public optionTemplate: TemplateRef<any> | null = null;\r\n\r\n  @ContentChild(PsSelectTriggerTemplateDirective, { read: TemplateRef, static: false })\r\n  public triggerTemplate: TemplateRef<any> | null = null;\r\n\r\n  @ViewChild(MatSelect, { static: true }) public set setMatSelect(select: MatSelect) {\r\n    this._matSelect = select;\r\n\r\n    // MatSelect doesn't trigger stateChanges on close which causes problems, so we patch it here.\r\n    const close = select.close;\r\n    select.close = () => {\r\n      close.call(select);\r\n      select.stateChanges.next();\r\n    };\r\n\r\n    // Forward the ControlValueAccessor methods to mat-select\r\n    this.writeValue = select.writeValue.bind(select);\r\n    this.registerOnChange = select.registerOnChange.bind(select);\r\n    this.registerOnTouched = select.registerOnTouched.bind(select);\r\n    this.setDisabledState = select.setDisabledState.bind(select);\r\n    select.writeValue = select.registerOnChange = select.registerOnTouched = select.setDisabledState = () => {};\r\n  }\r\n\r\n  /**\r\n   * The selects's source of data, which can be provided in three ways (in order of complexity):\r\n   *   - Simple data array (each object represents one select option)\r\n   *   - Stream that emits a data array each time the array changes\r\n   *   - `DataSource` object that implements the connect/disconnect interface.\r\n   */\r\n  @Input() public dataSource: any;\r\n\r\n  @Input() public compareWith: ((o1: any, o2: any) => boolean) | null = null;\r\n\r\n  /** When true, an empty option is added to the top of the list (ignored for multiple true) */\r\n  @Input() public clearable = true;\r\n\r\n  @Input() public set disabled(value: boolean) {\r\n    this.setDisabledState(value);\r\n  }\r\n  public get disabled(): boolean {\r\n    return this.formControl.disabled;\r\n  }\r\n\r\n  @Input() public set multiple(value: boolean) {\r\n    this._matSelect.multiple = value;\r\n  }\r\n  public get multiple(): boolean {\r\n    return this._matSelect.multiple;\r\n  }\r\n\r\n  @Input() public set errorStateMatcher(value: ErrorStateMatcher) {\r\n    this._matSelect.errorStateMatcher = value;\r\n  }\r\n  public get errorStateMatcher(): ErrorStateMatcher {\r\n    return this._matSelect.errorStateMatcher;\r\n  }\r\n\r\n  @Input() public set panelClass(value: string | string[] | Set<string> | { [key: string]: any }) {\r\n    this._matSelect.panelClass = value;\r\n  }\r\n  public get panelClass(): string | string[] | Set<string> | { [key: string]: any } {\r\n    return this._matSelect.panelClass;\r\n  }\r\n\r\n  @Input() public set placeholder(value: string) {\r\n    this._matSelect.placeholder = value;\r\n  }\r\n  public get placeholder(): string {\r\n    return this._matSelect.placeholder;\r\n  }\r\n\r\n  @Input() public set required(value: boolean) {\r\n    this._matSelect.required = value;\r\n  }\r\n  public get required(): boolean {\r\n    return this._matSelect.required;\r\n  }\r\n\r\n  @Output() public openedChange = new EventEmitter<boolean>();\r\n  @Output() public selectionChange = new EventEmitter<MatSelectChange>();\r\n\r\n  public get value(): T | null {\r\n    return this._matSelect.value;\r\n  }\r\n  public get empty() {\r\n    return this._matSelect.empty;\r\n  }\r\n  public get shouldLabelFloat() {\r\n    return this._matSelect.shouldLabelFloat;\r\n  }\r\n  public get stateChanges() {\r\n    return this._matSelect.stateChanges;\r\n  }\r\n  public get focused() {\r\n    // tslint:disable-next-line: deprecation\r\n    return this._matSelect.focused;\r\n  }\r\n  public get errorState() {\r\n    return this._matSelect.errorState;\r\n  }\r\n  public readonly controlType = 'ps-select';\r\n\r\n  public get formGroup(): FormGroup {\r\n    // ngModel or envent binding only -> dummy control\r\n    return (this._parentFormGroup && this._parentFormGroup.form) || (this._parentForm && this._parentForm.form) || this._dummyForm;\r\n  }\r\n  public get formControl(): FormControl {\r\n    // event binding only -> dummy control\r\n    return (this.ngControl && (this.ngControl.control as FormControl)) || this._dummyControl;\r\n  }\r\n\r\n  public get tooltip(): string {\r\n    // MatSelect is not fully initialized in the beginning, so we need to skip this here until it is ready\r\n    if (this.multiple && this._matSelect && this._matSelect._selectionModel && this._matSelect.selected) {\r\n      return (<MatOption[]>this._matSelect.selected).map(x => x.viewValue).join(', ');\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /** The value displayed in the trigger. */\r\n  get customTriggerData(): { value: string; viewValue: string } | { value: string; viewValue: string }[] {\r\n    if (this.empty) {\r\n      return null;\r\n    }\r\n\r\n    if (this.multiple) {\r\n      const selectedOptions = this._matSelect._selectionModel.selected.map(toTriggerDataObj);\r\n\r\n      if (this._matSelect._isRtl()) {\r\n        selectedOptions.reverse();\r\n      }\r\n\r\n      return selectedOptions;\r\n    }\r\n\r\n    return toTriggerDataObj(this._matSelect._selectionModel.selected[0]);\r\n\r\n    function toTriggerDataObj(option: MatOption): { value: string; viewValue: string } {\r\n      return {\r\n        value: option.value,\r\n        viewValue: option.viewValue,\r\n      };\r\n    }\r\n  }\r\n\r\n  private _dummyForm = new FormGroup({});\r\n  private _dummyControl = new FormControl(null);\r\n  private _matSelect!: MatSelect;\r\n\r\n  constructor(\r\n    @Optional() private _parentForm: NgForm,\r\n    @Optional() private _parentFormGroup: FormGroupDirective,\r\n    @Optional() @Self() public ngControl: NgControl\r\n  ) {\r\n    if (this.ngControl) {\r\n      // Note: we provide the value accessor through here, instead of\r\n      // the `providers` to avoid running into a circular import.\r\n      this.ngControl.valueAccessor = this;\r\n    }\r\n  }\r\n\r\n  public ngDoCheck() {\r\n    // Wen need to call MatSelects ngDoCheck here to update the errorState.\r\n    // Otherwise the errorState would be updated after angular is done with checking\r\n    // for changes on ps-select, which would cause problems with mat-form-field.\r\n    this._matSelect.ngDoCheck();\r\n  }\r\n\r\n  public onContainerClick(_: MouseEvent): void {\r\n    this._matSelect.onContainerClick();\r\n  }\r\n  public setDescribedByIds(ids: string[]): void {\r\n    this._matSelect.setDescribedByIds(ids);\r\n  }\r\n\r\n  public writeValue(_: any) {\r\n    // This method is overwritten in setMatSelect\r\n  }\r\n\r\n  public registerOnChange(fn: () => void) {\r\n    // This method is overwritten in setMatSelect\r\n  }\r\n\r\n  public registerOnTouched(fn: any): void {\r\n    // This method is overwritten in setMatSelect\r\n  }\r\n\r\n  public setDisabledState(isDisabled: boolean): void {\r\n    // This method is overwritten in setMatSelect\r\n  }\r\n\r\n  public onSelectionChange(event: MatSelectChange) {\r\n    this.selectionChange.emit(event);\r\n  }\r\n\r\n  public onOpenedChange(event: boolean) {\r\n    this.openedChange.emit(event);\r\n  }\r\n}\r\n","\n    <h2>Custom PsSelectService</h2>\n    <div [formGroup]=\"form\">\n      <mat-form-field style=\"display:inline-block\">\n        <mat-label>lookup (mode: entity)</mat-label>\n        <ps-select formControlName=\"lookup_entity\" [dataSource]=\"'lookup:country'\"></ps-select>\n      </mat-form-field>\n      value: {{ form.value.lookup_entity | json }}<br />\n      <mat-form-field style=\"display:inline-block\">\n        <mat-label>lookup (mode: id)</mat-label>\n        <ps-select formControlName=\"lookup_id\" [dataSource]=\"'idlookup:country'\"></ps-select>\n      </mat-form-field>\n      value: {{ form.value.lookup_id | json }}<br />\n      <mat-form-field style=\"display:inline-block\">\n        <mat-label>options (mode: entity)</mat-label>\n        <ps-select\n          formControlName=\"options_entity\"\n          [dataSource]=\"{ mode: 'entity', idKey: 'Id', labelKey: 'Name', items: items$ }\"\n        ></ps-select>\n      </mat-form-field>\n      value: {{ form.value.options_entity | json }}<br />\n      <mat-form-field style=\"display:inline-block\">\n        <mat-label>options (mode: id)</mat-label>\n        <ps-select formControlName=\"options_id\" [dataSource]=\"{ mode: 'id', idKey: 'Id', labelKey: 'Name', items: items$ }\"></ps-select>\n      </mat-form-field>\n      value: {{ form.value.options_id | json }}<br />\n    </div>\n    <ul>\n      <li>The initially visible selections should be 'not visible after first open', '??? (ID: country1)', 'Item 1' and 'Item 1'</li>\n      <li>After first opening the lookup dropdowns (when the items are loaded) the label should update to 'country 1'</li>\n      <li>For mode 'entity' the whole object should be in the form value</li>\n      <li>For mode 'id' only the id should be in the form value</li>\n    </ul>\n  ","import { ChangeDetectionStrategy, Component, Injectable } from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\r\nimport { DefaultPsSelectService, PsSelectData, PsSelectDataSource, PsSelectLoadTrigger, PsSelectService } from '@prosoft/components/select';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class CustomPsSelectService extends DefaultPsSelectService {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public createDataSource<T>(data: PsSelectData | string, control: AbstractControl): PsSelectDataSource<T> {\r\n    if (typeof data === 'string') {\r\n      data = getLookupData(data);\r\n    }\r\n    return super.createDataSource(data, control);\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-select-with-custom-select-service',\r\n  template: `\r\n    <h2>Custom PsSelectService</h2>\r\n    <div [formGroup]=\"form\">\r\n      <mat-form-field style=\"display:inline-block\">\r\n        <mat-label>lookup (mode: entity)</mat-label>\r\n        <ps-select formControlName=\"lookup_entity\" [dataSource]=\"'lookup:country'\"></ps-select>\r\n      </mat-form-field>\r\n      value: {{ form.value.lookup_entity | json }}<br />\r\n      <mat-form-field style=\"display:inline-block\">\r\n        <mat-label>lookup (mode: id)</mat-label>\r\n        <ps-select formControlName=\"lookup_id\" [dataSource]=\"'idlookup:country'\"></ps-select>\r\n      </mat-form-field>\r\n      value: {{ form.value.lookup_id | json }}<br />\r\n      <mat-form-field style=\"display:inline-block\">\r\n        <mat-label>options (mode: entity)</mat-label>\r\n        <ps-select\r\n          formControlName=\"options_entity\"\r\n          [dataSource]=\"{ mode: 'entity', idKey: 'Id', labelKey: 'Name', items: items$ }\"\r\n        ></ps-select>\r\n      </mat-form-field>\r\n      value: {{ form.value.options_entity | json }}<br />\r\n      <mat-form-field style=\"display:inline-block\">\r\n        <mat-label>options (mode: id)</mat-label>\r\n        <ps-select formControlName=\"options_id\" [dataSource]=\"{ mode: 'id', idKey: 'Id', labelKey: 'Name', items: items$ }\"></ps-select>\r\n      </mat-form-field>\r\n      value: {{ form.value.options_id | json }}<br />\r\n    </div>\r\n    <ul>\r\n      <li>The initially visible selections should be 'not visible after first open', '??? (ID: country1)', 'Item 1' and 'Item 1'</li>\r\n      <li>After first opening the lookup dropdowns (when the items are loaded) the label should update to 'country 1'</li>\r\n      <li>For mode 'entity' the whole object should be in the form value</li>\r\n      <li>For mode 'id' only the id should be in the form value</li>\r\n    </ul>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [{ provide: PsSelectService, useClass: CustomPsSelectService }],\r\n})\r\nexport class SelectWithCustomSelectServiceComponent {\r\n  public items$: Observable<ILookup[]> = of(\r\n    Array.from(Array(50).keys()).map(i => ({\r\n      Id: `id${i}`,\r\n      Name: `Item ${i}`,\r\n    }))\r\n  );\r\n  public form = new FormGroup({\r\n    lookup_entity: new FormControl({ Id: 'country1', Name: 'not visible after first open' }),\r\n    lookup_id: new FormControl('country1'),\r\n    options_entity: new FormControl({ Id: 'id1', Name: 'not visible in select' }),\r\n    options_id: new FormControl('id1'),\r\n  });\r\n}\r\n\r\nexport interface ILookup {\r\n  Name?: string;\r\n  Id?: string;\r\n}\r\n\r\nfunction getLookupData(lookup: string): PsSelectData<ILookup> {\r\n  // lookup:<entityname> or idlookup:<entityname>\r\n  if (!/^(id)?lookup:/.test(lookup)) {\r\n    throw new Error(lookup);\r\n  }\r\n\r\n  const entityName = lookup.split(':')[1];\r\n  const data$: Observable<ILookup[]> = of(\r\n    Array.from(Array(50).keys()).map(i => ({\r\n      Id: `${entityName}${i}`,\r\n      Name: `${entityName} ${i}`,\r\n    }))\r\n  );\r\n\r\n  return {\r\n    mode: lookup.startsWith('id') ? 'id' : 'entity',\r\n    idKey: 'Id',\r\n    labelKey: 'Name',\r\n    items: data$,\r\n    loadTrigger: PsSelectLoadTrigger.EveryPanelOpen,\r\n  };\r\n}\r\n","\n    <h2>Custom options template</h2>\n    <mat-form-field>\n      <mat-label>select</mat-label>\n      <ps-select [(ngModel)]=\"ngModelValue\" [dataSource]=\"items\" [panelClass]=\"panelNgClass\">\n        <ng-container *psSelectTriggerTemplate=\"let item\">\n          color: <span [style.color]=\"item.value\" class=\"asdf\">{{ item.viewValue }}</span>\n        </ng-container>\n        <ng-container *psSelectOptionTemplate=\"let item\">\n          <div>color:</div>\n          <span [style.color]=\"item.value.color\" [style.font-size]=\"item.value.size\" class=\"asdf\">{{ item.label }}</span>\n        </ng-container>\n      </ps-select>\n    </mat-form-field>\n    value: {{ ngModelValue | json }}\n    <ul>\n      <li>The selectable items should be in the color of their name</li>\n    </ul>\n  ","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-select-with-custom-template',\r\n  template: `\r\n    <h2>Custom options template</h2>\r\n    <mat-form-field>\r\n      <mat-label>select</mat-label>\r\n      <ps-select [(ngModel)]=\"ngModelValue\" [dataSource]=\"items\" [panelClass]=\"panelNgClass\">\r\n        <ng-container *psSelectTriggerTemplate=\"let item\">\r\n          color: <span [style.color]=\"item.value\" class=\"asdf\">{{ item.viewValue }}</span>\r\n        </ng-container>\r\n        <ng-container *psSelectOptionTemplate=\"let item\">\r\n          <div>color:</div>\r\n          <span [style.color]=\"item.value.color\" [style.font-size]=\"item.value.size\" class=\"asdf\">{{ item.label }}</span>\r\n        </ng-container>\r\n      </ps-select>\r\n    </mat-form-field>\r\n    value: {{ ngModelValue | json }}\r\n    <ul>\r\n      <li>The selectable items should be in the color of their name</li>\r\n    </ul>\r\n  `,\r\n  styles: [\r\n    `\r\n      .app-select-with-custom-template__custom-panel.mat-select-panel .mat-option {\r\n        height: auto;\r\n        min-height: 3em;\r\n        line-height: 1.5em;\r\n        padding-top: 3px;\r\n        padding-bottom: 3px;\r\n      }\r\n    `,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class SelectWithCustomTemplateComponent {\r\n  public items = [\r\n    {\r\n      value: {\r\n        color: `red`,\r\n        size: '3em',\r\n      },\r\n      label: `Red`,\r\n    },\r\n    {\r\n      value: {\r\n        color: `green`,\r\n        size: '2em',\r\n      },\r\n      label: `Green`,\r\n    },\r\n    {\r\n      value: {\r\n        color: `blue`,\r\n        size: '1.5em',\r\n      },\r\n      label: `Blue`,\r\n    },\r\n  ];\r\n  public ngModelValue: any = null;\r\n  public panelNgClass = {\r\n    'app-select-with-custom-template__custom-panel': true,\r\n  };\r\n}\r\n","\n    <h2>Endless Loading DataSource</h2>\n    <span [formGroup]=\"form\">\n      <mat-form-field style=\"display:inline-block\">\n        <mat-label>select</mat-label>\n        <ps-select formControlName=\"select\" [dataSource]=\"dataSource\"></ps-select>\n      </mat-form-field>\n    </span>\n    value: {{ form.value.select | json }}<br />\n    <ul>\n      <li>Initially '??? (ID: idx)' should be selected</li>\n      <li>When opening the dropdown, there sould be a loading indicator</li>\n      <li>the filter should work</li>\n    </ul>\n  ","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { DefaultPsSelectDataSource } from '@prosoft/components/select';\r\nimport { NEVER } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-select-with-endless-loading-datasource',\r\n  template: `\r\n    <h2>Endless Loading DataSource</h2>\r\n    <span [formGroup]=\"form\">\r\n      <mat-form-field style=\"display:inline-block\">\r\n        <mat-label>select</mat-label>\r\n        <ps-select formControlName=\"select\" [dataSource]=\"dataSource\"></ps-select>\r\n      </mat-form-field>\r\n    </span>\r\n    value: {{ form.value.select | json }}<br />\r\n    <ul>\r\n      <li>Initially '??? (ID: idx)' should be selected</li>\r\n      <li>When opening the dropdown, there sould be a loading indicator</li>\r\n      <li>the filter should work</li>\r\n    </ul>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectWithEndlessLoadingDataSourceComponent {\r\n  public dataSource = new DefaultPsSelectDataSource({ mode: 'id', labelKey: 'a', idKey: 'b', items: () => NEVER });\r\n  public form = new FormGroup({\r\n    select: new FormControl('idx'),\r\n  });\r\n}\r\n","\n    <h2>Error while loading items</h2>\n    <span [formGroup]=\"form\">\n      <mat-form-field style=\"display:inline-block\">\n        <mat-label>select</mat-label>\n        <ps-select formControlName=\"select\" [dataSource]=\"dataSource\"></ps-select>\n      </mat-form-field>\n    </span>\n    value: {{ form.value.select | json }}<br />\n    <ul>\n      <li>Initially '??? (ID: idx)' should be selected</li>\n      <li>When opening the dropdown, there sould be a red item with 'Failed to load items' that is not selectable</li>\n    </ul>\n  ","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { DefaultPsSelectDataSource } from '@prosoft/components/select';\r\nimport { throwError } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-select-with-error-in-datasource',\r\n  template: `\r\n    <h2>Error while loading items</h2>\r\n    <span [formGroup]=\"form\">\r\n      <mat-form-field style=\"display:inline-block\">\r\n        <mat-label>select</mat-label>\r\n        <ps-select formControlName=\"select\" [dataSource]=\"dataSource\"></ps-select>\r\n      </mat-form-field>\r\n    </span>\r\n    value: {{ form.value.select | json }}<br />\r\n    <ul>\r\n      <li>Initially '??? (ID: idx)' should be selected</li>\r\n      <li>When opening the dropdown, there sould be a red item with 'Failed to load items' that is not selectable</li>\r\n    </ul>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectWithErrorInDataSourceComponent {\r\n  public dataSource = new DefaultPsSelectDataSource({\r\n    mode: 'id',\r\n    labelKey: 'a',\r\n    idKey: 'b',\r\n    items: () => throwError('Failed to load items'),\r\n  });\r\n  public form = new FormGroup({\r\n    select: new FormControl('idx'),\r\n  });\r\n}\r\n","\n    <h2>Disabled form with custom error state matcher</h2>\n    <div>\n      <button (click)=\"toggleDiabled()\">toggle disabled</button>\n    </div>\n    <span [formGroup]=\"form\">\n      <mat-form-field style=\"display:inline-block\">\n        <mat-label>select</mat-label>\n        <ps-select formControlName=\"select\" [dataSource]=\"items$\" [errorStateMatcher]=\"errorStateMatcher\"></ps-select>\n      </mat-form-field>\n    </span>\n    value: {{ form.value.select | json }}<br />\n    last 5 values: {{ lastFiveValues$ | async }}\n    <ul>\n      <li>Should be disabled initially</li>\n      <li>Should be invalid/red on enabling</li>\n      <li>Should be valid/grey when disabling (without choosing value)</li>\n    </ul>\n  ","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { FormControl, FormGroup, FormGroupDirective, NgForm, Validators } from '@angular/forms';\r\nimport { ErrorStateMatcher } from '@angular/material/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { bufferCount, startWith } from 'rxjs/operators';\r\n\r\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\r\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\r\n    return !!(control && control.invalid);\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'app-select-with-error-state-matcher',\r\n  template: `\r\n    <h2>Disabled form with custom error state matcher</h2>\r\n    <div>\r\n      <button (click)=\"toggleDiabled()\">toggle disabled</button>\r\n    </div>\r\n    <span [formGroup]=\"form\">\r\n      <mat-form-field style=\"display:inline-block\">\r\n        <mat-label>select</mat-label>\r\n        <ps-select formControlName=\"select\" [dataSource]=\"items$\" [errorStateMatcher]=\"errorStateMatcher\"></ps-select>\r\n      </mat-form-field>\r\n    </span>\r\n    value: {{ form.value.select | json }}<br />\r\n    last 5 values: {{ lastFiveValues$ | async }}\r\n    <ul>\r\n      <li>Should be disabled initially</li>\r\n      <li>Should be invalid/red on enabling</li>\r\n      <li>Should be valid/grey when disabling (without choosing value)</li>\r\n    </ul>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectWithErrorStateMatcherComponent {\r\n  public items$: Observable<any[]> = of(\r\n    Array.from(Array(10).keys()).map(i => ({\r\n      value: `id${i}`,\r\n      label: `Item ${i}`,\r\n    }))\r\n  );\r\n  public form = new FormGroup({\r\n    select: new FormControl(null, [Validators.required]),\r\n  });\r\n  public errorStateMatcher = new MyErrorStateMatcher();\r\n  public lastFiveValues$ = this.form.get('select').valueChanges.pipe(\r\n    startWith(null, null, null, null, null as any),\r\n    bufferCount(5, 1)\r\n  );\r\n\r\n  constructor() {\r\n    this.form.disable();\r\n  }\r\n\r\n  toggleDiabled() {\r\n    if (this.form.disabled) {\r\n      this.form.enable();\r\n    } else {\r\n      this.form.disable();\r\n    }\r\n  }\r\n}\r\n","\n    <h2>Event output only (no form)</h2>\n    <mat-form-field>\n      <mat-label>selectionChange only</mat-label>\n      <ps-select [dataSource]=\"items\" (selectionChange)=\"onSelectionChange($event)\"></ps-select>\n    </mat-form-field>\n    change event values: {{ values | json }}\n    <ul>\n      <li>Initialliy no event should be fired</li>\n      <li>When changing the selection, the id of the selected item should be added to the events values above</li>\n    </ul>\n  ","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { MatSelectChange } from '@angular/material/select';\r\n\r\n@Component({\r\n  selector: 'app-select-with-events-only',\r\n  template: `\r\n    <h2>Event output only (no form)</h2>\r\n    <mat-form-field>\r\n      <mat-label>selectionChange only</mat-label>\r\n      <ps-select [dataSource]=\"items\" (selectionChange)=\"onSelectionChange($event)\"></ps-select>\r\n    </mat-form-field>\r\n    change event values: {{ values | json }}\r\n    <ul>\r\n      <li>Initialliy no event should be fired</li>\r\n      <li>When changing the selection, the id of the selected item should be added to the events values above</li>\r\n    </ul>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectWithEventsOnlyComponent {\r\n  public items: any[] = Array.from(Array(50).keys()).map(i => ({\r\n    value: `id${i}`,\r\n    label: `Item ${i}`,\r\n  }));\r\n  public values: string[] = [];\r\n\r\n  public onSelectionChange(event: MatSelectChange) {\r\n    this.values.push(event.value);\r\n  }\r\n}\r\n","\n    <h2>Multiselect</h2>\n    <span [formGroup]=\"form\">\n      <mat-form-field style=\"display:inline-block\">\n        <mat-label>select</mat-label>\n        <ps-select formControlName=\"select\" [dataSource]=\"items$\" [multiple]=\"true\"></ps-select>\n      </mat-form-field>\n    </span>\n    value: {{ form.value.select | json }}<br />\n    <ul>\n      <li>Multiple items should be selectable</li>\n      <li>On mouseover the selected items should be shown in a tooltip</li>\n      <li>When selecting a item, the dropdown should stay open and shouldnt reorder the items</li>\n      <li>When closing and reopening the dropdown, all selected items should be at the top</li>\n    </ul>\n  ","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { of, Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-select-with-multiselect',\r\n  template: `\r\n    <h2>Multiselect</h2>\r\n    <span [formGroup]=\"form\">\r\n      <mat-form-field style=\"display:inline-block\">\r\n        <mat-label>select</mat-label>\r\n        <ps-select formControlName=\"select\" [dataSource]=\"items$\" [multiple]=\"true\"></ps-select>\r\n      </mat-form-field>\r\n    </span>\r\n    value: {{ form.value.select | json }}<br />\r\n    <ul>\r\n      <li>Multiple items should be selectable</li>\r\n      <li>On mouseover the selected items should be shown in a tooltip</li>\r\n      <li>When selecting a item, the dropdown should stay open and shouldnt reorder the items</li>\r\n      <li>When closing and reopening the dropdown, all selected items should be at the top</li>\r\n    </ul>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectWithMultiselectComponent {\r\n  public items$: Observable<any[]> = of(\r\n    Array.from(Array(50).keys()).map(i => ({\r\n      value: `id${i}`,\r\n      label: `Item ${i}`,\r\n    }))\r\n  );\r\n  public form = new FormGroup({\r\n    select: new FormControl(),\r\n  });\r\n}\r\n","\n    <h2>ngModel</h2>\n    <div>\n      <button (click)=\"random()\">select random value</button>\n    </div>\n    <mat-form-field>\n      <mat-label>ngModel bound</mat-label>\n      <ps-select [(ngModel)]=\"ngModelValue\" [dataSource]=\"items\"></ps-select>\n    </mat-form-field>\n    value: {{ ngModelValue | json }}\n    <ul>\n      <li>'Item 11'/'id11' should be initially selected</li>\n      <li>Changing the selection should update the selected value</li>\n    </ul>\n  ","import { ChangeDetectionStrategy, Component, ChangeDetectorRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-select-with-ng-model',\r\n  template: `\r\n    <h2>ngModel</h2>\r\n    <div>\r\n      <button (click)=\"random()\">select random value</button>\r\n    </div>\r\n    <mat-form-field>\r\n      <mat-label>ngModel bound</mat-label>\r\n      <ps-select [(ngModel)]=\"ngModelValue\" [dataSource]=\"items\"></ps-select>\r\n    </mat-form-field>\r\n    value: {{ ngModelValue | json }}\r\n    <ul>\r\n      <li>'Item 11'/'id11' should be initially selected</li>\r\n      <li>Changing the selection should update the selected value</li>\r\n    </ul>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectWithNgModelComponent {\r\n  public items: any[] = Array.from(Array(50).keys()).map(i => ({\r\n    value: `id${i}`,\r\n    label: `Item ${i}`,\r\n  }));\r\n  public ngModelValue: any = 'id11';\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  public random() {\r\n    const idx = Math.floor(Math.random() * this.items.length);\r\n    this.ngModelValue = this.items[idx].value;\r\n    this.cd.markForCheck();\r\n  }\r\n}\r\n","\n    <h2>Custom load trigger with 1 second loading delay</h2>\n    <div>\n      <mat-radio-group [(ngModel)]=\"currentLoadTrigger\" (change)=\"onTriggerChanged($event.value)\">\n        <mat-radio-button value=\"initial\">initial</mat-radio-button>\n        <mat-radio-button value=\"firstopen\">first panel open</mat-radio-button>\n        <mat-radio-button value=\"everyopen\">every panel open</mat-radio-button>\n      </mat-radio-group>\n    </div>\n    <span [formGroup]=\"form\">\n      <mat-form-field style=\"display:inline-block\">\n        <mat-label>select</mat-label>\n        <ps-select formControlName=\"select\" [dataSource]=\"dataSource\"></ps-select>\n      </mat-form-field>\n    </span>\n    value: {{ form.value.select | json }}<br />\n    current load trigger: {{ currentLoadTrigger }}<br />\n    load trigger count: {{ loadCount }}\n    <ul>\n      <li>Initially '??? (ID: idx)' should be selected and load trigger should be 'initial' with count 1</li>\n      <li>For load trigger 'first panel open' count should be 0, increase to 1 on first open. It should never go beyond 1</li>\n      <li>For load trigger 'every panel open' count should be 0 and increase by 1 on every open</li>\n      <li>When switching the load trigger, the selected value shouldn't vanish</li>\n    </ul>\n  ","import { ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { DefaultPsSelectDataSource, PsSelectDataSource, PsSelectLoadTrigger } from '@prosoft/components/select';\r\nimport { of } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-select-with-other-load-trigger',\r\n  template: `\r\n    <h2>Custom load trigger with 1 second loading delay</h2>\r\n    <div>\r\n      <mat-radio-group [(ngModel)]=\"currentLoadTrigger\" (change)=\"onTriggerChanged($event.value)\">\r\n        <mat-radio-button value=\"initial\">initial</mat-radio-button>\r\n        <mat-radio-button value=\"firstopen\">first panel open</mat-radio-button>\r\n        <mat-radio-button value=\"everyopen\">every panel open</mat-radio-button>\r\n      </mat-radio-group>\r\n    </div>\r\n    <span [formGroup]=\"form\">\r\n      <mat-form-field style=\"display:inline-block\">\r\n        <mat-label>select</mat-label>\r\n        <ps-select formControlName=\"select\" [dataSource]=\"dataSource\"></ps-select>\r\n      </mat-form-field>\r\n    </span>\r\n    value: {{ form.value.select | json }}<br />\r\n    current load trigger: {{ currentLoadTrigger }}<br />\r\n    load trigger count: {{ loadCount }}\r\n    <ul>\r\n      <li>Initially '??? (ID: idx)' should be selected and load trigger should be 'initial' with count 1</li>\r\n      <li>For load trigger 'first panel open' count should be 0, increase to 1 on first open. It should never go beyond 1</li>\r\n      <li>For load trigger 'every panel open' count should be 0 and increase by 1 on every open</li>\r\n      <li>When switching the load trigger, the selected value shouldn't vanish</li>\r\n    </ul>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectWithOtherLoadTriggerComponent {\r\n  public dataSource: PsSelectDataSource;\r\n  public currentLoadTrigger = 'initial';\r\n  public loadCount = 0;\r\n  public form = new FormGroup({\r\n    select: new FormControl('idx'),\r\n  });\r\n\r\n  constructor(private cd: ChangeDetectorRef) {\r\n    this.onTriggerChanged(this.currentLoadTrigger);\r\n  }\r\n\r\n  public onTriggerChanged(value: string) {\r\n    this.loadCount = 0;\r\n    if (value === 'initial') {\r\n      this.dataSource = this.createDataSource(PsSelectLoadTrigger.Initial);\r\n    } else if (value === 'firstopen') {\r\n      this.dataSource = this.createDataSource(PsSelectLoadTrigger.FirstPanelOpen);\r\n    } else {\r\n      this.dataSource = this.createDataSource(PsSelectLoadTrigger.EveryPanelOpen);\r\n    }\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  private createDataSource(loadTrigger: PsSelectLoadTrigger) {\r\n    return new DefaultPsSelectDataSource<number>({\r\n      mode: 'id',\r\n      idKey: 'value',\r\n      labelKey: 'label',\r\n      items: () => {\r\n        this.loadCount++;\r\n        const rnd1 = Math.random();\r\n        const rnd2 = Math.random();\r\n        return of([\r\n          {\r\n            value: rnd1,\r\n            label: 'item ' + rnd1,\r\n          },\r\n          {\r\n            value: rnd2,\r\n            label: 'item ' + rnd2,\r\n          },\r\n        ]).pipe(delay(1000));\r\n      },\r\n      loadTrigger: loadTrigger,\r\n    });\r\n  }\r\n}\r\n","\n    <h2>Initially selected Item is not in DataSource</h2>\n    <span [formGroup]=\"form\">\n      <mat-form-field style=\"display:inline-block\">\n        <mat-label>select</mat-label>\n        <ps-select formControlName=\"select\" [dataSource]=\"items$\"></ps-select>\n      </mat-form-field>\n    </span>\n    value: {{ form.value.select | json }}<br />\n    <ul>\n      <li>Initially '??? (ID: idx)' should be selected</li>\n      <li>When first opening the dropdown '??? (ID: idx)' should be the first item and marked as selected</li>\n      <li>the filter should work</li>\n      <li>\n        When filtering for 'item' the '??? (ID: idx)' entry should not be visible in the dropdown. When closing the dropdown without\n        clearing the filter, '??? (ID: idx)' should still be thr selected item in the selectbox and no flickering should occur.\n      </li>\n      <li>When selecting a different item, '??? (ID: idx)' should vanish from the selectable items</li>\n    </ul>\n  ","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { of, Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-select-with-selected-item-not-in-datasource',\r\n  template: `\r\n    <h2>Initially selected Item is not in DataSource</h2>\r\n    <span [formGroup]=\"form\">\r\n      <mat-form-field style=\"display:inline-block\">\r\n        <mat-label>select</mat-label>\r\n        <ps-select formControlName=\"select\" [dataSource]=\"items$\"></ps-select>\r\n      </mat-form-field>\r\n    </span>\r\n    value: {{ form.value.select | json }}<br />\r\n    <ul>\r\n      <li>Initially '??? (ID: idx)' should be selected</li>\r\n      <li>When first opening the dropdown '??? (ID: idx)' should be the first item and marked as selected</li>\r\n      <li>the filter should work</li>\r\n      <li>\r\n        When filtering for 'item' the '??? (ID: idx)' entry should not be visible in the dropdown. When closing the dropdown without\r\n        clearing the filter, '??? (ID: idx)' should still be thr selected item in the selectbox and no flickering should occur.\r\n      </li>\r\n      <li>When selecting a different item, '??? (ID: idx)' should vanish from the selectable items</li>\r\n    </ul>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectWithSelectedItemNotInDataSourceComponent {\r\n  public items$: Observable<any[]> = of(\r\n    Array.from(Array(50).keys()).map(i => ({\r\n      value: `id${i}`,\r\n      label: `Item ${i}`,\r\n    }))\r\n  );\r\n  public form = new FormGroup({\r\n    select: new FormControl('idx'),\r\n  });\r\n}\r\n","\n    <app-select-with-multiselect></app-select-with-multiselect>\n    <app-select-with-events-only></app-select-with-events-only>\n    <app-select-with-ng-model></app-select-with-ng-model>\n    <app-select-with-selected-item-not-in-datasource></app-select-with-selected-item-not-in-datasource>\n    <app-select-with-endless-loading-datasource></app-select-with-endless-loading-datasource>\n    <app-select-with-error-in-datasource></app-select-with-error-in-datasource>\n    <app-select-with-other-load-trigger></app-select-with-other-load-trigger>\n    <app-select-with-custom-select-service></app-select-with-custom-select-service>\n    <app-select-with-custom-template></app-select-with-custom-template>\n    <app-select-with-error-state-matcher></app-select-with-error-state-matcher>\n  ","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-select-demo',\r\n  template: `\r\n    <app-select-with-multiselect></app-select-with-multiselect>\r\n    <app-select-with-events-only></app-select-with-events-only>\r\n    <app-select-with-ng-model></app-select-with-ng-model>\r\n    <app-select-with-selected-item-not-in-datasource></app-select-with-selected-item-not-in-datasource>\r\n    <app-select-with-endless-loading-datasource></app-select-with-endless-loading-datasource>\r\n    <app-select-with-error-in-datasource></app-select-with-error-in-datasource>\r\n    <app-select-with-other-load-trigger></app-select-with-other-load-trigger>\r\n    <app-select-with-custom-select-service></app-select-with-custom-select-service>\r\n    <app-select-with-custom-template></app-select-with-custom-template>\r\n    <app-select-with-error-state-matcher></app-select-with-error-state-matcher>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class SelectDemoComponent {}\r\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { RouterModule } from '@angular/router';\nimport { DefaultPsSelectService, PsSelectModule } from '@prosoft/components/select';\nimport { SelectWithCustomSelectServiceComponent } from './demos/select-with-custom-select-service.component';\nimport { SelectWithCustomTemplateComponent } from './demos/select-with-custom-template.component';\nimport { SelectWithErrorStateMatcherComponent } from './demos/select-with-error-state-matcher.component';\nimport { SelectWithEndlessLoadingDataSourceComponent } from './demos/select-with-endless-loading-datasource.component';\nimport { SelectWithErrorInDataSourceComponent } from './demos/select-with-error-in-datasource.component';\nimport { SelectWithEventsOnlyComponent } from './demos/select-with-events-only.component';\nimport { SelectWithMultiselectComponent } from './demos/select-with-multiselect.component';\nimport { SelectWithNgModelComponent } from './demos/select-with-ng-model.component';\nimport { SelectWithOtherLoadTriggerComponent } from './demos/select-with-other-load-trigger.component';\nimport { SelectWithSelectedItemNotInDataSourceComponent } from './demos/select-with-selected-item-not-in-datasource.component';\nimport { SelectDemoComponent } from './select-demo.component';\n\n@NgModule({\n  declarations: [\n    SelectDemoComponent,\n    SelectWithNgModelComponent,\n    SelectWithEventsOnlyComponent,\n    SelectWithSelectedItemNotInDataSourceComponent,\n    SelectWithEndlessLoadingDataSourceComponent,\n    SelectWithErrorInDataSourceComponent,\n    SelectWithOtherLoadTriggerComponent,\n    SelectWithMultiselectComponent,\n    SelectWithCustomSelectServiceComponent,\n    SelectWithCustomTemplateComponent,\n    SelectWithErrorStateMatcherComponent,\n  ],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    PsSelectModule.forRoot(DefaultPsSelectService),\n    CommonModule,\n    MatFormFieldModule,\n    MatRadioModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: SelectDemoComponent,\n      },\n    ]),\n  ],\n  providers: [],\n})\nexport class SelectDemoModule {}\n"],"sourceRoot":""}