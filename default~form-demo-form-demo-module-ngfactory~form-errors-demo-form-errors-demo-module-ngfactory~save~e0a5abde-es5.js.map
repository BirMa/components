{"version":3,"sources":["/C:/workspace/prosoft-components-demo/node_modules/@angular/material/chips/typings/index.d.ts.MatChipList.html","/../components/form-base/index.ts","/../components/form-base/public_api.ts","/../components/form-base/src/form-base.module.ts","/../components/form-base/src/form.service.ts","/../components/form-base/src/helpers.ts","/../components/form-errors/src/form-errors.component.ts.PsFormErrorsComponent.html","/../components/form-errors/src/form-errors.component.ts","/../components/utils/index.ts","/../components/utils/public_api.ts","/../components/utils/src/object.ts"],"names":[],"mappings":"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","file":"default~form-demo-form-demo-module-ngfactory~form-errors-demo-form-errors-demo-module-ngfactory~save~e0a5abde-es5.js","sourcesContent":["<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>","// export what ./public_api exports so we can import with the lib name like this:\r\n// import { ModuleA } from 'libname'\r\nexport * from './public_api';\r\n","export { PsFormBaseModule } from './src/form-base.module';\nexport { BasePsFormService, PsFormService } from './src/form.service';\nexport { hasRequiredField } from './src/helpers';\nexport { IPsFormError, IPsFormErrorData } from './src/models';\n","import { ModuleWithProviders, NgModule, Type } from '@angular/core';\r\nimport { PsFormService } from './form.service';\r\n\r\n@NgModule({})\r\nexport class PsFormBaseModule {\r\n  public static forRoot(formsServiceType: Type<PsFormService>): ModuleWithProviders {\r\n    return {\r\n      ngModule: PsFormBaseModule,\r\n      providers: [{ provide: PsFormService, useClass: formsServiceType }],\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AbstractControl, FormArray, FormControl, FormGroup } from '@angular/forms';\r\nimport { objectToKeyValueArray } from '@prosoft/components/utils';\r\nimport { merge, Observable, of } from 'rxjs';\r\nimport { debounceTime, map, startWith, switchMap } from 'rxjs/operators';\r\nimport { getControlType } from './helpers';\r\nimport { IPsFormError, IPsFormErrorData } from './models';\r\n\r\n@Injectable()\r\nexport abstract class PsFormService {\r\n  public abstract tryDetectRequired: boolean;\r\n  public abstract getLabel(formControl: FormControl): Observable<string> | null;\r\n\r\n  /**\r\n   * Returns the type of the control. Most of the time the type is the same as the selector.\r\n   *\r\n   * @param control The control class (MatSlider, MatSelect, ...)\r\n   */\r\n  public abstract getControlType(control: any): string | null;\r\n  public abstract getControlErrors(control: FormControl): Observable<IPsFormError[]>;\r\n  public abstract getFormErrors(form: FormGroup, includeControls: boolean): Observable<IPsFormError[]>;\r\n}\r\n\r\nexport abstract class BasePsFormService extends PsFormService {\r\n  public options = {\r\n    debounceTime: 100,\r\n    includeControlsDefault: false,\r\n  };\r\n  public tryDetectRequired = true;\r\n\r\n  public getControlType = getControlType;\r\n\r\n  public getControlErrors(control: FormControl): Observable<IPsFormError[]> {\r\n    return this.getErrors(control, true, 'control');\r\n  }\r\n\r\n  public getFormErrors(form: FormGroup, includeControls: boolean | null): Observable<IPsFormError[]> {\r\n    if (includeControls == null) {\r\n      includeControls = this.options.includeControlsDefault;\r\n    }\r\n    return this.getErrors(form, includeControls, 'form');\r\n  }\r\n\r\n  /**\r\n   * Provided to be overwritten to filter the errors.\r\n   */\r\n  public filterErrors(errorData: IPsFormErrorData[], includeControls: boolean, source: 'form' | 'control'): Observable<IPsFormErrorData[]> {\r\n    return of(errorData);\r\n  }\r\n  protected abstract mapDataToError(errorData: IPsFormErrorData[]): Observable<IPsFormError[]>;\r\n\r\n  private getErrors(control: AbstractControl, includeControls: boolean, source: 'form' | 'control'): Observable<IPsFormError[]> {\r\n    const update$ = this.createUpdateTrigger(control);\r\n\r\n    return update$.pipe(\r\n      map(() => this.getErrorInfo(control, includeControls)),\r\n      switchMap(errorData => this.filterErrors(errorData, includeControls, source)),\r\n      switchMap(errorData => this.mapDataToError(errorData))\r\n    );\r\n  }\r\n\r\n  private createUpdateTrigger(control: AbstractControl): Observable<any> {\r\n    return merge(control.valueChanges, control.statusChanges).pipe(\r\n      startWith(null as any),\r\n      debounceTime(this.options.debounceTime)\r\n    );\r\n  }\r\n\r\n  private getErrorInfo(control: AbstractControl, includeControls: boolean = false): IPsFormErrorData[] {\r\n    return this.getControlErrorInfoInternal(control, '', includeControls);\r\n  }\r\n\r\n  private getControlErrorInfoInternal(control: AbstractControl, controlPath: string, includeControls: boolean): IPsFormErrorData[] {\r\n    const errors: IPsFormErrorData[] = [];\r\n\r\n    if (control instanceof FormGroup || control instanceof FormArray) {\r\n      for (const childName in control.controls) {\r\n        if (!control.controls.hasOwnProperty(childName)) {\r\n          continue;\r\n        }\r\n        const childControl = (<{ [key: string]: AbstractControl }>control.controls)[childName];\r\n        if (!(childControl instanceof FormControl) || includeControls) {\r\n          errors.push(\r\n            ...this.getControlErrorInfoInternal(childControl, controlPath ? controlPath + '.' + childName : childName, includeControls)\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    if (control.errors) {\r\n      errors.push(...objectToKeyValueArray(control.errors).map(error => this.createFormErrorData(error, control, controlPath)));\r\n    }\r\n\r\n    return errors;\r\n  }\r\n\r\n  private createFormErrorData(error: { key: string; value: any }, control: AbstractControl, controlPath: string): IPsFormErrorData {\r\n    return {\r\n      controlPath: controlPath,\r\n      errorKey: error.key,\r\n      errorValue: error.value,\r\n      isControl: control instanceof FormControl,\r\n    };\r\n  }\r\n}\r\n","import { AbstractControl, FormArray, FormGroup } from '@angular/forms';\r\n\r\nexport function hasRequiredField(abstractControl: AbstractControl): boolean {\r\n  if (abstractControl.validator) {\r\n    const validator = abstractControl.validator({} as AbstractControl);\r\n    if (validator && validator.required) {\r\n      return true;\r\n    }\r\n  }\r\n  if (abstractControl instanceof FormGroup || abstractControl instanceof FormArray) {\r\n    const controls: any = abstractControl.controls; // any because of https://github.com/microsoft/TypeScript/issues/32552\r\n    for (const controlName in controls) {\r\n      if (controls[controlName]) {\r\n        if (hasRequiredField(controls[controlName])) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Returns the type of the control. Most of the time the type is the same as the selector.\r\n *\r\n * @param control The control class (MatSlider, MatSelect, ...)\r\n */\r\nexport function getControlType(control: any): string | null {\r\n  const controlId: string = control.id /* MatFormFieldControl, z.B. checkbox */ || control.name; /* mat-radio-group */\r\n  if (controlId) {\r\n    const parts = controlId.split('-');\r\n    if (parts[parts.length - 1].match(/[0-9]/)) {\r\n      parts.pop();\r\n    }\r\n    return parts.join('-');\r\n  }\r\n\r\n  if (control.step !== undefined && control.thumbLabel !== undefined) {\r\n    return 'mat-slider';\r\n  }\r\n\r\n  return null;\r\n}\r\n","\n    <mat-chip-list class=\"ps-form-errors__container\" *ngIf=\"errors$ | async as errors\">\n      <mat-chip class=\"ps-form-errors__item\" *ngFor=\"let error of errors\">{{ error.errorText }}</mat-chip>\n    </mat-chip-list>\n  ","import { ChangeDetectionStrategy, Component, Input, OnChanges, ViewEncapsulation } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { IPsFormError, PsFormService } from '@prosoft/components/form-base';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'ps-form-errors',\r\n  template: `\r\n    <mat-chip-list class=\"ps-form-errors__container\" *ngIf=\"errors$ | async as errors\">\r\n      <mat-chip class=\"ps-form-errors__item\" *ngFor=\"let error of errors\">{{ error.errorText }}</mat-chip>\r\n    </mat-chip-list>\r\n  `,\r\n  styles: [\r\n    `\r\n      .ps-form-errors__container {\r\n        font-size: 12px;\r\n      }\r\n      .mat-chip.ps-form-errors__item {\r\n        background-color: var(--ps-error);\r\n        color: var(--ps-error-contrast);\r\n      }\r\n    `,\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class PsFormErrorsComponent implements OnChanges {\r\n  @Input() public form!: FormGroup;\r\n  @Input() public includeControls: boolean = null;\r\n\r\n  public errors$!: Observable<IPsFormError[]>;\r\n\r\n  constructor(private formErrorsService: PsFormService) {}\r\n\r\n  public ngOnChanges() {\r\n    this.errors$ = this.formErrorsService.getFormErrors(this.form, this.includeControls);\r\n  }\r\n}\r\n","// export what ./public_api exports so we can import with the lib name like this:\r\n// import { ModuleA } from 'libname'\r\nexport * from './public_api';\r\n","export { objectToKeyValueArray } from './src/object';\n","export function objectToKeyValueArray(errors: { [key: string]: any }): { key: string; value: any }[] {\r\n  const errorList = [];\r\n  for (const key in errors) {\r\n    if (!errors.hasOwnProperty(key)) {\r\n      continue;\r\n    }\r\n\r\n    errorList.push({\r\n      key: key,\r\n      value: errors[key],\r\n    });\r\n  }\r\n\r\n  return errorList;\r\n}\r\n"],"sourceRoot":""}